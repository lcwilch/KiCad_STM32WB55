
Bluephil_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b08  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08009c48  08009c48  0000ac48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009d84  08009d84  0000ad84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009d8c  08009d8c  0000ad8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009d90  08009d90  0000ad90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000150  20000008  08009d94  0000b008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001b48  20000158  08009ee4  0000b158  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001ca0  08009ee4  0000bca0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000b158  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001295b  00000000  00000000  0000b188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003489  00000000  00000000  0001dae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001538  00000000  00000000  00020f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000fbd  00000000  00000000  000224a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00023a23  00000000  00000000  00023465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013da4  00000000  00000000  00046e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d48b8  00000000  00000000  0005ac2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0012f4e4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005af8  00000000  00000000  0012f528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 000000a0  00000000  00000000  00135020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000158 	.word	0x20000158
 800015c:	00000000 	.word	0x00000000
 8000160:	08009c30 	.word	0x08009c30

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000015c 	.word	0x2000015c
 800017c:	08009c30 	.word	0x08009c30

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000220:	b480      	push	{r7}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800022c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800022e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4313      	orrs	r3, r2
 8000236:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000238:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800023c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4013      	ands	r3, r2
 8000242:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000244:	68fb      	ldr	r3, [r7, #12]
}
 8000246:	bf00      	nop
 8000248:	3714      	adds	r7, #20
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr
	...

08000254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b092      	sub	sp, #72	@ 0x48
 8000258:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800025a:	f000 f9e9 	bl	8000630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025e:	f000 f835 	bl	80002cc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000262:	f000 f897 	bl	8000394 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000266:	f000 f8b2 	bl	80003ce <MX_GPIO_Init>
  MX_USB_Device_Init();
 800026a:	f008 fae1 	bl	8008830 <MX_USB_Device_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t count = 0;
 800026e:	2300      	movs	r3, #0
 8000270:	647b      	str	r3, [r7, #68]	@ 0x44
  uint8_t message[64] = {0};
 8000272:	2300      	movs	r3, #0
 8000274:	607b      	str	r3, [r7, #4]
 8000276:	f107 0308 	add.w	r3, r7, #8
 800027a:	223c      	movs	r2, #60	@ 0x3c
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f009 f856 	bl	8009330 <memset>
  while (1)
  {
    HAL_Delay(900);
 8000284:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8000288:	f000 fa58 	bl	800073c <HAL_Delay>
    sprintf((char*)message, "Hello, world %lu!\r\n", ++count);
 800028c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800028e:	3301      	adds	r3, #1
 8000290:	647b      	str	r3, [r7, #68]	@ 0x44
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000296:	490c      	ldr	r1, [pc, #48]	@ (80002c8 <main+0x74>)
 8000298:	4618      	mov	r0, r3
 800029a:	f009 f829 	bl	80092f0 <siprintf>
    CDC_Transmit_FS(message, sizeof(message));
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	2140      	movs	r1, #64	@ 0x40
 80002a2:	4618      	mov	r0, r3
 80002a4:	f008 fb82 	bl	80089ac <CDC_Transmit_FS>
    HAL_GPIO_TogglePin(Debug_LED_GPIO_Port, Debug_LED_Pin);
 80002a8:	2180      	movs	r1, #128	@ 0x80
 80002aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ae:	f000 fd01 	bl	8000cb4 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 80002b2:	2064      	movs	r0, #100	@ 0x64
 80002b4:	f000 fa42 	bl	800073c <HAL_Delay>
    HAL_GPIO_TogglePin(Debug_LED_GPIO_Port, Debug_LED_Pin);
 80002b8:	2180      	movs	r1, #128	@ 0x80
 80002ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002be:	f000 fcf9 	bl	8000cb4 <HAL_GPIO_TogglePin>
    HAL_Delay(900);
 80002c2:	bf00      	nop
 80002c4:	e7de      	b.n	8000284 <main+0x30>
 80002c6:	bf00      	nop
 80002c8:	08009c48 	.word	0x08009c48

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b09a      	sub	sp, #104	@ 0x68
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	f107 0320 	add.w	r3, r7, #32
 80002d6:	2248      	movs	r2, #72	@ 0x48
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f009 f828 	bl	8009330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]
 80002ee:	615a      	str	r2, [r3, #20]
 80002f0:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002f2:	4b27      	ldr	r3, [pc, #156]	@ (8000390 <SystemClock_Config+0xc4>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80002fa:	4a25      	ldr	r2, [pc, #148]	@ (8000390 <SystemClock_Config+0xc4>)
 80002fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000300:	6013      	str	r3, [r2, #0]
 8000302:	4b23      	ldr	r3, [pc, #140]	@ (8000390 <SystemClock_Config+0xc4>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800030a:	603b      	str	r3, [r7, #0]
 800030c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800030e:	2303      	movs	r3, #3
 8000310:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000312:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000316:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000318:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800031c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800031e:	2340      	movs	r3, #64	@ 0x40
 8000320:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000322:	2302      	movs	r3, #2
 8000324:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000326:	2303      	movs	r3, #3
 8000328:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800032a:	2310      	movs	r3, #16
 800032c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 800032e:	2308      	movs	r3, #8
 8000330:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000332:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000336:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000338:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800033c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800033e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000342:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000344:	f107 0320 	add.w	r3, r7, #32
 8000348:	4618      	mov	r0, r3
 800034a:	f002 fd8d 	bl	8002e68 <HAL_RCC_OscConfig>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000354:	f000 f863 	bl	800041e <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000358:	236f      	movs	r3, #111	@ 0x6f
 800035a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800035c:	2303      	movs	r3, #3
 800035e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000368:	2300      	movs	r3, #0
 800036a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800036c:	2380      	movs	r3, #128	@ 0x80
 800036e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000370:	2300      	movs	r3, #0
 8000372:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2103      	movs	r1, #3
 8000378:	4618      	mov	r0, r3
 800037a:	f003 f8e9 	bl	8003550 <HAL_RCC_ClockConfig>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000384:	f000 f84b 	bl	800041e <Error_Handler>
  }
}
 8000388:	bf00      	nop
 800038a:	3768      	adds	r7, #104	@ 0x68
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	58000400 	.word	0x58000400

08000394 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b094      	sub	sp, #80	@ 0x50
 8000398:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800039a:	463b      	mov	r3, r7
 800039c:	2250      	movs	r2, #80	@ 0x50
 800039e:	2100      	movs	r1, #0
 80003a0:	4618      	mov	r0, r3
 80003a2:	f008 ffc5 	bl	8009330 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80003a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003aa:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80003ac:	2300      	movs	r3, #0
 80003ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80003b0:	2310      	movs	r3, #16
 80003b2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80003b4:	463b      	mov	r3, r7
 80003b6:	4618      	mov	r0, r3
 80003b8:	f003 fcdb 	bl	8003d72 <HAL_RCCEx_PeriphCLKConfig>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80003c2:	f000 f82c 	bl	800041e <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80003c6:	bf00      	nop
 80003c8:	3750      	adds	r7, #80	@ 0x50
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}

080003ce <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ce:	b580      	push	{r7, lr}
 80003d0:	b086      	sub	sp, #24
 80003d2:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]
 80003e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e2:	2004      	movs	r0, #4
 80003e4:	f7ff ff1c 	bl	8000220 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e8:	2001      	movs	r0, #1
 80003ea:	f7ff ff19 	bl	8000220 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Debug_LED_GPIO_Port, Debug_LED_Pin, GPIO_PIN_RESET);
 80003ee:	2200      	movs	r2, #0
 80003f0:	2180      	movs	r1, #128	@ 0x80
 80003f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003f6:	f000 fc45 	bl	8000c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Debug_LED_Pin */
  GPIO_InitStruct.Pin = Debug_LED_Pin;
 80003fa:	2380      	movs	r3, #128	@ 0x80
 80003fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fe:	2301      	movs	r3, #1
 8000400:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000402:	2300      	movs	r3, #0
 8000404:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000406:	2300      	movs	r3, #0
 8000408:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Debug_LED_GPIO_Port, &GPIO_InitStruct);
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	4619      	mov	r1, r3
 800040e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000412:	f000 fac7 	bl	80009a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000416:	bf00      	nop
 8000418:	3718      	adds	r7, #24
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}

0800041e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800041e:	b480      	push	{r7}
 8000420:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000422:	b672      	cpsid	i
}
 8000424:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000426:	bf00      	nop
 8000428:	e7fd      	b.n	8000426 <Error_Handler+0x8>

0800042a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800042a:	b480      	push	{r7}
 800042c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800042e:	bf00      	nop
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr

08000438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800043c:	bf00      	nop
 800043e:	e7fd      	b.n	800043c <NMI_Handler+0x4>

08000440 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000444:	bf00      	nop
 8000446:	e7fd      	b.n	8000444 <HardFault_Handler+0x4>

08000448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800044c:	bf00      	nop
 800044e:	e7fd      	b.n	800044c <MemManage_Handler+0x4>

08000450 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000454:	bf00      	nop
 8000456:	e7fd      	b.n	8000454 <BusFault_Handler+0x4>

08000458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800045c:	bf00      	nop
 800045e:	e7fd      	b.n	800045c <UsageFault_Handler+0x4>

08000460 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr

0800046e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800046e:	b480      	push	{r7}
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr

0800047c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr

0800048a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800048a:	b580      	push	{r7, lr}
 800048c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800048e:	f000 f929 	bl	80006e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
	...

08000498 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800049c:	4802      	ldr	r0, [pc, #8]	@ (80004a8 <USB_LP_IRQHandler+0x10>)
 800049e:	f000 fd13 	bl	8000ec8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	2000165c 	.word	0x2000165c

080004ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b086      	sub	sp, #24
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004b4:	4a14      	ldr	r2, [pc, #80]	@ (8000508 <_sbrk+0x5c>)
 80004b6:	4b15      	ldr	r3, [pc, #84]	@ (800050c <_sbrk+0x60>)
 80004b8:	1ad3      	subs	r3, r2, r3
 80004ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004bc:	697b      	ldr	r3, [r7, #20]
 80004be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004c0:	4b13      	ldr	r3, [pc, #76]	@ (8000510 <_sbrk+0x64>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d102      	bne.n	80004ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004c8:	4b11      	ldr	r3, [pc, #68]	@ (8000510 <_sbrk+0x64>)
 80004ca:	4a12      	ldr	r2, [pc, #72]	@ (8000514 <_sbrk+0x68>)
 80004cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004ce:	4b10      	ldr	r3, [pc, #64]	@ (8000510 <_sbrk+0x64>)
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4413      	add	r3, r2
 80004d6:	693a      	ldr	r2, [r7, #16]
 80004d8:	429a      	cmp	r2, r3
 80004da:	d207      	bcs.n	80004ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004dc:	f008 ff30 	bl	8009340 <__errno>
 80004e0:	4603      	mov	r3, r0
 80004e2:	220c      	movs	r2, #12
 80004e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004ea:	e009      	b.n	8000500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004ec:	4b08      	ldr	r3, [pc, #32]	@ (8000510 <_sbrk+0x64>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004f2:	4b07      	ldr	r3, [pc, #28]	@ (8000510 <_sbrk+0x64>)
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4413      	add	r3, r2
 80004fa:	4a05      	ldr	r2, [pc, #20]	@ (8000510 <_sbrk+0x64>)
 80004fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004fe:	68fb      	ldr	r3, [r7, #12]
}
 8000500:	4618      	mov	r0, r3
 8000502:	3718      	adds	r7, #24
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20030000 	.word	0x20030000
 800050c:	00000400 	.word	0x00000400
 8000510:	20000174 	.word	0x20000174
 8000514:	20001ca0 	.word	0x20001ca0

08000518 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800051c:	4b24      	ldr	r3, [pc, #144]	@ (80005b0 <SystemInit+0x98>)
 800051e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000522:	4a23      	ldr	r2, [pc, #140]	@ (80005b0 <SystemInit+0x98>)
 8000524:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000528:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800052c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000536:	f043 0301 	orr.w	r3, r3, #1
 800053a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800053c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000540:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000544:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000550:	4b18      	ldr	r3, [pc, #96]	@ (80005b4 <SystemInit+0x9c>)
 8000552:	4013      	ands	r3, r2
 8000554:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000556:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800055a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800055e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000562:	f023 0305 	bic.w	r3, r3, #5
 8000566:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800056a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800056e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000572:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000576:	f023 0301 	bic.w	r3, r3, #1
 800057a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800057e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000582:	4a0d      	ldr	r2, [pc, #52]	@ (80005b8 <SystemInit+0xa0>)
 8000584:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000586:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800058a:	4a0b      	ldr	r2, [pc, #44]	@ (80005b8 <SystemInit+0xa0>)
 800058c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800058e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000598:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800059c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800059e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005a2:	2200      	movs	r2, #0
 80005a4:	619a      	str	r2, [r3, #24]
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	e000ed00 	.word	0xe000ed00
 80005b4:	faf6fefb 	.word	0xfaf6fefb
 80005b8:	22041000 	.word	0x22041000

080005bc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80005bc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005be:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c0:	3304      	adds	r3, #4

080005c2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80005c6:	d3f9      	bcc.n	80005bc <CopyDataInit>
  bx lr
 80005c8:	4770      	bx	lr

080005ca <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80005ca:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80005cc:	3004      	adds	r0, #4

080005ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80005ce:	4288      	cmp	r0, r1
  bcc FillZerobss
 80005d0:	d3fb      	bcc.n	80005ca <FillZerobss>
  bx lr
 80005d2:	4770      	bx	lr

080005d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005d4:	480c      	ldr	r0, [pc, #48]	@ (8000608 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005d8:	f7ff ff9e 	bl	8000518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80005dc:	480b      	ldr	r0, [pc, #44]	@ (800060c <LoopForever+0x6>)
 80005de:	490c      	ldr	r1, [pc, #48]	@ (8000610 <LoopForever+0xa>)
 80005e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000614 <LoopForever+0xe>)
 80005e2:	2300      	movs	r3, #0
 80005e4:	f7ff ffed 	bl	80005c2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80005e8:	480b      	ldr	r0, [pc, #44]	@ (8000618 <LoopForever+0x12>)
 80005ea:	490c      	ldr	r1, [pc, #48]	@ (800061c <LoopForever+0x16>)
 80005ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000620 <LoopForever+0x1a>)
 80005ee:	2300      	movs	r3, #0
 80005f0:	f7ff ffe7 	bl	80005c2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80005f4:	480b      	ldr	r0, [pc, #44]	@ (8000624 <LoopForever+0x1e>)
 80005f6:	490c      	ldr	r1, [pc, #48]	@ (8000628 <LoopForever+0x22>)
 80005f8:	2300      	movs	r3, #0
 80005fa:	f7ff ffe8 	bl	80005ce <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005fe:	f008 fea5 	bl	800934c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000602:	f7ff fe27 	bl	8000254 <main>

08000606 <LoopForever>:

LoopForever:
  b LoopForever
 8000606:	e7fe      	b.n	8000606 <LoopForever>
  ldr   r0, =_estack
 8000608:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800060c:	20000008 	.word	0x20000008
 8000610:	20000158 	.word	0x20000158
 8000614:	08009d94 	.word	0x08009d94
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000618:	20030000 	.word	0x20030000
 800061c:	20030000 	.word	0x20030000
 8000620:	08009ee4 	.word	0x08009ee4
  INIT_BSS _sbss, _ebss
 8000624:	20000158 	.word	0x20000158
 8000628:	20001ca0 	.word	0x20001ca0

0800062c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800062c:	e7fe      	b.n	800062c <ADC1_IRQHandler>
	...

08000630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000636:	2300      	movs	r3, #0
 8000638:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800063a:	4b0c      	ldr	r3, [pc, #48]	@ (800066c <HAL_Init+0x3c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a0b      	ldr	r2, [pc, #44]	@ (800066c <HAL_Init+0x3c>)
 8000640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000644:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000646:	2003      	movs	r0, #3
 8000648:	f000 f96c 	bl	8000924 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800064c:	200f      	movs	r0, #15
 800064e:	f000 f80f 	bl	8000670 <HAL_InitTick>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d002      	beq.n	800065e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000658:	2301      	movs	r3, #1
 800065a:	71fb      	strb	r3, [r7, #7]
 800065c:	e001      	b.n	8000662 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800065e:	f7ff fee4 	bl	800042a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000662:	79fb      	ldrb	r3, [r7, #7]
}
 8000664:	4618      	mov	r0, r3
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	58004000 	.word	0x58004000

08000670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000678:	2300      	movs	r3, #0
 800067a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800067c:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <HAL_InitTick+0x6c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d024      	beq.n	80006ce <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000684:	f003 f910 	bl	80038a8 <HAL_RCC_GetHCLKFreq>
 8000688:	4602      	mov	r2, r0
 800068a:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <HAL_InitTick+0x6c>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	4619      	mov	r1, r3
 8000690:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000694:	fbb3 f3f1 	udiv	r3, r3, r1
 8000698:	fbb2 f3f3 	udiv	r3, r2, r3
 800069c:	4618      	mov	r0, r3
 800069e:	f000 f974 	bl	800098a <HAL_SYSTICK_Config>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d10f      	bne.n	80006c8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2b0f      	cmp	r3, #15
 80006ac:	d809      	bhi.n	80006c2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006ae:	2200      	movs	r2, #0
 80006b0:	6879      	ldr	r1, [r7, #4]
 80006b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80006b6:	f000 f940 	bl	800093a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006ba:	4a09      	ldr	r2, [pc, #36]	@ (80006e0 <HAL_InitTick+0x70>)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	6013      	str	r3, [r2, #0]
 80006c0:	e007      	b.n	80006d2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80006c2:	2301      	movs	r3, #1
 80006c4:	73fb      	strb	r3, [r7, #15]
 80006c6:	e004      	b.n	80006d2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006c8:	2301      	movs	r3, #1
 80006ca:	73fb      	strb	r3, [r7, #15]
 80006cc:	e001      	b.n	80006d2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006ce:	2301      	movs	r3, #1
 80006d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000010 	.word	0x20000010
 80006e0:	2000000c 	.word	0x2000000c

080006e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006e8:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <HAL_IncTick+0x20>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	461a      	mov	r2, r3
 80006ee:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <HAL_IncTick+0x24>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4413      	add	r3, r2
 80006f4:	4a04      	ldr	r2, [pc, #16]	@ (8000708 <HAL_IncTick+0x24>)
 80006f6:	6013      	str	r3, [r2, #0]
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	20000010 	.word	0x20000010
 8000708:	20000178 	.word	0x20000178

0800070c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  return uwTick;
 8000710:	4b03      	ldr	r3, [pc, #12]	@ (8000720 <HAL_GetTick+0x14>)
 8000712:	681b      	ldr	r3, [r3, #0]
}
 8000714:	4618      	mov	r0, r3
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	20000178 	.word	0x20000178

08000724 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000728:	4b03      	ldr	r3, [pc, #12]	@ (8000738 <HAL_GetTickPrio+0x14>)
 800072a:	681b      	ldr	r3, [r3, #0]
}
 800072c:	4618      	mov	r0, r3
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	2000000c 	.word	0x2000000c

0800073c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000744:	f7ff ffe2 	bl	800070c <HAL_GetTick>
 8000748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000754:	d005      	beq.n	8000762 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000756:	4b0a      	ldr	r3, [pc, #40]	@ (8000780 <HAL_Delay+0x44>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	461a      	mov	r2, r3
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	4413      	add	r3, r2
 8000760:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000762:	bf00      	nop
 8000764:	f7ff ffd2 	bl	800070c <HAL_GetTick>
 8000768:	4602      	mov	r2, r0
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	1ad3      	subs	r3, r2, r3
 800076e:	68fa      	ldr	r2, [r7, #12]
 8000770:	429a      	cmp	r2, r3
 8000772:	d8f7      	bhi.n	8000764 <HAL_Delay+0x28>
  {
  }
}
 8000774:	bf00      	nop
 8000776:	bf00      	nop
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000010 	.word	0x20000010

08000784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f003 0307 	and.w	r3, r3, #7
 8000792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000794:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800079a:	68ba      	ldr	r2, [r7, #8]
 800079c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007a0:	4013      	ands	r3, r2
 80007a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007b6:	4a04      	ldr	r2, [pc, #16]	@ (80007c8 <__NVIC_SetPriorityGrouping+0x44>)
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	60d3      	str	r3, [r2, #12]
}
 80007bc:	bf00      	nop
 80007be:	3714      	adds	r7, #20
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007d0:	4b04      	ldr	r3, [pc, #16]	@ (80007e4 <__NVIC_GetPriorityGrouping+0x18>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	0a1b      	lsrs	r3, r3, #8
 80007d6:	f003 0307 	and.w	r3, r3, #7
}
 80007da:	4618      	mov	r0, r3
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	db0b      	blt.n	8000812 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	f003 021f 	and.w	r2, r3, #31
 8000800:	4907      	ldr	r1, [pc, #28]	@ (8000820 <__NVIC_EnableIRQ+0x38>)
 8000802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000806:	095b      	lsrs	r3, r3, #5
 8000808:	2001      	movs	r0, #1
 800080a:	fa00 f202 	lsl.w	r2, r0, r2
 800080e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	e000e100 	.word	0xe000e100

08000824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	6039      	str	r1, [r7, #0]
 800082e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000834:	2b00      	cmp	r3, #0
 8000836:	db0a      	blt.n	800084e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	b2da      	uxtb	r2, r3
 800083c:	490c      	ldr	r1, [pc, #48]	@ (8000870 <__NVIC_SetPriority+0x4c>)
 800083e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000842:	0112      	lsls	r2, r2, #4
 8000844:	b2d2      	uxtb	r2, r2
 8000846:	440b      	add	r3, r1
 8000848:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800084c:	e00a      	b.n	8000864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4908      	ldr	r1, [pc, #32]	@ (8000874 <__NVIC_SetPriority+0x50>)
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	f003 030f 	and.w	r3, r3, #15
 800085a:	3b04      	subs	r3, #4
 800085c:	0112      	lsls	r2, r2, #4
 800085e:	b2d2      	uxtb	r2, r2
 8000860:	440b      	add	r3, r1
 8000862:	761a      	strb	r2, [r3, #24]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	e000e100 	.word	0xe000e100
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000878:	b480      	push	{r7}
 800087a:	b089      	sub	sp, #36	@ 0x24
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	f003 0307 	and.w	r3, r3, #7
 800088a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	f1c3 0307 	rsb	r3, r3, #7
 8000892:	2b04      	cmp	r3, #4
 8000894:	bf28      	it	cs
 8000896:	2304      	movcs	r3, #4
 8000898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	3304      	adds	r3, #4
 800089e:	2b06      	cmp	r3, #6
 80008a0:	d902      	bls.n	80008a8 <NVIC_EncodePriority+0x30>
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	3b03      	subs	r3, #3
 80008a6:	e000      	b.n	80008aa <NVIC_EncodePriority+0x32>
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80008b0:	69bb      	ldr	r3, [r7, #24]
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	43da      	mvns	r2, r3
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	401a      	ands	r2, r3
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ca:	43d9      	mvns	r1, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d0:	4313      	orrs	r3, r2
         );
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3724      	adds	r7, #36	@ 0x24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
	...

080008e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008f0:	d301      	bcc.n	80008f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008f2:	2301      	movs	r3, #1
 80008f4:	e00f      	b.n	8000916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000920 <SysTick_Config+0x40>)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008fe:	210f      	movs	r1, #15
 8000900:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000904:	f7ff ff8e 	bl	8000824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000908:	4b05      	ldr	r3, [pc, #20]	@ (8000920 <SysTick_Config+0x40>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800090e:	4b04      	ldr	r3, [pc, #16]	@ (8000920 <SysTick_Config+0x40>)
 8000910:	2207      	movs	r2, #7
 8000912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	e000e010 	.word	0xe000e010

08000924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff ff29 	bl	8000784 <__NVIC_SetPriorityGrouping>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b086      	sub	sp, #24
 800093e:	af00      	add	r7, sp, #0
 8000940:	4603      	mov	r3, r0
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
 8000946:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000948:	f7ff ff40 	bl	80007cc <__NVIC_GetPriorityGrouping>
 800094c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	68b9      	ldr	r1, [r7, #8]
 8000952:	6978      	ldr	r0, [r7, #20]
 8000954:	f7ff ff90 	bl	8000878 <NVIC_EncodePriority>
 8000958:	4602      	mov	r2, r0
 800095a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800095e:	4611      	mov	r1, r2
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff ff5f 	bl	8000824 <__NVIC_SetPriority>
}
 8000966:	bf00      	nop
 8000968:	3718      	adds	r7, #24
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b082      	sub	sp, #8
 8000972:	af00      	add	r7, sp, #0
 8000974:	4603      	mov	r3, r0
 8000976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff ff33 	bl	80007e8 <__NVIC_EnableIRQ>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b082      	sub	sp, #8
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f7ff ffa4 	bl	80008e0 <SysTick_Config>
 8000998:	4603      	mov	r3, r0
}
 800099a:	4618      	mov	r0, r3
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b087      	sub	sp, #28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009b2:	e14c      	b.n	8000c4e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	2101      	movs	r1, #1
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	fa01 f303 	lsl.w	r3, r1, r3
 80009c0:	4013      	ands	r3, r2
 80009c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	f000 813e 	beq.w	8000c48 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f003 0303 	and.w	r3, r3, #3
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d005      	beq.n	80009e4 <HAL_GPIO_Init+0x40>
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	f003 0303 	and.w	r3, r3, #3
 80009e0:	2b02      	cmp	r3, #2
 80009e2:	d130      	bne.n	8000a46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	2203      	movs	r2, #3
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	43db      	mvns	r3, r3
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	4013      	ands	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	68da      	ldr	r2, [r3, #12]
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	43db      	mvns	r3, r3
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	4013      	ands	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	091b      	lsrs	r3, r3, #4
 8000a30:	f003 0201 	and.w	r2, r3, #1
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f003 0303 	and.w	r3, r3, #3
 8000a4e:	2b03      	cmp	r3, #3
 8000a50:	d017      	beq.n	8000a82 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	43db      	mvns	r3, r3
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	4013      	ands	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	689a      	ldr	r2, [r3, #8]
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f003 0303 	and.w	r3, r3, #3
 8000a8a:	2b02      	cmp	r3, #2
 8000a8c:	d123      	bne.n	8000ad6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	08da      	lsrs	r2, r3, #3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	3208      	adds	r2, #8
 8000a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	220f      	movs	r2, #15
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	691a      	ldr	r2, [r3, #16]
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	f003 0307 	and.w	r3, r3, #7
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	08da      	lsrs	r2, r3, #3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3208      	adds	r2, #8
 8000ad0:	6939      	ldr	r1, [r7, #16]
 8000ad2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	2203      	movs	r2, #3
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	4013      	ands	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f003 0203 	and.w	r2, r3, #3
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	f000 8098 	beq.w	8000c48 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000b18:	4a54      	ldr	r2, [pc, #336]	@ (8000c6c <HAL_GPIO_Init+0x2c8>)
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	089b      	lsrs	r3, r3, #2
 8000b1e:	3302      	adds	r3, #2
 8000b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	f003 0303 	and.w	r3, r3, #3
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	220f      	movs	r2, #15
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	43db      	mvns	r3, r3
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b42:	d019      	beq.n	8000b78 <HAL_GPIO_Init+0x1d4>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a4a      	ldr	r2, [pc, #296]	@ (8000c70 <HAL_GPIO_Init+0x2cc>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d013      	beq.n	8000b74 <HAL_GPIO_Init+0x1d0>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a49      	ldr	r2, [pc, #292]	@ (8000c74 <HAL_GPIO_Init+0x2d0>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d00d      	beq.n	8000b70 <HAL_GPIO_Init+0x1cc>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a48      	ldr	r2, [pc, #288]	@ (8000c78 <HAL_GPIO_Init+0x2d4>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d007      	beq.n	8000b6c <HAL_GPIO_Init+0x1c8>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a47      	ldr	r2, [pc, #284]	@ (8000c7c <HAL_GPIO_Init+0x2d8>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d101      	bne.n	8000b68 <HAL_GPIO_Init+0x1c4>
 8000b64:	2304      	movs	r3, #4
 8000b66:	e008      	b.n	8000b7a <HAL_GPIO_Init+0x1d6>
 8000b68:	2307      	movs	r3, #7
 8000b6a:	e006      	b.n	8000b7a <HAL_GPIO_Init+0x1d6>
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	e004      	b.n	8000b7a <HAL_GPIO_Init+0x1d6>
 8000b70:	2302      	movs	r3, #2
 8000b72:	e002      	b.n	8000b7a <HAL_GPIO_Init+0x1d6>
 8000b74:	2301      	movs	r3, #1
 8000b76:	e000      	b.n	8000b7a <HAL_GPIO_Init+0x1d6>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	697a      	ldr	r2, [r7, #20]
 8000b7c:	f002 0203 	and.w	r2, r2, #3
 8000b80:	0092      	lsls	r2, r2, #2
 8000b82:	4093      	lsls	r3, r2
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b8a:	4938      	ldr	r1, [pc, #224]	@ (8000c6c <HAL_GPIO_Init+0x2c8>)
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	089b      	lsrs	r3, r3, #2
 8000b90:	3302      	adds	r3, #2
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b98:	4b39      	ldr	r3, [pc, #228]	@ (8000c80 <HAL_GPIO_Init+0x2dc>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d003      	beq.n	8000bbc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000bbc:	4a30      	ldr	r2, [pc, #192]	@ (8000c80 <HAL_GPIO_Init+0x2dc>)
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	@ (8000c80 <HAL_GPIO_Init+0x2dc>)
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d003      	beq.n	8000be6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000be6:	4a26      	ldr	r2, [pc, #152]	@ (8000c80 <HAL_GPIO_Init+0x2dc>)
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000bec:	4b24      	ldr	r3, [pc, #144]	@ (8000c80 <HAL_GPIO_Init+0x2dc>)
 8000bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d003      	beq.n	8000c12 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c12:	4a1b      	ldr	r2, [pc, #108]	@ (8000c80 <HAL_GPIO_Init+0x2dc>)
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8000c1a:	4b19      	ldr	r3, [pc, #100]	@ (8000c80 <HAL_GPIO_Init+0x2dc>)
 8000c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	43db      	mvns	r3, r3
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d003      	beq.n	8000c40 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c40:	4a0f      	ldr	r2, [pc, #60]	@ (8000c80 <HAL_GPIO_Init+0x2dc>)
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	fa22 f303 	lsr.w	r3, r2, r3
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	f47f aeab 	bne.w	80009b4 <HAL_GPIO_Init+0x10>
  }
}
 8000c5e:	bf00      	nop
 8000c60:	bf00      	nop
 8000c62:	371c      	adds	r7, #28
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	40010000 	.word	0x40010000
 8000c70:	48000400 	.word	0x48000400
 8000c74:	48000800 	.word	0x48000800
 8000c78:	48000c00 	.word	0x48000c00
 8000c7c:	48001000 	.word	0x48001000
 8000c80:	58000800 	.word	0x58000800

08000c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	807b      	strh	r3, [r7, #2]
 8000c90:	4613      	mov	r3, r2
 8000c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c94:	787b      	ldrb	r3, [r7, #1]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d003      	beq.n	8000ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c9a:	887a      	ldrh	r2, [r7, #2]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ca0:	e002      	b.n	8000ca8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ca2:	887a      	ldrh	r2, [r7, #2]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	695b      	ldr	r3, [r3, #20]
 8000cc4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000cc6:	887a      	ldrh	r2, [r7, #2]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	041a      	lsls	r2, r3, #16
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	43d9      	mvns	r1, r3
 8000cd2:	887b      	ldrh	r3, [r7, #2]
 8000cd4:	400b      	ands	r3, r1
 8000cd6:	431a      	orrs	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	619a      	str	r2, [r3, #24]
}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d101      	bne.n	8000cfa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e0c0      	b.n	8000e7c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d106      	bne.n	8000d14 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f007 ffc6 	bl	8008ca0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2203      	movs	r2, #3
 8000d18:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f003 fac4 	bl	80042ae <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	73fb      	strb	r3, [r7, #15]
 8000d2a:	e03e      	b.n	8000daa <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000d2c:	7bfa      	ldrb	r2, [r7, #15]
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	4613      	mov	r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4413      	add	r3, r2
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	440b      	add	r3, r1
 8000d3a:	3311      	adds	r3, #17
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000d40:	7bfa      	ldrb	r2, [r7, #15]
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	4613      	mov	r3, r2
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	4413      	add	r3, r2
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	440b      	add	r3, r1
 8000d4e:	3310      	adds	r3, #16
 8000d50:	7bfa      	ldrb	r2, [r7, #15]
 8000d52:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d54:	7bfa      	ldrb	r2, [r7, #15]
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	4413      	add	r3, r2
 8000d5e:	00db      	lsls	r3, r3, #3
 8000d60:	440b      	add	r3, r1
 8000d62:	3313      	adds	r3, #19
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d68:	7bfa      	ldrb	r2, [r7, #15]
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4413      	add	r3, r2
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	440b      	add	r3, r1
 8000d76:	3320      	adds	r3, #32
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d7c:	7bfa      	ldrb	r2, [r7, #15]
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	4613      	mov	r3, r2
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	4413      	add	r3, r2
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	440b      	add	r3, r1
 8000d8a:	3324      	adds	r3, #36	@ 0x24
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	1c5a      	adds	r2, r3, #1
 8000d96:	4613      	mov	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	440b      	add	r3, r1
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	3301      	adds	r3, #1
 8000da8:	73fb      	strb	r3, [r7, #15]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	791b      	ldrb	r3, [r3, #4]
 8000dae:	7bfa      	ldrb	r2, [r7, #15]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d3bb      	bcc.n	8000d2c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000db4:	2300      	movs	r3, #0
 8000db6:	73fb      	strb	r3, [r7, #15]
 8000db8:	e044      	b.n	8000e44 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000dba:	7bfa      	ldrb	r2, [r7, #15]
 8000dbc:	6879      	ldr	r1, [r7, #4]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4413      	add	r3, r2
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	440b      	add	r3, r1
 8000dc8:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000dd0:	7bfa      	ldrb	r2, [r7, #15]
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	4413      	add	r3, r2
 8000dda:	00db      	lsls	r3, r3, #3
 8000ddc:	440b      	add	r3, r1
 8000dde:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000de2:	7bfa      	ldrb	r2, [r7, #15]
 8000de4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000de6:	7bfa      	ldrb	r2, [r7, #15]
 8000de8:	6879      	ldr	r1, [r7, #4]
 8000dea:	4613      	mov	r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	4413      	add	r3, r2
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	440b      	add	r3, r1
 8000df4:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000dfc:	7bfa      	ldrb	r2, [r7, #15]
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	4613      	mov	r3, r2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4413      	add	r3, r2
 8000e06:	00db      	lsls	r3, r3, #3
 8000e08:	440b      	add	r3, r1
 8000e0a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000e12:	7bfa      	ldrb	r2, [r7, #15]
 8000e14:	6879      	ldr	r1, [r7, #4]
 8000e16:	4613      	mov	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	4413      	add	r3, r2
 8000e1c:	00db      	lsls	r3, r3, #3
 8000e1e:	440b      	add	r3, r1
 8000e20:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000e28:	7bfa      	ldrb	r2, [r7, #15]
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4413      	add	r3, r2
 8000e32:	00db      	lsls	r3, r3, #3
 8000e34:	440b      	add	r3, r1
 8000e36:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	3301      	adds	r3, #1
 8000e42:	73fb      	strb	r3, [r7, #15]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	791b      	ldrb	r3, [r3, #4]
 8000e48:	7bfa      	ldrb	r2, [r7, #15]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d3b5      	bcc.n	8000dba <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6818      	ldr	r0, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3304      	adds	r3, #4
 8000e56:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000e5a:	f003 fa43 	bl	80042e4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2201      	movs	r2, #1
 8000e68:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	7a9b      	ldrb	r3, [r3, #10]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d102      	bne.n	8000e7a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f001 fc40 	bl	80026fa <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000e7a:	2300      	movs	r3, #0
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d101      	bne.n	8000e9a <HAL_PCD_Start+0x16>
 8000e96:	2302      	movs	r3, #2
 8000e98:	e012      	b.n	8000ec0 <HAL_PCD_Start+0x3c>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f003 f9ea 	bl	8004280 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f005 fcaa 	bl	800680a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f005 fcaf 	bl	8006838 <USB_ReadInterrupts>
 8000eda:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f000 fb04 	bl	80014f4 <PCD_EP_ISR_Handler>

    return;
 8000eec:	e110      	b.n	8001110 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d013      	beq.n	8000f20 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000f0a:	b292      	uxth	r2, r2
 8000f0c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f007 ff78 	bl	8008e06 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000f16:	2100      	movs	r1, #0
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f000 f8fc 	bl	8001116 <HAL_PCD_SetAddress>

    return;
 8000f1e:	e0f7      	b.n	8001110 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d00c      	beq.n	8000f44 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000f3c:	b292      	uxth	r2, r2
 8000f3e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000f42:	e0e5      	b.n	8001110 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d00c      	beq.n	8000f68 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000f60:	b292      	uxth	r2, r2
 8000f62:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000f66:	e0d3      	b.n	8001110 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d034      	beq.n	8000fdc <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f022 0204 	bic.w	r2, r2, #4
 8000f84:	b292      	uxth	r2, r2
 8000f86:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f022 0208 	bic.w	r2, r2, #8
 8000f9c:	b292      	uxth	r2, r2
 8000f9e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d107      	bne.n	8000fbc <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f008 f91a 	bl	80091f0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f007 ff5b 	bl	8008e78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000fd4:	b292      	uxth	r2, r2
 8000fd6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000fda:	e099      	b.n	8001110 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d027      	beq.n	8001036 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f042 0208 	orr.w	r2, r2, #8
 8000ff8:	b292      	uxth	r2, r2
 8000ffa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001006:	b29a      	uxth	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001010:	b292      	uxth	r2, r2
 8001012:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800101e:	b29a      	uxth	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f042 0204 	orr.w	r2, r2, #4
 8001028:	b292      	uxth	r2, r2
 800102a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f007 ff08 	bl	8008e44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001034:	e06c      	b.n	8001110 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800103c:	2b00      	cmp	r3, #0
 800103e:	d040      	beq.n	80010c2 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001048:	b29a      	uxth	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001052:	b292      	uxth	r2, r2
 8001054:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800105e:	2b00      	cmp	r3, #0
 8001060:	d12b      	bne.n	80010ba <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800106a:	b29a      	uxth	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f042 0204 	orr.w	r2, r2, #4
 8001074:	b292      	uxth	r2, r2
 8001076:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001082:	b29a      	uxth	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f042 0208 	orr.w	r2, r2, #8
 800108c:	b292      	uxth	r2, r2
 800108e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2201      	movs	r2, #1
 8001096:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	089b      	lsrs	r3, r3, #2
 80010a6:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80010b0:	2101      	movs	r1, #1
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f008 f89c 	bl	80091f0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80010b8:	e02a      	b.n	8001110 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f007 fec2 	bl	8008e44 <HAL_PCD_SuspendCallback>
    return;
 80010c0:	e026      	b.n	8001110 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d00f      	beq.n	80010ec <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80010de:	b292      	uxth	r2, r2
 80010e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f007 fe80 	bl	8008dea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80010ea:	e011      	b.n	8001110 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d00c      	beq.n	8001110 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80010fe:	b29a      	uxth	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001108:	b292      	uxth	r2, r2
 800110a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800110e:	bf00      	nop
  }
}
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	460b      	mov	r3, r1
 8001120:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001128:	2b01      	cmp	r3, #1
 800112a:	d101      	bne.n	8001130 <HAL_PCD_SetAddress+0x1a>
 800112c:	2302      	movs	r3, #2
 800112e:	e012      	b.n	8001156 <HAL_PCD_SetAddress+0x40>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2201      	movs	r2, #1
 8001134:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	78fa      	ldrb	r2, [r7, #3]
 800113c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	78fa      	ldrb	r2, [r7, #3]
 8001144:	4611      	mov	r1, r2
 8001146:	4618      	mov	r0, r3
 8001148:	f005 fb4b 	bl	80067e2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b084      	sub	sp, #16
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	4608      	mov	r0, r1
 8001168:	4611      	mov	r1, r2
 800116a:	461a      	mov	r2, r3
 800116c:	4603      	mov	r3, r0
 800116e:	70fb      	strb	r3, [r7, #3]
 8001170:	460b      	mov	r3, r1
 8001172:	803b      	strh	r3, [r7, #0]
 8001174:	4613      	mov	r3, r2
 8001176:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001178:	2300      	movs	r3, #0
 800117a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800117c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001180:	2b00      	cmp	r3, #0
 8001182:	da0e      	bge.n	80011a2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001184:	78fb      	ldrb	r3, [r7, #3]
 8001186:	f003 0207 	and.w	r2, r3, #7
 800118a:	4613      	mov	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	3310      	adds	r3, #16
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	4413      	add	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2201      	movs	r2, #1
 800119e:	705a      	strb	r2, [r3, #1]
 80011a0:	e00e      	b.n	80011c0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011a2:	78fb      	ldrb	r3, [r7, #3]
 80011a4:	f003 0207 	and.w	r2, r3, #7
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	4413      	add	r3, r2
 80011b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2200      	movs	r2, #0
 80011be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80011c0:	78fb      	ldrb	r3, [r7, #3]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80011cc:	883a      	ldrh	r2, [r7, #0]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	78ba      	ldrb	r2, [r7, #2]
 80011d6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80011d8:	78bb      	ldrb	r3, [r7, #2]
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d102      	bne.n	80011e4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2200      	movs	r2, #0
 80011e2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d101      	bne.n	80011f2 <HAL_PCD_EP_Open+0x94>
 80011ee:	2302      	movs	r3, #2
 80011f0:	e00e      	b.n	8001210 <HAL_PCD_EP_Open+0xb2>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2201      	movs	r2, #1
 80011f6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	68f9      	ldr	r1, [r7, #12]
 8001200:	4618      	mov	r0, r3
 8001202:	f003 f88d 	bl	8004320 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800120e:	7afb      	ldrb	r3, [r7, #11]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001224:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001228:	2b00      	cmp	r3, #0
 800122a:	da0e      	bge.n	800124a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800122c:	78fb      	ldrb	r3, [r7, #3]
 800122e:	f003 0207 	and.w	r2, r3, #7
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	3310      	adds	r3, #16
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	4413      	add	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2201      	movs	r2, #1
 8001246:	705a      	strb	r2, [r3, #1]
 8001248:	e00e      	b.n	8001268 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800124a:	78fb      	ldrb	r3, [r7, #3]
 800124c:	f003 0207 	and.w	r2, r3, #7
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	4413      	add	r3, r2
 8001260:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2200      	movs	r2, #0
 8001266:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001268:	78fb      	ldrb	r3, [r7, #3]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	b2da      	uxtb	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800127a:	2b01      	cmp	r3, #1
 800127c:	d101      	bne.n	8001282 <HAL_PCD_EP_Close+0x6a>
 800127e:	2302      	movs	r3, #2
 8001280:	e00e      	b.n	80012a0 <HAL_PCD_EP_Close+0x88>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2201      	movs	r2, #1
 8001286:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	68f9      	ldr	r1, [r7, #12]
 8001290:	4618      	mov	r0, r3
 8001292:	f003 fc09 	bl	8004aa8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	607a      	str	r2, [r7, #4]
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	460b      	mov	r3, r1
 80012b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012b8:	7afb      	ldrb	r3, [r7, #11]
 80012ba:	f003 0207 	and.w	r2, r3, #7
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	4413      	add	r3, r2
 80012ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	2200      	movs	r2, #0
 80012e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012e8:	7afb      	ldrb	r3, [r7, #11]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6979      	ldr	r1, [r7, #20]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f003 fdc1 	bl	8004e82 <USB_EPStartXfer>

  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	460b      	mov	r3, r1
 8001314:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001316:	78fb      	ldrb	r3, [r7, #3]
 8001318:	f003 0207 	and.w	r2, r3, #7
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	440b      	add	r3, r1
 8001328:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800132c:	681b      	ldr	r3, [r3, #0]
}
 800132e:	4618      	mov	r0, r3
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b086      	sub	sp, #24
 800133e:	af00      	add	r7, sp, #0
 8001340:	60f8      	str	r0, [r7, #12]
 8001342:	607a      	str	r2, [r7, #4]
 8001344:	603b      	str	r3, [r7, #0]
 8001346:	460b      	mov	r3, r1
 8001348:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800134a:	7afb      	ldrb	r3, [r7, #11]
 800134c:	f003 0207 	and.w	r2, r3, #7
 8001350:	4613      	mov	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	3310      	adds	r3, #16
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	4413      	add	r3, r2
 800135e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	2200      	movs	r2, #0
 800137e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	2201      	movs	r2, #1
 8001384:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001386:	7afb      	ldrb	r3, [r7, #11]
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	b2da      	uxtb	r2, r3
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6979      	ldr	r1, [r7, #20]
 8001398:	4618      	mov	r0, r3
 800139a:	f003 fd72 	bl	8004e82 <USB_EPStartXfer>

  return HAL_OK;
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	460b      	mov	r3, r1
 80013b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80013b4:	78fb      	ldrb	r3, [r7, #3]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	7912      	ldrb	r2, [r2, #4]
 80013be:	4293      	cmp	r3, r2
 80013c0:	d901      	bls.n	80013c6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e03e      	b.n	8001444 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80013c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	da0e      	bge.n	80013ec <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013ce:	78fb      	ldrb	r3, [r7, #3]
 80013d0:	f003 0207 	and.w	r2, r3, #7
 80013d4:	4613      	mov	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	3310      	adds	r3, #16
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2201      	movs	r2, #1
 80013e8:	705a      	strb	r2, [r3, #1]
 80013ea:	e00c      	b.n	8001406 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80013ec:	78fa      	ldrb	r2, [r7, #3]
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2200      	movs	r2, #0
 8001404:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2201      	movs	r2, #1
 800140a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800140c:	78fb      	ldrb	r3, [r7, #3]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	b2da      	uxtb	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800141e:	2b01      	cmp	r3, #1
 8001420:	d101      	bne.n	8001426 <HAL_PCD_EP_SetStall+0x7e>
 8001422:	2302      	movs	r3, #2
 8001424:	e00e      	b.n	8001444 <HAL_PCD_EP_SetStall+0x9c>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2201      	movs	r2, #1
 800142a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68f9      	ldr	r1, [r7, #12]
 8001434:	4618      	mov	r0, r3
 8001436:	f005 f8d5 	bl	80065e4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001458:	78fb      	ldrb	r3, [r7, #3]
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	7912      	ldrb	r2, [r2, #4]
 8001462:	4293      	cmp	r3, r2
 8001464:	d901      	bls.n	800146a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e040      	b.n	80014ec <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800146a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800146e:	2b00      	cmp	r3, #0
 8001470:	da0e      	bge.n	8001490 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001472:	78fb      	ldrb	r3, [r7, #3]
 8001474:	f003 0207 	and.w	r2, r3, #7
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	3310      	adds	r3, #16
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2201      	movs	r2, #1
 800148c:	705a      	strb	r2, [r3, #1]
 800148e:	e00e      	b.n	80014ae <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001490:	78fb      	ldrb	r3, [r7, #3]
 8001492:	f003 0207 	and.w	r2, r3, #7
 8001496:	4613      	mov	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2200      	movs	r2, #0
 80014ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2200      	movs	r2, #0
 80014b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d101      	bne.n	80014ce <HAL_PCD_EP_ClrStall+0x82>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e00e      	b.n	80014ec <HAL_PCD_EP_ClrStall+0xa0>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2201      	movs	r2, #1
 80014d2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68f9      	ldr	r1, [r7, #12]
 80014dc:	4618      	mov	r0, r3
 80014de:	f005 f8d2 	bl	8006686 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b096      	sub	sp, #88	@ 0x58
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80014fc:	e3ad      	b.n	8001c5a <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001506:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800150a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800150e:	b2db      	uxtb	r3, r3
 8001510:	f003 030f 	and.w	r3, r3, #15
 8001514:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001518:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800151c:	2b00      	cmp	r3, #0
 800151e:	f040 816f 	bne.w	8001800 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001522:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001526:	f003 0310 	and.w	r3, r3, #16
 800152a:	2b00      	cmp	r3, #0
 800152c:	d14c      	bne.n	80015c8 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	b29b      	uxth	r3, r3
 8001536:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800153a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800153e:	81fb      	strh	r3, [r7, #14]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	89fb      	ldrh	r3, [r7, #14]
 8001546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800154a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800154e:	b29b      	uxth	r3, r3
 8001550:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3310      	adds	r3, #16
 8001556:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001560:	b29b      	uxth	r3, r3
 8001562:	461a      	mov	r2, r3
 8001564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	4413      	add	r3, r2
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	6812      	ldr	r2, [r2, #0]
 8001570:	4413      	add	r3, r2
 8001572:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800157c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800157e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001580:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001582:	695a      	ldr	r2, [r3, #20]
 8001584:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	441a      	add	r2, r3
 800158a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800158c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800158e:	2100      	movs	r1, #0
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f007 fc10 	bl	8008db6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	7b1b      	ldrb	r3, [r3, #12]
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 835c 	beq.w	8001c5a <PCD_EP_ISR_Handler+0x766>
 80015a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f040 8357 	bne.w	8001c5a <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	7b1b      	ldrb	r3, [r3, #12]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	731a      	strb	r2, [r3, #12]
 80015c6:	e348      	b.n	8001c5a <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80015ce:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80015da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80015de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d032      	beq.n	800164c <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	461a      	mov	r2, r3
 80015f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	4413      	add	r3, r2
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6812      	ldr	r2, [r2, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800160a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800160c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6818      	ldr	r0, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800161a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800161c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800161e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001620:	b29b      	uxth	r3, r3
 8001622:	f005 f95b 	bl	80068dc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	b29a      	uxth	r2, r3
 800162e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001632:	4013      	ands	r3, r2
 8001634:	823b      	strh	r3, [r7, #16]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	8a3a      	ldrh	r2, [r7, #16]
 800163c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001640:	b292      	uxth	r2, r2
 8001642:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f007 fb89 	bl	8008d5c <HAL_PCD_SetupStageCallback>
 800164a:	e306      	b.n	8001c5a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800164c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001650:	2b00      	cmp	r3, #0
 8001652:	f280 8302 	bge.w	8001c5a <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	b29a      	uxth	r2, r3
 800165e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001662:	4013      	ands	r3, r2
 8001664:	83fb      	strh	r3, [r7, #30]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	8bfa      	ldrh	r2, [r7, #30]
 800166c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001670:	b292      	uxth	r2, r2
 8001672:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800167c:	b29b      	uxth	r3, r3
 800167e:	461a      	mov	r2, r3
 8001680:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	4413      	add	r3, r2
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	4413      	add	r3, r2
 800168e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001698:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800169a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800169c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d019      	beq.n	80016d8 <PCD_EP_ISR_Handler+0x1e4>
 80016a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016a6:	695b      	ldr	r3, [r3, #20]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d015      	beq.n	80016d8 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6818      	ldr	r0, [r3, #0]
 80016b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016b2:	6959      	ldr	r1, [r3, #20]
 80016b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016b6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80016b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016ba:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80016bc:	b29b      	uxth	r3, r3
 80016be:	f005 f90d 	bl	80068dc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80016c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016c4:	695a      	ldr	r2, [r3, #20]
 80016c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	441a      	add	r2, r3
 80016cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016ce:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80016d0:	2100      	movs	r1, #0
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f007 fb54 	bl	8008d80 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80016e2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80016e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f040 82b5 	bne.w	8001c5a <PCD_EP_ISR_Handler+0x766>
 80016f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80016f4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80016f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80016fc:	f000 82ad 	beq.w	8001c5a <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	61bb      	str	r3, [r7, #24]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800170e:	b29b      	uxth	r3, r3
 8001710:	461a      	mov	r2, r3
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	4413      	add	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	b29b      	uxth	r3, r3
 8001726:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800172a:	b29a      	uxth	r2, r3
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	801a      	strh	r2, [r3, #0]
 8001730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	2b3e      	cmp	r3, #62	@ 0x3e
 8001736:	d91d      	bls.n	8001774 <PCD_EP_ISR_Handler+0x280>
 8001738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	095b      	lsrs	r3, r3, #5
 800173e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	f003 031f 	and.w	r3, r3, #31
 8001748:	2b00      	cmp	r3, #0
 800174a:	d102      	bne.n	8001752 <PCD_EP_ISR_Handler+0x25e>
 800174c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800174e:	3b01      	subs	r3, #1
 8001750:	647b      	str	r3, [r7, #68]	@ 0x44
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	b29a      	uxth	r2, r3
 8001758:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800175a:	b29b      	uxth	r3, r3
 800175c:	029b      	lsls	r3, r3, #10
 800175e:	b29b      	uxth	r3, r3
 8001760:	4313      	orrs	r3, r2
 8001762:	b29b      	uxth	r3, r3
 8001764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800176c:	b29a      	uxth	r2, r3
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	801a      	strh	r2, [r3, #0]
 8001772:	e026      	b.n	80017c2 <PCD_EP_ISR_Handler+0x2ce>
 8001774:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d10a      	bne.n	8001792 <PCD_EP_ISR_Handler+0x29e>
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	b29b      	uxth	r3, r3
 8001782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800178a:	b29a      	uxth	r2, r3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	801a      	strh	r2, [r3, #0]
 8001790:	e017      	b.n	80017c2 <PCD_EP_ISR_Handler+0x2ce>
 8001792:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	085b      	lsrs	r3, r3, #1
 8001798:	647b      	str	r3, [r7, #68]	@ 0x44
 800179a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d002      	beq.n	80017ac <PCD_EP_ISR_Handler+0x2b8>
 80017a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017a8:	3301      	adds	r3, #1
 80017aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	029b      	lsls	r3, r3, #10
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	4313      	orrs	r3, r2
 80017bc:	b29a      	uxth	r2, r3
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	881b      	ldrh	r3, [r3, #0]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80017ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80017d2:	827b      	strh	r3, [r7, #18]
 80017d4:	8a7b      	ldrh	r3, [r7, #18]
 80017d6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80017da:	827b      	strh	r3, [r7, #18]
 80017dc:	8a7b      	ldrh	r3, [r7, #18]
 80017de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80017e2:	827b      	strh	r3, [r7, #18]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	8a7b      	ldrh	r3, [r7, #18]
 80017ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80017ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80017f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	8013      	strh	r3, [r2, #0]
 80017fe:	e22c      	b.n	8001c5a <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001814:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001818:	2b00      	cmp	r3, #0
 800181a:	f280 80f6 	bge.w	8001a0a <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	b29a      	uxth	r2, r3
 8001830:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001834:	4013      	ands	r3, r2
 8001836:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800184c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001850:	b292      	uxth	r2, r2
 8001852:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001854:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	4413      	add	r3, r2
 8001868:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800186a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800186c:	7b1b      	ldrb	r3, [r3, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d123      	bne.n	80018ba <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800187a:	b29b      	uxth	r3, r3
 800187c:	461a      	mov	r2, r3
 800187e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	4413      	add	r3, r2
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6812      	ldr	r2, [r2, #0]
 800188a:	4413      	add	r3, r2
 800188c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001896:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800189a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 808e 	beq.w	80019c0 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6818      	ldr	r0, [r3, #0]
 80018a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018aa:	6959      	ldr	r1, [r3, #20]
 80018ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018ae:	88da      	ldrh	r2, [r3, #6]
 80018b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80018b4:	f005 f812 	bl	80068dc <USB_ReadPMA>
 80018b8:	e082      	b.n	80019c0 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80018ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018bc:	78db      	ldrb	r3, [r3, #3]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d10a      	bne.n	80018d8 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80018c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80018c6:	461a      	mov	r2, r3
 80018c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f9d3 	bl	8001c76 <HAL_PCD_EP_DB_Receive>
 80018d0:	4603      	mov	r3, r0
 80018d2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80018d6:	e073      	b.n	80019c0 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80018ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80018f2:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	441a      	add	r2, r3
 8001904:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001908:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800190c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001910:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001914:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001918:	b29b      	uxth	r3, r3
 800191a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	461a      	mov	r2, r3
 8001922:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	b29b      	uxth	r3, r3
 800192e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d022      	beq.n	800197c <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800193e:	b29b      	uxth	r3, r3
 8001940:	461a      	mov	r2, r3
 8001942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	4413      	add	r3, r2
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	4413      	add	r3, r2
 8001950:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800195a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800195e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001962:	2b00      	cmp	r3, #0
 8001964:	d02c      	beq.n	80019c0 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6818      	ldr	r0, [r3, #0]
 800196a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800196c:	6959      	ldr	r1, [r3, #20]
 800196e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001970:	891a      	ldrh	r2, [r3, #8]
 8001972:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001976:	f004 ffb1 	bl	80068dc <USB_ReadPMA>
 800197a:	e021      	b.n	80019c0 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001984:	b29b      	uxth	r3, r3
 8001986:	461a      	mov	r2, r3
 8001988:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	4413      	add	r3, r2
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6812      	ldr	r2, [r2, #0]
 8001994:	4413      	add	r3, r2
 8001996:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019a0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80019a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d009      	beq.n	80019c0 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6818      	ldr	r0, [r3, #0]
 80019b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019b2:	6959      	ldr	r1, [r3, #20]
 80019b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019b6:	895a      	ldrh	r2, [r3, #10]
 80019b8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80019bc:	f004 ff8e 	bl	80068dc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80019c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019c2:	69da      	ldr	r2, [r3, #28]
 80019c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80019c8:	441a      	add	r2, r3
 80019ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019cc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80019ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019d0:	695a      	ldr	r2, [r3, #20]
 80019d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80019d6:	441a      	add	r2, r3
 80019d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019da:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80019dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d005      	beq.n	80019f0 <PCD_EP_ISR_Handler+0x4fc>
 80019e4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80019e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d206      	bcs.n	80019fe <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80019f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	4619      	mov	r1, r3
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f007 f9c2 	bl	8008d80 <HAL_PCD_DataOutStageCallback>
 80019fc:	e005      	b.n	8001a0a <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001a04:	4618      	mov	r0, r3
 8001a06:	f003 fa3c 	bl	8004e82 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001a0a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 8121 	beq.w	8001c5a <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8001a18:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	3310      	adds	r3, #16
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a46:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	441a      	add	r2, r3
 8001a58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001a5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a6a:	78db      	ldrb	r3, [r3, #3]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	f040 80a2 	bne.w	8001bb6 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8001a72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001a78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a7a:	7b1b      	ldrb	r3, [r3, #12]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 8093 	beq.w	8001ba8 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001a82:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d046      	beq.n	8001b1c <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a90:	785b      	ldrb	r3, [r3, #1]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d126      	bne.n	8001ae4 <PCD_EP_ISR_Handler+0x5f0>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aaa:	4413      	add	r3, r2
 8001aac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	00da      	lsls	r2, r3, #3
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab6:	4413      	add	r3, r2
 8001ab8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001abc:	623b      	str	r3, [r7, #32]
 8001abe:	6a3b      	ldr	r3, [r7, #32]
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	801a      	strh	r2, [r3, #0]
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ad8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	801a      	strh	r2, [r3, #0]
 8001ae2:	e061      	b.n	8001ba8 <PCD_EP_ISR_Handler+0x6b4>
 8001ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ae6:	785b      	ldrb	r3, [r3, #1]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d15d      	bne.n	8001ba8 <PCD_EP_ISR_Handler+0x6b4>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	461a      	mov	r2, r3
 8001afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b00:	4413      	add	r3, r2
 8001b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	00da      	lsls	r2, r3, #3
 8001b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b0c:	4413      	add	r3, r2
 8001b0e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001b12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b16:	2200      	movs	r2, #0
 8001b18:	801a      	strh	r2, [r3, #0]
 8001b1a:	e045      	b.n	8001ba8 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b24:	785b      	ldrb	r3, [r3, #1]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d126      	bne.n	8001b78 <PCD_EP_ISR_Handler+0x684>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b3e:	4413      	add	r3, r2
 8001b40:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	00da      	lsls	r2, r3, #3
 8001b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b4a:	4413      	add	r3, r2
 8001b4c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001b50:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b60:	801a      	strh	r2, [r3, #0]
 8001b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b74:	801a      	strh	r2, [r3, #0]
 8001b76:	e017      	b.n	8001ba8 <PCD_EP_ISR_Handler+0x6b4>
 8001b78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b7a:	785b      	ldrb	r3, [r3, #1]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d113      	bne.n	8001ba8 <PCD_EP_ISR_Handler+0x6b4>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b8e:	4413      	add	r3, r2
 8001b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	00da      	lsls	r2, r3, #3
 8001b98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b9a:	4413      	add	r3, r2
 8001b9c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	4619      	mov	r1, r3
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f007 f901 	bl	8008db6 <HAL_PCD_DataInStageCallback>
 8001bb4:	e051      	b.n	8001c5a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001bb6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d144      	bne.n	8001c4c <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	461a      	mov	r2, r3
 8001bce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	4413      	add	r3, r2
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6812      	ldr	r2, [r2, #0]
 8001bda:	4413      	add	r3, r2
 8001bdc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001be6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001bea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bec:	699a      	ldr	r2, [r3, #24]
 8001bee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d907      	bls.n	8001c06 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8001bf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bf8:	699a      	ldr	r2, [r3, #24]
 8001bfa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001bfe:	1ad2      	subs	r2, r2, r3
 8001c00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c02:	619a      	str	r2, [r3, #24]
 8001c04:	e002      	b.n	8001c0c <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8001c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001c0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d106      	bne.n	8001c22 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f007 f8cb 	bl	8008db6 <HAL_PCD_DataInStageCallback>
 8001c20:	e01b      	b.n	8001c5a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001c22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c24:	695a      	ldr	r2, [r3, #20]
 8001c26:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001c2a:	441a      	add	r2, r3
 8001c2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c2e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001c30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c32:	69da      	ldr	r2, [r3, #28]
 8001c34:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001c38:	441a      	add	r2, r3
 8001c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c3c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001c44:	4618      	mov	r0, r3
 8001c46:	f003 f91c 	bl	8004e82 <USB_EPStartXfer>
 8001c4a:	e006      	b.n	8001c5a <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001c4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001c50:	461a      	mov	r2, r3
 8001c52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f917 	bl	8001e88 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	b21b      	sxth	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f6ff ac49 	blt.w	80014fe <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3758      	adds	r7, #88	@ 0x58
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b088      	sub	sp, #32
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	60f8      	str	r0, [r7, #12]
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	4613      	mov	r3, r2
 8001c82:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001c84:	88fb      	ldrh	r3, [r7, #6]
 8001c86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d07c      	beq.n	8001d88 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	461a      	mov	r2, r3
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	6812      	ldr	r2, [r2, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cb2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	699a      	ldr	r2, [r3, #24]
 8001cb8:	8b7b      	ldrh	r3, [r7, #26]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d306      	bcc.n	8001ccc <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	699a      	ldr	r2, [r3, #24]
 8001cc2:	8b7b      	ldrh	r3, [r7, #26]
 8001cc4:	1ad2      	subs	r2, r2, r3
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	619a      	str	r2, [r3, #24]
 8001cca:	e002      	b.n	8001cd2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d123      	bne.n	8001d22 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001cf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cf4:	833b      	strh	r3, [r7, #24]
 8001cf6:	8b3b      	ldrh	r3, [r7, #24]
 8001cf8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001cfc:	833b      	strh	r3, [r7, #24]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	441a      	add	r2, r3
 8001d0c:	8b3b      	ldrh	r3, [r7, #24]
 8001d0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001d12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001d16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d22:	88fb      	ldrh	r3, [r7, #6]
 8001d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d01f      	beq.n	8001d6c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d46:	82fb      	strh	r3, [r7, #22]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	441a      	add	r2, r3
 8001d56:	8afb      	ldrh	r3, [r7, #22]
 8001d58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001d5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001d60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d64:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001d6c:	8b7b      	ldrh	r3, [r7, #26]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 8085 	beq.w	8001e7e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6818      	ldr	r0, [r3, #0]
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	6959      	ldr	r1, [r3, #20]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	891a      	ldrh	r2, [r3, #8]
 8001d80:	8b7b      	ldrh	r3, [r7, #26]
 8001d82:	f004 fdab 	bl	80068dc <USB_ReadPMA>
 8001d86:	e07a      	b.n	8001e7e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	461a      	mov	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	4413      	add	r3, r2
 8001da2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	699a      	ldr	r2, [r3, #24]
 8001db2:	8b7b      	ldrh	r3, [r7, #26]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d306      	bcc.n	8001dc6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	699a      	ldr	r2, [r3, #24]
 8001dbc:	8b7b      	ldrh	r3, [r7, #26]
 8001dbe:	1ad2      	subs	r2, r2, r3
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	619a      	str	r2, [r3, #24]
 8001dc4:	e002      	b.n	8001dcc <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d123      	bne.n	8001e1c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001dea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001dee:	83fb      	strh	r3, [r7, #30]
 8001df0:	8bfb      	ldrh	r3, [r7, #30]
 8001df2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001df6:	83fb      	strh	r3, [r7, #30]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	441a      	add	r2, r3
 8001e06:	8bfb      	ldrh	r3, [r7, #30]
 8001e08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001e0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001e10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001e1c:	88fb      	ldrh	r3, [r7, #6]
 8001e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d11f      	bne.n	8001e66 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001e3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e40:	83bb      	strh	r3, [r7, #28]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	461a      	mov	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	441a      	add	r2, r3
 8001e50:	8bbb      	ldrh	r3, [r7, #28]
 8001e52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001e56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001e5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e5e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001e66:	8b7b      	ldrh	r3, [r7, #26]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d008      	beq.n	8001e7e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6818      	ldr	r0, [r3, #0]
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	6959      	ldr	r1, [r3, #20]
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	895a      	ldrh	r2, [r3, #10]
 8001e78:	8b7b      	ldrh	r3, [r7, #26]
 8001e7a:	f004 fd2f 	bl	80068dc <USB_ReadPMA>
    }
  }

  return count;
 8001e7e:	8b7b      	ldrh	r3, [r7, #26]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3720      	adds	r7, #32
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b0a4      	sub	sp, #144	@ 0x90
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	4613      	mov	r3, r2
 8001e94:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e96:	88fb      	ldrh	r3, [r7, #6]
 8001e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 81db 	beq.w	8002258 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	461a      	mov	r2, r3
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	6812      	ldr	r2, [r2, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ec6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	699a      	ldr	r2, [r3, #24]
 8001ece:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d907      	bls.n	8001ee6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	699a      	ldr	r2, [r3, #24]
 8001eda:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001ede:	1ad2      	subs	r2, r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	619a      	str	r2, [r3, #24]
 8001ee4:	e002      	b.n	8001eec <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f040 80b9 	bne.w	8002068 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	785b      	ldrb	r3, [r3, #1]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d126      	bne.n	8001f4c <HAL_PCD_EP_DB_Transmit+0xc4>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	461a      	mov	r2, r3
 8001f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f12:	4413      	add	r3, r2
 8001f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	00da      	lsls	r2, r3, #3
 8001f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f1e:	4413      	add	r3, r2
 8001f20:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001f24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f34:	801a      	strh	r2, [r3, #0]
 8001f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f48:	801a      	strh	r2, [r3, #0]
 8001f4a:	e01a      	b.n	8001f82 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	785b      	ldrb	r3, [r3, #1]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d116      	bne.n	8001f82 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	461a      	mov	r2, r3
 8001f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f68:	4413      	add	r3, r2
 8001f6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	00da      	lsls	r2, r3, #3
 8001f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f74:	4413      	add	r3, r2
 8001f76:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001f7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f7e:	2200      	movs	r2, #0
 8001f80:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	785b      	ldrb	r3, [r3, #1]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d126      	bne.n	8001fde <HAL_PCD_EP_DB_Transmit+0x156>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	61fb      	str	r3, [r7, #28]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	61fb      	str	r3, [r7, #28]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	00da      	lsls	r2, r3, #3
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001fb6:	61bb      	str	r3, [r7, #24]
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	801a      	strh	r2, [r3, #0]
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	801a      	strh	r2, [r3, #0]
 8001fdc:	e017      	b.n	800200e <HAL_PCD_EP_DB_Transmit+0x186>
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	785b      	ldrb	r3, [r3, #1]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d113      	bne.n	800200e <HAL_PCD_EP_DB_Transmit+0x186>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff4:	4413      	add	r3, r2
 8001ff6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	00da      	lsls	r2, r3, #3
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002000:	4413      	add	r3, r2
 8002002:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002006:	623b      	str	r3, [r7, #32]
 8002008:	6a3b      	ldr	r3, [r7, #32]
 800200a:	2200      	movs	r2, #0
 800200c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	4619      	mov	r1, r3
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f006 fece 	bl	8008db6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800201a:	88fb      	ldrh	r3, [r7, #6]
 800201c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 82fa 	beq.w	800261a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	b29b      	uxth	r3, r3
 8002038:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800203c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002040:	82fb      	strh	r3, [r7, #22]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	441a      	add	r2, r3
 8002050:	8afb      	ldrh	r3, [r7, #22]
 8002052:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002056:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800205a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800205e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002062:	b29b      	uxth	r3, r3
 8002064:	8013      	strh	r3, [r2, #0]
 8002066:	e2d8      	b.n	800261a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002068:	88fb      	ldrh	r3, [r7, #6]
 800206a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d021      	beq.n	80020b6 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	b29b      	uxth	r3, r3
 8002084:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002088:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800208c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	461a      	mov	r2, r3
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	441a      	add	r2, r3
 800209e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80020a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80020a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80020aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020bc:	2b01      	cmp	r3, #1
 80020be:	f040 82ac 	bne.w	800261a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	695a      	ldr	r2, [r3, #20]
 80020c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80020ca:	441a      	add	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	69da      	ldr	r2, [r3, #28]
 80020d4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80020d8:	441a      	add	r2, r3
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	6a1a      	ldr	r2, [r3, #32]
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d30b      	bcc.n	8002102 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	6a1a      	ldr	r2, [r3, #32]
 80020f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020fa:	1ad2      	subs	r2, r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	621a      	str	r2, [r3, #32]
 8002100:	e017      	b.n	8002132 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d108      	bne.n	800211c <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800210a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800210e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800211a:	e00a      	b.n	8002132 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2200      	movs	r2, #0
 8002130:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	785b      	ldrb	r3, [r3, #1]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d165      	bne.n	8002206 <HAL_PCD_EP_DB_Transmit+0x37e>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002148:	b29b      	uxth	r3, r3
 800214a:	461a      	mov	r2, r3
 800214c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800214e:	4413      	add	r3, r2
 8002150:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	00da      	lsls	r2, r3, #3
 8002158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800215a:	4413      	add	r3, r2
 800215c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002160:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	b29b      	uxth	r3, r3
 8002168:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800216c:	b29a      	uxth	r2, r3
 800216e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002170:	801a      	strh	r2, [r3, #0]
 8002172:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002176:	2b3e      	cmp	r3, #62	@ 0x3e
 8002178:	d91d      	bls.n	80021b6 <HAL_PCD_EP_DB_Transmit+0x32e>
 800217a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800217e:	095b      	lsrs	r3, r3, #5
 8002180:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002182:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002186:	f003 031f 	and.w	r3, r3, #31
 800218a:	2b00      	cmp	r3, #0
 800218c:	d102      	bne.n	8002194 <HAL_PCD_EP_DB_Transmit+0x30c>
 800218e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002190:	3b01      	subs	r3, #1
 8002192:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	b29a      	uxth	r2, r3
 800219a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800219c:	b29b      	uxth	r3, r3
 800219e:	029b      	lsls	r3, r3, #10
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	4313      	orrs	r3, r2
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021b2:	801a      	strh	r2, [r3, #0]
 80021b4:	e044      	b.n	8002240 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80021b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10a      	bne.n	80021d4 <HAL_PCD_EP_DB_Transmit+0x34c>
 80021be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021d0:	801a      	strh	r2, [r3, #0]
 80021d2:	e035      	b.n	8002240 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80021d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021d8:	085b      	lsrs	r3, r3, #1
 80021da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80021dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d002      	beq.n	80021ee <HAL_PCD_EP_DB_Transmit+0x366>
 80021e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021ea:	3301      	adds	r3, #1
 80021ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80021ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	029b      	lsls	r3, r3, #10
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	4313      	orrs	r3, r2
 80021fe:	b29a      	uxth	r2, r3
 8002200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002202:	801a      	strh	r2, [r3, #0]
 8002204:	e01c      	b.n	8002240 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	785b      	ldrb	r3, [r3, #1]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d118      	bne.n	8002240 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	647b      	str	r3, [r7, #68]	@ 0x44
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800221c:	b29b      	uxth	r3, r3
 800221e:	461a      	mov	r2, r3
 8002220:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002222:	4413      	add	r3, r2
 8002224:	647b      	str	r3, [r7, #68]	@ 0x44
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	00da      	lsls	r2, r3, #3
 800222c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800222e:	4413      	add	r3, r2
 8002230:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002234:	643b      	str	r3, [r7, #64]	@ 0x40
 8002236:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800223a:	b29a      	uxth	r2, r3
 800223c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800223e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6818      	ldr	r0, [r3, #0]
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	6959      	ldr	r1, [r3, #20]
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	891a      	ldrh	r2, [r3, #8]
 800224c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002250:	b29b      	uxth	r3, r3
 8002252:	f004 fb01 	bl	8006858 <USB_WritePMA>
 8002256:	e1e0      	b.n	800261a <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002260:	b29b      	uxth	r3, r3
 8002262:	461a      	mov	r2, r3
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	4413      	add	r3, r2
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	6812      	ldr	r2, [r2, #0]
 8002270:	4413      	add	r3, r2
 8002272:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800227c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	699a      	ldr	r2, [r3, #24]
 8002284:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002288:	429a      	cmp	r2, r3
 800228a:	d307      	bcc.n	800229c <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	699a      	ldr	r2, [r3, #24]
 8002290:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002294:	1ad2      	subs	r2, r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	619a      	str	r2, [r3, #24]
 800229a:	e002      	b.n	80022a2 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2200      	movs	r2, #0
 80022a0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f040 80c0 	bne.w	800242c <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	785b      	ldrb	r3, [r3, #1]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d126      	bne.n	8002302 <HAL_PCD_EP_DB_Transmit+0x47a>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	461a      	mov	r2, r3
 80022c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022c8:	4413      	add	r3, r2
 80022ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	00da      	lsls	r2, r3, #3
 80022d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022d4:	4413      	add	r3, r2
 80022d6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80022da:	67bb      	str	r3, [r7, #120]	@ 0x78
 80022dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022ea:	801a      	strh	r2, [r3, #0]
 80022ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022fe:	801a      	strh	r2, [r3, #0]
 8002300:	e01a      	b.n	8002338 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	785b      	ldrb	r3, [r3, #1]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d116      	bne.n	8002338 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002318:	b29b      	uxth	r3, r3
 800231a:	461a      	mov	r2, r3
 800231c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800231e:	4413      	add	r3, r2
 8002320:	667b      	str	r3, [r7, #100]	@ 0x64
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	00da      	lsls	r2, r3, #3
 8002328:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800232a:	4413      	add	r3, r2
 800232c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002330:	663b      	str	r3, [r7, #96]	@ 0x60
 8002332:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002334:	2200      	movs	r2, #0
 8002336:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	677b      	str	r3, [r7, #116]	@ 0x74
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	785b      	ldrb	r3, [r3, #1]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d12b      	bne.n	800239e <HAL_PCD_EP_DB_Transmit+0x516>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002354:	b29b      	uxth	r3, r3
 8002356:	461a      	mov	r2, r3
 8002358:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800235a:	4413      	add	r3, r2
 800235c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	00da      	lsls	r2, r3, #3
 8002364:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002366:	4413      	add	r3, r2
 8002368:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800236c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002370:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	b29b      	uxth	r3, r3
 8002378:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800237c:	b29a      	uxth	r2, r3
 800237e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002382:	801a      	strh	r2, [r3, #0]
 8002384:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002388:	881b      	ldrh	r3, [r3, #0]
 800238a:	b29b      	uxth	r3, r3
 800238c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002390:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002394:	b29a      	uxth	r2, r3
 8002396:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800239a:	801a      	strh	r2, [r3, #0]
 800239c:	e017      	b.n	80023ce <HAL_PCD_EP_DB_Transmit+0x546>
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	785b      	ldrb	r3, [r3, #1]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d113      	bne.n	80023ce <HAL_PCD_EP_DB_Transmit+0x546>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	461a      	mov	r2, r3
 80023b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023b4:	4413      	add	r3, r2
 80023b6:	677b      	str	r3, [r7, #116]	@ 0x74
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	00da      	lsls	r2, r3, #3
 80023be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023c0:	4413      	add	r3, r2
 80023c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80023c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80023c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023ca:	2200      	movs	r2, #0
 80023cc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	4619      	mov	r1, r3
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f006 fcee 	bl	8008db6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f040 811a 	bne.w	800261a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002400:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	441a      	add	r2, r3
 8002412:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002416:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800241a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800241e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002422:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002426:	b29b      	uxth	r3, r3
 8002428:	8013      	strh	r3, [r2, #0]
 800242a:	e0f6      	b.n	800261a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d121      	bne.n	800247a <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	b29b      	uxth	r3, r3
 8002448:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800244c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002450:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	461a      	mov	r2, r3
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	441a      	add	r2, r3
 8002462:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002466:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800246a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800246e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002476:	b29b      	uxth	r3, r3
 8002478:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002480:	2b01      	cmp	r3, #1
 8002482:	f040 80ca 	bne.w	800261a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	695a      	ldr	r2, [r3, #20]
 800248a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800248e:	441a      	add	r2, r3
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	69da      	ldr	r2, [r3, #28]
 8002498:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800249c:	441a      	add	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	6a1a      	ldr	r2, [r3, #32]
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d30b      	bcc.n	80024c6 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	6a1a      	ldr	r2, [r3, #32]
 80024ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024be:	1ad2      	subs	r2, r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	621a      	str	r2, [r3, #32]
 80024c4:	e017      	b.n	80024f6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d108      	bne.n	80024e0 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80024ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80024d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80024de:	e00a      	b.n	80024f6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2200      	movs	r2, #0
 80024ec:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	785b      	ldrb	r3, [r3, #1]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d165      	bne.n	80025d0 <HAL_PCD_EP_DB_Transmit+0x748>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002512:	b29b      	uxth	r3, r3
 8002514:	461a      	mov	r2, r3
 8002516:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002518:	4413      	add	r3, r2
 800251a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	00da      	lsls	r2, r3, #3
 8002522:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002524:	4413      	add	r3, r2
 8002526:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800252a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800252c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	b29b      	uxth	r3, r3
 8002532:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002536:	b29a      	uxth	r2, r3
 8002538:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800253a:	801a      	strh	r2, [r3, #0]
 800253c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002540:	2b3e      	cmp	r3, #62	@ 0x3e
 8002542:	d91d      	bls.n	8002580 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8002544:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002548:	095b      	lsrs	r3, r3, #5
 800254a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800254c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	2b00      	cmp	r3, #0
 8002556:	d102      	bne.n	800255e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002558:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800255a:	3b01      	subs	r3, #1
 800255c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800255e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	b29a      	uxth	r2, r3
 8002564:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002566:	b29b      	uxth	r3, r3
 8002568:	029b      	lsls	r3, r3, #10
 800256a:	b29b      	uxth	r3, r3
 800256c:	4313      	orrs	r3, r2
 800256e:	b29b      	uxth	r3, r3
 8002570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002578:	b29a      	uxth	r2, r3
 800257a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800257c:	801a      	strh	r2, [r3, #0]
 800257e:	e041      	b.n	8002604 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002580:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10a      	bne.n	800259e <HAL_PCD_EP_DB_Transmit+0x716>
 8002588:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	b29b      	uxth	r3, r3
 800258e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002592:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002596:	b29a      	uxth	r2, r3
 8002598:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800259a:	801a      	strh	r2, [r3, #0]
 800259c:	e032      	b.n	8002604 <HAL_PCD_EP_DB_Transmit+0x77c>
 800259e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025a2:	085b      	lsrs	r3, r3, #1
 80025a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80025a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <HAL_PCD_EP_DB_Transmit+0x730>
 80025b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025b4:	3301      	adds	r3, #1
 80025b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80025b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	b29a      	uxth	r2, r3
 80025be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	029b      	lsls	r3, r3, #10
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	4313      	orrs	r3, r2
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025cc:	801a      	strh	r2, [r3, #0]
 80025ce:	e019      	b.n	8002604 <HAL_PCD_EP_DB_Transmit+0x77c>
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	785b      	ldrb	r3, [r3, #1]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d115      	bne.n	8002604 <HAL_PCD_EP_DB_Transmit+0x77c>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	461a      	mov	r2, r3
 80025e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025e6:	4413      	add	r3, r2
 80025e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	00da      	lsls	r2, r3, #3
 80025f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025f2:	4413      	add	r3, r2
 80025f4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80025f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80025fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025fe:	b29a      	uxth	r2, r3
 8002600:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002602:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	6959      	ldr	r1, [r3, #20]
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	895a      	ldrh	r2, [r3, #10]
 8002610:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002614:	b29b      	uxth	r3, r3
 8002616:	f004 f91f 	bl	8006858 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	461a      	mov	r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	b29b      	uxth	r3, r3
 800262c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002630:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002634:	82bb      	strh	r3, [r7, #20]
 8002636:	8abb      	ldrh	r3, [r7, #20]
 8002638:	f083 0310 	eor.w	r3, r3, #16
 800263c:	82bb      	strh	r3, [r7, #20]
 800263e:	8abb      	ldrh	r3, [r7, #20]
 8002640:	f083 0320 	eor.w	r3, r3, #32
 8002644:	82bb      	strh	r3, [r7, #20]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	441a      	add	r2, r3
 8002654:	8abb      	ldrh	r3, [r7, #20]
 8002656:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800265a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800265e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002666:	b29b      	uxth	r3, r3
 8002668:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3790      	adds	r7, #144	@ 0x90
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002674:	b480      	push	{r7}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	607b      	str	r3, [r7, #4]
 800267e:	460b      	mov	r3, r1
 8002680:	817b      	strh	r3, [r7, #10]
 8002682:	4613      	mov	r3, r2
 8002684:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002686:	897b      	ldrh	r3, [r7, #10]
 8002688:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800268c:	b29b      	uxth	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00b      	beq.n	80026aa <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002692:	897b      	ldrh	r3, [r7, #10]
 8002694:	f003 0207 	and.w	r2, r3, #7
 8002698:	4613      	mov	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	3310      	adds	r3, #16
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	4413      	add	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	e009      	b.n	80026be <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026aa:	897a      	ldrh	r2, [r7, #10]
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	4413      	add	r3, r2
 80026bc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80026be:	893b      	ldrh	r3, [r7, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d107      	bne.n	80026d4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	2200      	movs	r2, #0
 80026c8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	80da      	strh	r2, [r3, #6]
 80026d2:	e00b      	b.n	80026ec <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	2201      	movs	r2, #1
 80026d8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	b29a      	uxth	r2, r3
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	0c1b      	lsrs	r3, r3, #16
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	371c      	adds	r7, #28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b085      	sub	sp, #20
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800271e:	b29b      	uxth	r3, r3
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	b29a      	uxth	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002732:	b29b      	uxth	r3, r3
 8002734:	f043 0302 	orr.w	r3, r3, #2
 8002738:	b29a      	uxth	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002754:	4b05      	ldr	r3, [pc, #20]	@ (800276c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a04      	ldr	r2, [pc, #16]	@ (800276c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800275a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800275e:	6013      	str	r3, [r2, #0]
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	58000400 	.word	0x58000400

08002770 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002774:	4b04      	ldr	r3, [pc, #16]	@ (8002788 <HAL_PWREx_GetVoltageRange+0x18>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800277c:	4618      	mov	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	58000400 	.word	0x58000400

0800278c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002790:	4b05      	ldr	r3, [pc, #20]	@ (80027a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	4a04      	ldr	r2, [pc, #16]	@ (80027a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002796:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800279a:	6053      	str	r3, [r2, #4]
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	58000400 	.word	0x58000400

080027ac <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80027b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027be:	d101      	bne.n	80027c4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80027c0:	2301      	movs	r3, #1
 80027c2:	e000      	b.n	80027c6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80027d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027e2:	6013      	str	r3, [r2, #0]
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80027f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002800:	6013      	str	r3, [r2, #0]
}
 8002802:	bf00      	nop
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002810:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800281a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800281e:	d101      	bne.n	8002824 <LL_RCC_HSE_IsReady+0x18>
 8002820:	2301      	movs	r3, #1
 8002822:	e000      	b.n	8002826 <LL_RCC_HSE_IsReady+0x1a>
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002834:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800283e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002842:	6013      	str	r3, [r2, #0]
}
 8002844:	bf00      	nop
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800284e:	b480      	push	{r7}
 8002850:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002852:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800285c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002860:	6013      	str	r3, [r2, #0]
}
 8002862:	bf00      	nop
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002870:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800287a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800287e:	d101      	bne.n	8002884 <LL_RCC_HSI_IsReady+0x18>
 8002880:	2301      	movs	r3, #1
 8002882:	e000      	b.n	8002886 <LL_RCC_HSI_IsReady+0x1a>
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002898:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	061b      	lsls	r3, r3, #24
 80028a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028aa:	4313      	orrs	r3, r2
 80028ac:	604b      	str	r3, [r1, #4]
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80028ba:	b480      	push	{r7}
 80028bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80028be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80028d2:	bf00      	nop
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80028e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028ec:	f023 0301 	bic.w	r3, r3, #1
 80028f0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80028fe:	b480      	push	{r7}
 8002900:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002902:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002906:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b02      	cmp	r3, #2
 8002910:	d101      	bne.n	8002916 <LL_RCC_HSI48_IsReady+0x18>
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <LL_RCC_HSI48_IsReady+0x1a>
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8002922:	b480      	push	{r7}
 8002924:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002926:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800292a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800292e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800293a:	bf00      	nop
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002948:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800294c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002950:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002954:	f023 0301 	bic.w	r3, r3, #1
 8002958:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8002966:	b480      	push	{r7}
 8002968:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800296a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800296e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002972:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002976:	f043 0304 	orr.w	r3, r3, #4
 800297a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800297e:	bf00      	nop
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800298c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002990:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002994:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002998:	f023 0304 	bic.w	r3, r3, #4
 800299c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80029aa:	b480      	push	{r7}
 80029ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80029ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d101      	bne.n	80029c2 <LL_RCC_LSE_IsReady+0x18>
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <LL_RCC_LSE_IsReady+0x1a>
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80029ce:	b480      	push	{r7}
 80029d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80029d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80029e6:	bf00      	nop
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80029f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a00:	f023 0301 	bic.w	r3, r3, #1
 8002a04:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002a08:	bf00      	nop
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002a12:	b480      	push	{r7}
 8002a14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002a16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d101      	bne.n	8002a2a <LL_RCC_LSI1_IsReady+0x18>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <LL_RCC_LSI1_IsReady+0x1a>
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002a3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a46:	f043 0304 	orr.w	r3, r3, #4
 8002a4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002a4e:	bf00      	nop
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002a5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a68:	f023 0304 	bic.w	r3, r3, #4
 8002a6c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002a70:	bf00      	nop
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002a7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d101      	bne.n	8002a92 <LL_RCC_LSI2_IsReady+0x18>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <LL_RCC_LSI2_IsReady+0x1a>
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002aa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aae:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	021b      	lsls	r3, r3, #8
 8002ab6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002ad0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ada:	f043 0301 	orr.w	r3, r3, #1
 8002ade:	6013      	str	r3, [r2, #0]
}
 8002ae0:	bf00      	nop
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002aea:	b480      	push	{r7}
 8002aec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002aee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002af8:	f023 0301 	bic.w	r3, r3, #1
 8002afc:	6013      	str	r3, [r2, #0]
}
 8002afe:	bf00      	nop
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002b0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d101      	bne.n	8002b1e <LL_RCC_MSI_IsReady+0x16>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <LL_RCC_MSI_IsReady+0x18>
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002b32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	600b      	str	r3, [r1, #0]
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002b58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b62:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2bb0      	cmp	r3, #176	@ 0xb0
 8002b68:	d901      	bls.n	8002b6e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002b6a:	23b0      	movs	r3, #176	@ 0xb0
 8002b6c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002b6e:	687b      	ldr	r3, [r7, #4]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002b84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	021b      	lsls	r3, r3, #8
 8002b92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b96:	4313      	orrs	r3, r2
 8002b98:	604b      	str	r3, [r1, #4]
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002bae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f023 0203 	bic.w	r2, r3, #3
 8002bb8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	608b      	str	r3, [r1, #8]
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002bd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 030c 	and.w	r3, r3, #12
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002bee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bf8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	608b      	str	r3, [r1, #8]
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002c16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002c1e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002c42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c46:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002c4a:	f023 020f 	bic.w	r2, r3, #15
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	091b      	lsrs	r3, r3, #4
 8002c52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c56:	4313      	orrs	r3, r2
 8002c58:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002c70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	608b      	str	r3, [r1, #8]
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002c98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ca2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	608b      	str	r3, [r1, #8]
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002cbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002cd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cd8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002cf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cfe:	6013      	str	r3, [r2, #0]
}
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002d0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d1c:	6013      	str	r3, [r2, #0]
}
 8002d1e:	bf00      	nop
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002d2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d3a:	d101      	bne.n	8002d40 <LL_RCC_PLL_IsReady+0x18>
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e000      	b.n	8002d42 <LL_RCC_PLL_IsReady+0x1a>
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002d50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	0a1b      	lsrs	r3, r3, #8
 8002d58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002d66:	b480      	push	{r7}
 8002d68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002d6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002d82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002d96:	b480      	push	{r7}
 8002d98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002d9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f003 0303 	and.w	r3, r3, #3
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002dae:	b480      	push	{r7}
 8002db0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002db2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dc0:	d101      	bne.n	8002dc6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002dd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dda:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002de6:	d101      	bne.n	8002dec <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002dfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e00:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002e04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e0c:	d101      	bne.n	8002e12 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002e22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e30:	d101      	bne.n	8002e36 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002e32:	2301      	movs	r3, #1
 8002e34:	e000      	b.n	8002e38 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002e42:	b480      	push	{r7}
 8002e44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002e46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e50:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e54:	d101      	bne.n	8002e5a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
	...

08002e68 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e68:	b590      	push	{r4, r7, lr}
 8002e6a:	b08d      	sub	sp, #52	@ 0x34
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e363      	b.n	8003542 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 808d 	beq.w	8002fa2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e88:	f7ff fea1 	bl	8002bce <LL_RCC_GetSysClkSource>
 8002e8c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e8e:	f7ff ff82 	bl	8002d96 <LL_RCC_PLL_GetMainSource>
 8002e92:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d005      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x3e>
 8002e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e9c:	2b0c      	cmp	r3, #12
 8002e9e:	d147      	bne.n	8002f30 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d144      	bne.n	8002f30 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e347      	b.n	8003542 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8002eb6:	f7ff fe4c 	bl	8002b52 <LL_RCC_MSI_GetRange>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	429c      	cmp	r4, r3
 8002ebe:	d914      	bls.n	8002eea <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f000 fd03 	bl	80038d0 <RCC_SetFlashLatencyFromMSIRange>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e336      	b.n	8003542 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff fe26 	bl	8002b2a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff fe4a 	bl	8002b7c <LL_RCC_MSI_SetCalibTrimming>
 8002ee8:	e013      	b.n	8002f12 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff fe1b 	bl	8002b2a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff fe3f 	bl	8002b7c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 fce4 	bl	80038d0 <RCC_SetFlashLatencyFromMSIRange>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e317      	b.n	8003542 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f12:	f000 fcc9 	bl	80038a8 <HAL_RCC_GetHCLKFreq>
 8002f16:	4603      	mov	r3, r0
 8002f18:	4aa4      	ldr	r2, [pc, #656]	@ (80031ac <HAL_RCC_OscConfig+0x344>)
 8002f1a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f1c:	4ba4      	ldr	r3, [pc, #656]	@ (80031b0 <HAL_RCC_OscConfig+0x348>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fd fba5 	bl	8000670 <HAL_InitTick>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d039      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e308      	b.n	8003542 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d01e      	beq.n	8002f76 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f38:	f7ff fdc8 	bl	8002acc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f3c:	f7fd fbe6 	bl	800070c <HAL_GetTick>
 8002f40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f44:	f7fd fbe2 	bl	800070c <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e2f5      	b.n	8003542 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002f56:	f7ff fdd7 	bl	8002b08 <LL_RCC_MSI_IsReady>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0f1      	beq.n	8002f44 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff fde0 	bl	8002b2a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff fe04 	bl	8002b7c <LL_RCC_MSI_SetCalibTrimming>
 8002f74:	e015      	b.n	8002fa2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f76:	f7ff fdb8 	bl	8002aea <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f7a:	f7fd fbc7 	bl	800070c <HAL_GetTick>
 8002f7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f82:	f7fd fbc3 	bl	800070c <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e2d6      	b.n	8003542 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002f94:	f7ff fdb8 	bl	8002b08 <LL_RCC_MSI_IsReady>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f1      	bne.n	8002f82 <HAL_RCC_OscConfig+0x11a>
 8002f9e:	e000      	b.n	8002fa2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002fa0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d047      	beq.n	800303e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fae:	f7ff fe0e 	bl	8002bce <LL_RCC_GetSysClkSource>
 8002fb2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fb4:	f7ff feef 	bl	8002d96 <LL_RCC_PLL_GetMainSource>
 8002fb8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_OscConfig+0x164>
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	2b0c      	cmp	r3, #12
 8002fc4:	d108      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	2b03      	cmp	r3, #3
 8002fca:	d105      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d134      	bne.n	800303e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e2b4      	b.n	8003542 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fe0:	d102      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x180>
 8002fe2:	f7ff fbf5 	bl	80027d0 <LL_RCC_HSE_Enable>
 8002fe6:	e001      	b.n	8002fec <HAL_RCC_OscConfig+0x184>
 8002fe8:	f7ff fc01 	bl	80027ee <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d012      	beq.n	800301a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff4:	f7fd fb8a 	bl	800070c <HAL_GetTick>
 8002ff8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ffc:	f7fd fb86 	bl	800070c <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b64      	cmp	r3, #100	@ 0x64
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e299      	b.n	8003542 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800300e:	f7ff fbfd 	bl	800280c <LL_RCC_HSE_IsReady>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f1      	beq.n	8002ffc <HAL_RCC_OscConfig+0x194>
 8003018:	e011      	b.n	800303e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301a:	f7fd fb77 	bl	800070c <HAL_GetTick>
 800301e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003022:	f7fd fb73 	bl	800070c <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b64      	cmp	r3, #100	@ 0x64
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e286      	b.n	8003542 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003034:	f7ff fbea 	bl	800280c <LL_RCC_HSE_IsReady>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f1      	bne.n	8003022 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d04c      	beq.n	80030e4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800304a:	f7ff fdc0 	bl	8002bce <LL_RCC_GetSysClkSource>
 800304e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003050:	f7ff fea1 	bl	8002d96 <LL_RCC_PLL_GetMainSource>
 8003054:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	2b04      	cmp	r3, #4
 800305a:	d005      	beq.n	8003068 <HAL_RCC_OscConfig+0x200>
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	2b0c      	cmp	r3, #12
 8003060:	d10e      	bne.n	8003080 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2b02      	cmp	r3, #2
 8003066:	d10b      	bne.n	8003080 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e266      	b.n	8003542 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff fc09 	bl	8002890 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800307e:	e031      	b.n	80030e4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d019      	beq.n	80030bc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003088:	f7ff fbd2 	bl	8002830 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308c:	f7fd fb3e 	bl	800070c <HAL_GetTick>
 8003090:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003094:	f7fd fb3a 	bl	800070c <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e24d      	b.n	8003542 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80030a6:	f7ff fbe1 	bl	800286c <LL_RCC_HSI_IsReady>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0f1      	beq.n	8003094 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff fbeb 	bl	8002890 <LL_RCC_HSI_SetCalibTrimming>
 80030ba:	e013      	b.n	80030e4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030bc:	f7ff fbc7 	bl	800284e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c0:	f7fd fb24 	bl	800070c <HAL_GetTick>
 80030c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c8:	f7fd fb20 	bl	800070c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e233      	b.n	8003542 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80030da:	f7ff fbc7 	bl	800286c <LL_RCC_HSI_IsReady>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1f1      	bne.n	80030c8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d106      	bne.n	80030fe <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80a3 	beq.w	8003244 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d076      	beq.n	80031f4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0310 	and.w	r3, r3, #16
 800310e:	2b00      	cmp	r3, #0
 8003110:	d046      	beq.n	80031a0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003112:	f7ff fc7e 	bl	8002a12 <LL_RCC_LSI1_IsReady>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d113      	bne.n	8003144 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800311c:	f7ff fc57 	bl	80029ce <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003120:	f7fd faf4 	bl	800070c <HAL_GetTick>
 8003124:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003128:	f7fd faf0 	bl	800070c <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e203      	b.n	8003542 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800313a:	f7ff fc6a 	bl	8002a12 <LL_RCC_LSI1_IsReady>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0f1      	beq.n	8003128 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003144:	f7ff fc77 	bl	8002a36 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003148:	f7fd fae0 	bl	800070c <HAL_GetTick>
 800314c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003150:	f7fd fadc 	bl	800070c <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b03      	cmp	r3, #3
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e1ef      	b.n	8003542 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003162:	f7ff fc8a 	bl	8002a7a <LL_RCC_LSI2_IsReady>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0f1      	beq.n	8003150 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff fc94 	bl	8002a9e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003176:	f7ff fc3b 	bl	80029f0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317a:	f7fd fac7 	bl	800070c <HAL_GetTick>
 800317e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003182:	f7fd fac3 	bl	800070c <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e1d6      	b.n	8003542 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003194:	f7ff fc3d 	bl	8002a12 <LL_RCC_LSI1_IsReady>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f1      	bne.n	8003182 <HAL_RCC_OscConfig+0x31a>
 800319e:	e051      	b.n	8003244 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80031a0:	f7ff fc15 	bl	80029ce <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a4:	f7fd fab2 	bl	800070c <HAL_GetTick>
 80031a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80031aa:	e00c      	b.n	80031c6 <HAL_RCC_OscConfig+0x35e>
 80031ac:	20000008 	.word	0x20000008
 80031b0:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80031b4:	f7fd faaa 	bl	800070c <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e1bd      	b.n	8003542 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80031c6:	f7ff fc24 	bl	8002a12 <LL_RCC_LSI1_IsReady>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0f1      	beq.n	80031b4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80031d0:	f7ff fc42 	bl	8002a58 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80031d6:	f7fd fa99 	bl	800070c <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e1ac      	b.n	8003542 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80031e8:	f7ff fc47 	bl	8002a7a <LL_RCC_LSI2_IsReady>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f1      	bne.n	80031d6 <HAL_RCC_OscConfig+0x36e>
 80031f2:	e027      	b.n	8003244 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80031f4:	f7ff fc30 	bl	8002a58 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f8:	f7fd fa88 	bl	800070c <HAL_GetTick>
 80031fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003200:	f7fd fa84 	bl	800070c <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b03      	cmp	r3, #3
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e197      	b.n	8003542 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003212:	f7ff fc32 	bl	8002a7a <LL_RCC_LSI2_IsReady>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1f1      	bne.n	8003200 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800321c:	f7ff fbe8 	bl	80029f0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003220:	f7fd fa74 	bl	800070c <HAL_GetTick>
 8003224:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003228:	f7fd fa70 	bl	800070c <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e183      	b.n	8003542 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800323a:	f7ff fbea 	bl	8002a12 <LL_RCC_LSI1_IsReady>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1f1      	bne.n	8003228 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d05b      	beq.n	8003308 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003250:	4ba7      	ldr	r3, [pc, #668]	@ (80034f0 <HAL_RCC_OscConfig+0x688>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003258:	2b00      	cmp	r3, #0
 800325a:	d114      	bne.n	8003286 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800325c:	f7ff fa78 	bl	8002750 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003260:	f7fd fa54 	bl	800070c <HAL_GetTick>
 8003264:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003268:	f7fd fa50 	bl	800070c <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e163      	b.n	8003542 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800327a:	4b9d      	ldr	r3, [pc, #628]	@ (80034f0 <HAL_RCC_OscConfig+0x688>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d102      	bne.n	8003294 <HAL_RCC_OscConfig+0x42c>
 800328e:	f7ff fb48 	bl	8002922 <LL_RCC_LSE_Enable>
 8003292:	e00c      	b.n	80032ae <HAL_RCC_OscConfig+0x446>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b05      	cmp	r3, #5
 800329a:	d104      	bne.n	80032a6 <HAL_RCC_OscConfig+0x43e>
 800329c:	f7ff fb63 	bl	8002966 <LL_RCC_LSE_EnableBypass>
 80032a0:	f7ff fb3f 	bl	8002922 <LL_RCC_LSE_Enable>
 80032a4:	e003      	b.n	80032ae <HAL_RCC_OscConfig+0x446>
 80032a6:	f7ff fb4d 	bl	8002944 <LL_RCC_LSE_Disable>
 80032aa:	f7ff fb6d 	bl	8002988 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d014      	beq.n	80032e0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b6:	f7fd fa29 	bl	800070c <HAL_GetTick>
 80032ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80032bc:	e00a      	b.n	80032d4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032be:	f7fd fa25 	bl	800070c <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e136      	b.n	8003542 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80032d4:	f7ff fb69 	bl	80029aa <LL_RCC_LSE_IsReady>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0ef      	beq.n	80032be <HAL_RCC_OscConfig+0x456>
 80032de:	e013      	b.n	8003308 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e0:	f7fd fa14 	bl	800070c <HAL_GetTick>
 80032e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80032e6:	e00a      	b.n	80032fe <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e8:	f7fd fa10 	bl	800070c <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e121      	b.n	8003542 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80032fe:	f7ff fb54 	bl	80029aa <LL_RCC_LSE_IsReady>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1ef      	bne.n	80032e8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003310:	2b00      	cmp	r3, #0
 8003312:	d02c      	beq.n	800336e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003318:	2b00      	cmp	r3, #0
 800331a:	d014      	beq.n	8003346 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800331c:	f7ff facd 	bl	80028ba <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003320:	f7fd f9f4 	bl	800070c <HAL_GetTick>
 8003324:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003328:	f7fd f9f0 	bl	800070c <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e103      	b.n	8003542 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800333a:	f7ff fae0 	bl	80028fe <LL_RCC_HSI48_IsReady>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0f1      	beq.n	8003328 <HAL_RCC_OscConfig+0x4c0>
 8003344:	e013      	b.n	800336e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003346:	f7ff fac9 	bl	80028dc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334a:	f7fd f9df 	bl	800070c <HAL_GetTick>
 800334e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003352:	f7fd f9db 	bl	800070c <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e0ee      	b.n	8003542 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003364:	f7ff facb 	bl	80028fe <LL_RCC_HSI48_IsReady>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f1      	bne.n	8003352 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 80e4 	beq.w	8003540 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003378:	f7ff fc29 	bl	8002bce <LL_RCC_GetSysClkSource>
 800337c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800337e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338a:	2b02      	cmp	r3, #2
 800338c:	f040 80b4 	bne.w	80034f8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f003 0203 	and.w	r2, r3, #3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339a:	429a      	cmp	r2, r3
 800339c:	d123      	bne.n	80033e6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d11c      	bne.n	80033e6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	0a1b      	lsrs	r3, r3, #8
 80033b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d114      	bne.n	80033e6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d10d      	bne.n	80033e6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d106      	bne.n	80033e6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d05d      	beq.n	80034a2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	2b0c      	cmp	r3, #12
 80033ea:	d058      	beq.n	800349e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e0a1      	b.n	8003542 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033fe:	f7ff fc84 	bl	8002d0a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003402:	f7fd f983 	bl	800070c <HAL_GetTick>
 8003406:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340a:	f7fd f97f 	bl	800070c <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e092      	b.n	8003542 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800341c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1ef      	bne.n	800340a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800342a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	4b30      	ldr	r3, [pc, #192]	@ (80034f4 <HAL_RCC_OscConfig+0x68c>)
 8003432:	4013      	ands	r3, r2
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800343c:	4311      	orrs	r1, r2
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003442:	0212      	lsls	r2, r2, #8
 8003444:	4311      	orrs	r1, r2
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800344a:	4311      	orrs	r1, r2
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003450:	4311      	orrs	r1, r2
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003456:	430a      	orrs	r2, r1
 8003458:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800345c:	4313      	orrs	r3, r2
 800345e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003460:	f7ff fc44 	bl	8002cec <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003464:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800346e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003472:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003474:	f7fd f94a 	bl	800070c <HAL_GetTick>
 8003478:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347c:	f7fd f946 	bl	800070c <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e059      	b.n	8003542 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800348e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0ef      	beq.n	800347c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800349c:	e050      	b.n	8003540 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e04f      	b.n	8003542 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d147      	bne.n	8003540 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034b0:	f7ff fc1c 	bl	8002cec <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034c4:	f7fd f922 	bl	800070c <HAL_GetTick>
 80034c8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034cc:	f7fd f91e 	bl	800070c <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e031      	b.n	8003542 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0ef      	beq.n	80034cc <HAL_RCC_OscConfig+0x664>
 80034ec:	e028      	b.n	8003540 <HAL_RCC_OscConfig+0x6d8>
 80034ee:	bf00      	nop
 80034f0:	58000400 	.word	0x58000400
 80034f4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	2b0c      	cmp	r3, #12
 80034fc:	d01e      	beq.n	800353c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fe:	f7ff fc04 	bl	8002d0a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003502:	f7fd f903 	bl	800070c <HAL_GetTick>
 8003506:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003508:	e008      	b.n	800351c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800350a:	f7fd f8ff 	bl	800070c <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e012      	b.n	8003542 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800351c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1ef      	bne.n	800350a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800352a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003534:	4b05      	ldr	r3, [pc, #20]	@ (800354c <HAL_RCC_OscConfig+0x6e4>)
 8003536:	4013      	ands	r3, r2
 8003538:	60cb      	str	r3, [r1, #12]
 800353a:	e001      	b.n	8003540 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e000      	b.n	8003542 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3734      	adds	r7, #52	@ 0x34
 8003546:	46bd      	mov	sp, r7
 8003548:	bd90      	pop	{r4, r7, pc}
 800354a:	bf00      	nop
 800354c:	eefefffc 	.word	0xeefefffc

08003550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e12d      	b.n	80037c0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003564:	4b98      	ldr	r3, [pc, #608]	@ (80037c8 <HAL_RCC_ClockConfig+0x278>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	429a      	cmp	r2, r3
 8003570:	d91b      	bls.n	80035aa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003572:	4b95      	ldr	r3, [pc, #596]	@ (80037c8 <HAL_RCC_ClockConfig+0x278>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f023 0207 	bic.w	r2, r3, #7
 800357a:	4993      	ldr	r1, [pc, #588]	@ (80037c8 <HAL_RCC_ClockConfig+0x278>)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	4313      	orrs	r3, r2
 8003580:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003582:	f7fd f8c3 	bl	800070c <HAL_GetTick>
 8003586:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003588:	e008      	b.n	800359c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800358a:	f7fd f8bf 	bl	800070c <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d901      	bls.n	800359c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e111      	b.n	80037c0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800359c:	4b8a      	ldr	r3, [pc, #552]	@ (80037c8 <HAL_RCC_ClockConfig+0x278>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d1ef      	bne.n	800358a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d016      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff fb13 	bl	8002be6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035c0:	f7fd f8a4 	bl	800070c <HAL_GetTick>
 80035c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80035c6:	e008      	b.n	80035da <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035c8:	f7fd f8a0 	bl	800070c <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e0f2      	b.n	80037c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80035da:	f7ff fbe8 	bl	8002dae <LL_RCC_IsActiveFlag_HPRE>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0f1      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0320 	and.w	r3, r3, #32
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d016      	beq.n	800361e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff fb0a 	bl	8002c0e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035fa:	f7fd f887 	bl	800070c <HAL_GetTick>
 80035fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003600:	e008      	b.n	8003614 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003602:	f7fd f883 	bl	800070c <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e0d5      	b.n	80037c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003614:	f7ff fbdd 	bl	8002dd2 <LL_RCC_IsActiveFlag_C2HPRE>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f1      	beq.n	8003602 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003626:	2b00      	cmp	r3, #0
 8003628:	d016      	beq.n	8003658 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff fb03 	bl	8002c3a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003634:	f7fd f86a 	bl	800070c <HAL_GetTick>
 8003638:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800363a:	e008      	b.n	800364e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800363c:	f7fd f866 	bl	800070c <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d901      	bls.n	800364e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e0b8      	b.n	80037c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800364e:	f7ff fbd3 	bl	8002df8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0f1      	beq.n	800363c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	d016      	beq.n	8003692 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff fafd 	bl	8002c68 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800366e:	f7fd f84d 	bl	800070c <HAL_GetTick>
 8003672:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003674:	e008      	b.n	8003688 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003676:	f7fd f849 	bl	800070c <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e09b      	b.n	80037c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003688:	f7ff fbc9 	bl	8002e1e <LL_RCC_IsActiveFlag_PPRE1>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f1      	beq.n	8003676 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d017      	beq.n	80036ce <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff faf3 	bl	8002c90 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80036aa:	f7fd f82f 	bl	800070c <HAL_GetTick>
 80036ae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80036b2:	f7fd f82b 	bl	800070c <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e07d      	b.n	80037c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80036c4:	f7ff fbbd 	bl	8002e42 <LL_RCC_IsActiveFlag_PPRE2>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0f1      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d043      	beq.n	8003762 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d106      	bne.n	80036f0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80036e2:	f7ff f893 	bl	800280c <LL_RCC_HSE_IsReady>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d11e      	bne.n	800372a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e067      	b.n	80037c0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d106      	bne.n	8003706 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80036f8:	f7ff fb16 	bl	8002d28 <LL_RCC_PLL_IsReady>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d113      	bne.n	800372a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e05c      	b.n	80037c0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800370e:	f7ff f9fb 	bl	8002b08 <LL_RCC_MSI_IsReady>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d108      	bne.n	800372a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e051      	b.n	80037c0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800371c:	f7ff f8a6 	bl	800286c <LL_RCC_HSI_IsReady>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e04a      	b.n	80037c0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	4618      	mov	r0, r3
 8003730:	f7ff fa39 	bl	8002ba6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003734:	f7fc ffea 	bl	800070c <HAL_GetTick>
 8003738:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373a:	e00a      	b.n	8003752 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800373c:	f7fc ffe6 	bl	800070c <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800374a:	4293      	cmp	r3, r2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e036      	b.n	80037c0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003752:	f7ff fa3c 	bl	8002bce <LL_RCC_GetSysClkSource>
 8003756:	4602      	mov	r2, r0
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	429a      	cmp	r2, r3
 8003760:	d1ec      	bne.n	800373c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003762:	4b19      	ldr	r3, [pc, #100]	@ (80037c8 <HAL_RCC_ClockConfig+0x278>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d21b      	bcs.n	80037a8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003770:	4b15      	ldr	r3, [pc, #84]	@ (80037c8 <HAL_RCC_ClockConfig+0x278>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f023 0207 	bic.w	r2, r3, #7
 8003778:	4913      	ldr	r1, [pc, #76]	@ (80037c8 <HAL_RCC_ClockConfig+0x278>)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	4313      	orrs	r3, r2
 800377e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003780:	f7fc ffc4 	bl	800070c <HAL_GetTick>
 8003784:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003786:	e008      	b.n	800379a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003788:	f7fc ffc0 	bl	800070c <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e012      	b.n	80037c0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800379a:	4b0b      	ldr	r3, [pc, #44]	@ (80037c8 <HAL_RCC_ClockConfig+0x278>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0307 	and.w	r3, r3, #7
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d1ef      	bne.n	8003788 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80037a8:	f000 f87e 	bl	80038a8 <HAL_RCC_GetHCLKFreq>
 80037ac:	4603      	mov	r3, r0
 80037ae:	4a07      	ldr	r2, [pc, #28]	@ (80037cc <HAL_RCC_ClockConfig+0x27c>)
 80037b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80037b2:	f7fc ffb7 	bl	8000724 <HAL_GetTickPrio>
 80037b6:	4603      	mov	r3, r0
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fc ff59 	bl	8000670 <HAL_InitTick>
 80037be:	4603      	mov	r3, r0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	58004000 	.word	0x58004000
 80037cc:	20000008 	.word	0x20000008

080037d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d0:	b590      	push	{r4, r7, lr}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037d6:	f7ff f9fa 	bl	8002bce <LL_RCC_GetSysClkSource>
 80037da:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10a      	bne.n	80037f8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80037e2:	f7ff f9b6 	bl	8002b52 <LL_RCC_MSI_GetRange>
 80037e6:	4603      	mov	r3, r0
 80037e8:	091b      	lsrs	r3, r3, #4
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	4a2b      	ldr	r2, [pc, #172]	@ (800389c <HAL_RCC_GetSysClockFreq+0xcc>)
 80037f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	e04b      	b.n	8003890 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d102      	bne.n	8003804 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037fe:	4b28      	ldr	r3, [pc, #160]	@ (80038a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	e045      	b.n	8003890 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b08      	cmp	r3, #8
 8003808:	d10a      	bne.n	8003820 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800380a:	f7fe ffcf 	bl	80027ac <LL_RCC_HSE_IsEnabledDiv2>
 800380e:	4603      	mov	r3, r0
 8003810:	2b01      	cmp	r3, #1
 8003812:	d102      	bne.n	800381a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003814:	4b22      	ldr	r3, [pc, #136]	@ (80038a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	e03a      	b.n	8003890 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800381a:	4b22      	ldr	r3, [pc, #136]	@ (80038a4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800381c:	60fb      	str	r3, [r7, #12]
 800381e:	e037      	b.n	8003890 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003820:	f7ff fab9 	bl	8002d96 <LL_RCC_PLL_GetMainSource>
 8003824:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b02      	cmp	r3, #2
 800382a:	d003      	beq.n	8003834 <HAL_RCC_GetSysClockFreq+0x64>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	2b03      	cmp	r3, #3
 8003830:	d003      	beq.n	800383a <HAL_RCC_GetSysClockFreq+0x6a>
 8003832:	e00d      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003834:	4b1a      	ldr	r3, [pc, #104]	@ (80038a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003836:	60bb      	str	r3, [r7, #8]
        break;
 8003838:	e015      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800383a:	f7fe ffb7 	bl	80027ac <LL_RCC_HSE_IsEnabledDiv2>
 800383e:	4603      	mov	r3, r0
 8003840:	2b01      	cmp	r3, #1
 8003842:	d102      	bne.n	800384a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003844:	4b16      	ldr	r3, [pc, #88]	@ (80038a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003846:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003848:	e00d      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800384a:	4b16      	ldr	r3, [pc, #88]	@ (80038a4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800384c:	60bb      	str	r3, [r7, #8]
        break;
 800384e:	e00a      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003850:	f7ff f97f 	bl	8002b52 <LL_RCC_MSI_GetRange>
 8003854:	4603      	mov	r3, r0
 8003856:	091b      	lsrs	r3, r3, #4
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	4a0f      	ldr	r2, [pc, #60]	@ (800389c <HAL_RCC_GetSysClockFreq+0xcc>)
 800385e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003862:	60bb      	str	r3, [r7, #8]
        break;
 8003864:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003866:	f7ff fa71 	bl	8002d4c <LL_RCC_PLL_GetN>
 800386a:	4602      	mov	r2, r0
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	fb03 f402 	mul.w	r4, r3, r2
 8003872:	f7ff fa84 	bl	8002d7e <LL_RCC_PLL_GetDivider>
 8003876:	4603      	mov	r3, r0
 8003878:	091b      	lsrs	r3, r3, #4
 800387a:	3301      	adds	r3, #1
 800387c:	fbb4 f4f3 	udiv	r4, r4, r3
 8003880:	f7ff fa71 	bl	8002d66 <LL_RCC_PLL_GetR>
 8003884:	4603      	mov	r3, r0
 8003886:	0f5b      	lsrs	r3, r3, #29
 8003888:	3301      	adds	r3, #1
 800388a:	fbb4 f3f3 	udiv	r3, r4, r3
 800388e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003890:	68fb      	ldr	r3, [r7, #12]
}
 8003892:	4618      	mov	r0, r3
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	bd90      	pop	{r4, r7, pc}
 800389a:	bf00      	nop
 800389c:	08009d10 	.word	0x08009d10
 80038a0:	00f42400 	.word	0x00f42400
 80038a4:	01e84800 	.word	0x01e84800

080038a8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038a8:	b598      	push	{r3, r4, r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80038ac:	f7ff ff90 	bl	80037d0 <HAL_RCC_GetSysClockFreq>
 80038b0:	4604      	mov	r4, r0
 80038b2:	f7ff fa01 	bl	8002cb8 <LL_RCC_GetAHBPrescaler>
 80038b6:	4603      	mov	r3, r0
 80038b8:	091b      	lsrs	r3, r3, #4
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	4a03      	ldr	r2, [pc, #12]	@ (80038cc <HAL_RCC_GetHCLKFreq+0x24>)
 80038c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038c4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	bd98      	pop	{r3, r4, r7, pc}
 80038cc:	08009cd0 	.word	0x08009cd0

080038d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80038d0:	b590      	push	{r4, r7, lr}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2bb0      	cmp	r3, #176	@ 0xb0
 80038dc:	d903      	bls.n	80038e6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80038de:	4b15      	ldr	r3, [pc, #84]	@ (8003934 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80038e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	e007      	b.n	80038f6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	091b      	lsrs	r3, r3, #4
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	4a11      	ldr	r2, [pc, #68]	@ (8003934 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80038f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038f4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80038f6:	f7ff f9eb 	bl	8002cd0 <LL_RCC_GetAHB4Prescaler>
 80038fa:	4603      	mov	r3, r0
 80038fc:	091b      	lsrs	r3, r3, #4
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	4a0d      	ldr	r2, [pc, #52]	@ (8003938 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	fbb2 f3f3 	udiv	r3, r2, r3
 800390e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	4a0a      	ldr	r2, [pc, #40]	@ (800393c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003914:	fba2 2303 	umull	r2, r3, r2, r3
 8003918:	0c9c      	lsrs	r4, r3, #18
 800391a:	f7fe ff29 	bl	8002770 <HAL_PWREx_GetVoltageRange>
 800391e:	4603      	mov	r3, r0
 8003920:	4619      	mov	r1, r3
 8003922:	4620      	mov	r0, r4
 8003924:	f000 f80c 	bl	8003940 <RCC_SetFlashLatency>
 8003928:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800392a:	4618      	mov	r0, r3
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	bd90      	pop	{r4, r7, pc}
 8003932:	bf00      	nop
 8003934:	08009d10 	.word	0x08009d10
 8003938:	08009cd0 	.word	0x08009cd0
 800393c:	431bde83 	.word	0x431bde83

08003940 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003940:	b590      	push	{r4, r7, lr}
 8003942:	b093      	sub	sp, #76	@ 0x4c
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800394a:	4b37      	ldr	r3, [pc, #220]	@ (8003a28 <RCC_SetFlashLatency+0xe8>)
 800394c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8003950:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003952:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003956:	4a35      	ldr	r2, [pc, #212]	@ (8003a2c <RCC_SetFlashLatency+0xec>)
 8003958:	f107 031c 	add.w	r3, r7, #28
 800395c:	ca07      	ldmia	r2, {r0, r1, r2}
 800395e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003962:	4b33      	ldr	r3, [pc, #204]	@ (8003a30 <RCC_SetFlashLatency+0xf0>)
 8003964:	f107 040c 	add.w	r4, r7, #12
 8003968:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800396a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800396e:	2300      	movs	r3, #0
 8003970:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003978:	d11a      	bne.n	80039b0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800397a:	2300      	movs	r3, #0
 800397c:	643b      	str	r3, [r7, #64]	@ 0x40
 800397e:	e013      	b.n	80039a8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003980:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	3348      	adds	r3, #72	@ 0x48
 8003986:	443b      	add	r3, r7
 8003988:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	429a      	cmp	r2, r3
 8003990:	d807      	bhi.n	80039a2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003992:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	3348      	adds	r3, #72	@ 0x48
 8003998:	443b      	add	r3, r7
 800399a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800399e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80039a0:	e020      	b.n	80039e4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80039a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039a4:	3301      	adds	r3, #1
 80039a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80039a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d9e8      	bls.n	8003980 <RCC_SetFlashLatency+0x40>
 80039ae:	e019      	b.n	80039e4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80039b0:	2300      	movs	r3, #0
 80039b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039b4:	e013      	b.n	80039de <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80039b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	3348      	adds	r3, #72	@ 0x48
 80039bc:	443b      	add	r3, r7
 80039be:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d807      	bhi.n	80039d8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80039c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	3348      	adds	r3, #72	@ 0x48
 80039ce:	443b      	add	r3, r7
 80039d0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80039d4:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80039d6:	e005      	b.n	80039e4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80039d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039da:	3301      	adds	r3, #1
 80039dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d9e8      	bls.n	80039b6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80039e4:	4b13      	ldr	r3, [pc, #76]	@ (8003a34 <RCC_SetFlashLatency+0xf4>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f023 0207 	bic.w	r2, r3, #7
 80039ec:	4911      	ldr	r1, [pc, #68]	@ (8003a34 <RCC_SetFlashLatency+0xf4>)
 80039ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039f0:	4313      	orrs	r3, r2
 80039f2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80039f4:	f7fc fe8a 	bl	800070c <HAL_GetTick>
 80039f8:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80039fa:	e008      	b.n	8003a0e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80039fc:	f7fc fe86 	bl	800070c <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e007      	b.n	8003a1e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003a0e:	4b09      	ldr	r3, [pc, #36]	@ (8003a34 <RCC_SetFlashLatency+0xf4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d1ef      	bne.n	80039fc <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	374c      	adds	r7, #76	@ 0x4c
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd90      	pop	{r4, r7, pc}
 8003a26:	bf00      	nop
 8003a28:	08009c5c 	.word	0x08009c5c
 8003a2c:	08009c6c 	.word	0x08009c6c
 8003a30:	08009c78 	.word	0x08009c78
 8003a34:	58004000 	.word	0x58004000

08003a38 <LL_RCC_LSE_IsEnabled>:
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003a3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d101      	bne.n	8003a50 <LL_RCC_LSE_IsEnabled+0x18>
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e000      	b.n	8003a52 <LL_RCC_LSE_IsEnabled+0x1a>
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <LL_RCC_LSE_IsReady>:
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003a60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d101      	bne.n	8003a74 <LL_RCC_LSE_IsReady+0x18>
 8003a70:	2301      	movs	r3, #1
 8003a72:	e000      	b.n	8003a76 <LL_RCC_LSE_IsReady+0x1a>
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <LL_RCC_SetRFWKPClockSource>:
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003a88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a90:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <LL_RCC_SetSMPSClockSource>:
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003ab4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aba:	f023 0203 	bic.w	r2, r3, #3
 8003abe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <LL_RCC_SetSMPSPrescaler>:
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003adc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ae6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <LL_RCC_SetUSARTClockSource>:
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003b04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b0c:	f023 0203 	bic.w	r2, r3, #3
 8003b10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <LL_RCC_SetLPUARTClockSource>:
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b38:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <LL_RCC_SetI2CClockSource>:
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003b5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b60:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	091b      	lsrs	r3, r3, #4
 8003b68:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	401a      	ands	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003b78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <LL_RCC_SetLPTIMClockSource>:
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003b96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	0c1b      	lsrs	r3, r3, #16
 8003ba2:	041b      	lsls	r3, r3, #16
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	401a      	ands	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	041b      	lsls	r3, r3, #16
 8003bac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <LL_RCC_SetSAIClockSource>:
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003bca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bd2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003bd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <LL_RCC_SetRNGClockSource>:
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003bf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bfe:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003c02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <LL_RCC_SetCLK48ClockSource>:
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003c22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <LL_RCC_SetUSBClockSource>:
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b082      	sub	sp, #8
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7ff ffe3 	bl	8003c1a <LL_RCC_SetCLK48ClockSource>
}
 8003c54:	bf00      	nop
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <LL_RCC_SetADCClockSource>:
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003c64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c6c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003c70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <LL_RCC_SetRTCClockSource>:
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003c90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <LL_RCC_GetRTCClockSource>:
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003cb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <LL_RCC_ForceBackupDomainReset>:
{
 8003cce:	b480      	push	{r7}
 8003cd0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003cd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ce2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003ce6:	bf00      	nop
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003cf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cfc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003d08:	bf00      	nop
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <LL_RCC_PLLSAI1_Enable>:
{
 8003d12:	b480      	push	{r7}
 8003d14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003d16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d24:	6013      	str	r3, [r2, #0]
}
 8003d26:	bf00      	nop
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <LL_RCC_PLLSAI1_Disable>:
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003d34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d3e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d42:	6013      	str	r3, [r2, #0]
}
 8003d44:	bf00      	nop
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <LL_RCC_PLLSAI1_IsReady>:
{
 8003d4e:	b480      	push	{r7}
 8003d50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003d52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d60:	d101      	bne.n	8003d66 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b088      	sub	sp, #32
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003d7e:	2300      	movs	r3, #0
 8003d80:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d034      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d92:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d96:	d021      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003d98:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d9c:	d81b      	bhi.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003da2:	d01d      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003da4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003da8:	d815      	bhi.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00b      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003dae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003db2:	d110      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003db4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003dbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dc2:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003dc4:	e00d      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3304      	adds	r3, #4
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 f947 	bl	800405e <RCCEx_PLLSAI1_ConfigNP>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003dd4:	e005      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	77fb      	strb	r3, [r7, #31]
        break;
 8003dda:	e002      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003ddc:	bf00      	nop
 8003dde:	e000      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003de0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de2:	7ffb      	ldrb	r3, [r7, #31]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d105      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff fee8 	bl	8003bc2 <LL_RCC_SetSAIClockSource>
 8003df2:	e001      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df4:	7ffb      	ldrb	r3, [r7, #31]
 8003df6:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d046      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003e04:	f7ff ff56 	bl	8003cb4 <LL_RCC_GetRTCClockSource>
 8003e08:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d03c      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003e14:	f7fe fc9c 	bl	8002750 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d105      	bne.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff ff30 	bl	8003c88 <LL_RCC_SetRTCClockSource>
 8003e28:	e02e      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003e2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e32:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003e34:	f7ff ff4b 	bl	8003cce <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003e38:	f7ff ff5a 	bl	8003cf0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e46:	4313      	orrs	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003e4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003e54:	f7ff fdf0 	bl	8003a38 <LL_RCC_LSE_IsEnabled>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d114      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e5e:	f7fc fc55 	bl	800070c <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003e64:	e00b      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e66:	f7fc fc51 	bl	800070c <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d902      	bls.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	77fb      	strb	r3, [r7, #31]
              break;
 8003e7c:	e004      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003e7e:	f7ff fded 	bl	8003a5c <LL_RCC_LSE_IsReady>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d1ee      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003e88:	7ffb      	ldrb	r3, [r7, #31]
 8003e8a:	77bb      	strb	r3, [r7, #30]
 8003e8c:	e001      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8e:	7ffb      	ldrb	r3, [r7, #31]
 8003e90:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d004      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7ff fe2a 	bl	8003afc <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d004      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff fe35 	bl	8003b28 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0310 	and.w	r3, r3, #16
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d004      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff fe5d 	bl	8003b8e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0320 	and.w	r3, r3, #32
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d004      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff fe52 	bl	8003b8e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0304 	and.w	r3, r3, #4
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d004      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7ff fe2a 	bl	8003b54 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d004      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff fe1f 	bl	8003b54 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d022      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff fe8d 	bl	8003c46 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f34:	d107      	bne.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003f36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f40:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f44:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f4e:	d10b      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	3304      	adds	r3, #4
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 f8dd 	bl	8004114 <RCCEx_PLLSAI1_ConfigNQ>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003f5e:	7ffb      	ldrb	r3, [r7, #31]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003f64:	7ffb      	ldrb	r3, [r7, #31]
 8003f66:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d02b      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f7c:	d008      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f86:	d003      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d105      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff fe2a 	bl	8003bee <LL_RCC_SetRNGClockSource>
 8003f9a:	e00a      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	f7ff fe21 	bl	8003bee <LL_RCC_SetRNGClockSource>
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f7ff fe34 	bl	8003c1a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003fba:	d107      	bne.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003fbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003fc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d022      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff fe3d 	bl	8003c5c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fea:	d107      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003fec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ff6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ffa:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004000:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004004:	d10b      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	3304      	adds	r3, #4
 800400a:	4618      	mov	r0, r3
 800400c:	f000 f8dd 	bl	80041ca <RCCEx_PLLSAI1_ConfigNR>
 8004010:	4603      	mov	r3, r0
 8004012:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004014:	7ffb      	ldrb	r3, [r7, #31]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800401a:	7ffb      	ldrb	r3, [r7, #31]
 800401c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d004      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff fd26 	bl	8003a80 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d009      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff fd45 	bl	8003ad4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff fd2c 	bl	8003aac <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004054:	7fbb      	ldrb	r3, [r7, #30]
}
 8004056:	4618      	mov	r0, r3
 8004058:	3720      	adds	r7, #32
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b084      	sub	sp, #16
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004066:	2300      	movs	r3, #0
 8004068:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800406a:	f7ff fe61 	bl	8003d30 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800406e:	f7fc fb4d 	bl	800070c <HAL_GetTick>
 8004072:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004074:	e009      	b.n	800408a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004076:	f7fc fb49 	bl	800070c <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d902      	bls.n	800408a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	73fb      	strb	r3, [r7, #15]
      break;
 8004088:	e004      	b.n	8004094 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800408a:	f7ff fe60 	bl	8003d4e <LL_RCC_PLLSAI1_IsReady>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1f0      	bne.n	8004076 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004094:	7bfb      	ldrb	r3, [r7, #15]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d137      	bne.n	800410a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800409a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	021b      	lsls	r3, r3, #8
 80040aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80040ae:	4313      	orrs	r3, r2
 80040b0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80040b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80040c4:	4313      	orrs	r3, r2
 80040c6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80040c8:	f7ff fe23 	bl	8003d12 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040cc:	f7fc fb1e 	bl	800070c <HAL_GetTick>
 80040d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80040d2:	e009      	b.n	80040e8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040d4:	f7fc fb1a 	bl	800070c <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d902      	bls.n	80040e8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	73fb      	strb	r3, [r7, #15]
        break;
 80040e6:	e004      	b.n	80040f2 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80040e8:	f7ff fe31 	bl	8003d4e <LL_RCC_PLLSAI1_IsReady>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d1f0      	bne.n	80040d4 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d108      	bne.n	800410a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80040f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040fc:	691a      	ldr	r2, [r3, #16]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004106:	4313      	orrs	r3, r2
 8004108:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800410a:	7bfb      	ldrb	r3, [r7, #15]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800411c:	2300      	movs	r3, #0
 800411e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004120:	f7ff fe06 	bl	8003d30 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004124:	f7fc faf2 	bl	800070c <HAL_GetTick>
 8004128:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800412a:	e009      	b.n	8004140 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800412c:	f7fc faee 	bl	800070c <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d902      	bls.n	8004140 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	73fb      	strb	r3, [r7, #15]
      break;
 800413e:	e004      	b.n	800414a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004140:	f7ff fe05 	bl	8003d4e <LL_RCC_PLLSAI1_IsReady>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1f0      	bne.n	800412c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800414a:	7bfb      	ldrb	r3, [r7, #15]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d137      	bne.n	80041c0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004150:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	021b      	lsls	r3, r3, #8
 8004160:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004164:	4313      	orrs	r3, r2
 8004166:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004168:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800417a:	4313      	orrs	r3, r2
 800417c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800417e:	f7ff fdc8 	bl	8003d12 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004182:	f7fc fac3 	bl	800070c <HAL_GetTick>
 8004186:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004188:	e009      	b.n	800419e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800418a:	f7fc fabf 	bl	800070c <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d902      	bls.n	800419e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	73fb      	strb	r3, [r7, #15]
        break;
 800419c:	e004      	b.n	80041a8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800419e:	f7ff fdd6 	bl	8003d4e <LL_RCC_PLLSAI1_IsReady>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d1f0      	bne.n	800418a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d108      	bne.n	80041c0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80041ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041b2:	691a      	ldr	r2, [r3, #16]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80041bc:	4313      	orrs	r3, r2
 80041be:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b084      	sub	sp, #16
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80041d6:	f7ff fdab 	bl	8003d30 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80041da:	f7fc fa97 	bl	800070c <HAL_GetTick>
 80041de:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80041e0:	e009      	b.n	80041f6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041e2:	f7fc fa93 	bl	800070c <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d902      	bls.n	80041f6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	73fb      	strb	r3, [r7, #15]
      break;
 80041f4:	e004      	b.n	8004200 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80041f6:	f7ff fdaa 	bl	8003d4e <LL_RCC_PLLSAI1_IsReady>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1f0      	bne.n	80041e2 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004200:	7bfb      	ldrb	r3, [r7, #15]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d137      	bne.n	8004276 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004206:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800421a:	4313      	orrs	r3, r2
 800421c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800421e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004230:	4313      	orrs	r3, r2
 8004232:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004234:	f7ff fd6d 	bl	8003d12 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004238:	f7fc fa68 	bl	800070c <HAL_GetTick>
 800423c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800423e:	e009      	b.n	8004254 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004240:	f7fc fa64 	bl	800070c <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d902      	bls.n	8004254 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	73fb      	strb	r3, [r7, #15]
        break;
 8004252:	e004      	b.n	800425e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004254:	f7ff fd7b 	bl	8003d4e <LL_RCC_PLLSAI1_IsReady>
 8004258:	4603      	mov	r3, r0
 800425a:	2b01      	cmp	r3, #1
 800425c:	d1f0      	bne.n	8004240 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d108      	bne.n	8004276 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004264:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004268:	691a      	ldr	r2, [r3, #16]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004272:	4313      	orrs	r3, r2
 8004274:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004276:	7bfb      	ldrb	r3, [r7, #15]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004290:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8004294:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	b29a      	uxth	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b085      	sub	sp, #20
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042b6:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80042ba:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	43db      	mvns	r3, r3
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	4013      	ands	r3, r2
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	1d3b      	adds	r3, r7, #4
 80042ee:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004320:	b480      	push	{r7}
 8004322:	b09d      	sub	sp, #116	@ 0x74
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	b29b      	uxth	r3, r3
 800433e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004346:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	78db      	ldrb	r3, [r3, #3]
 800434e:	2b03      	cmp	r3, #3
 8004350:	d81f      	bhi.n	8004392 <USB_ActivateEndpoint+0x72>
 8004352:	a201      	add	r2, pc, #4	@ (adr r2, 8004358 <USB_ActivateEndpoint+0x38>)
 8004354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004358:	08004369 	.word	0x08004369
 800435c:	08004385 	.word	0x08004385
 8004360:	0800439b 	.word	0x0800439b
 8004364:	08004377 	.word	0x08004377
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004368:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800436c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004370:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004374:	e012      	b.n	800439c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004376:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800437a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800437e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004382:	e00b      	b.n	800439c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004384:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004388:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800438c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004390:	e004      	b.n	800439c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004398:	e000      	b.n	800439c <USB_ActivateEndpoint+0x7c>
      break;
 800439a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	441a      	add	r2, r3
 80043a6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80043aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	881b      	ldrh	r3, [r3, #0]
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	b21b      	sxth	r3, r3
 80043ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043d6:	b21a      	sxth	r2, r3
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	b21b      	sxth	r3, r3
 80043de:	4313      	orrs	r3, r2
 80043e0:	b21b      	sxth	r3, r3
 80043e2:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	441a      	add	r2, r3
 80043f0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80043f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004400:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004404:	b29b      	uxth	r3, r3
 8004406:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	7b1b      	ldrb	r3, [r3, #12]
 800440c:	2b00      	cmp	r3, #0
 800440e:	f040 8178 	bne.w	8004702 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	785b      	ldrb	r3, [r3, #1]
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 8084 	beq.w	8004524 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	61bb      	str	r3, [r7, #24]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004426:	b29b      	uxth	r3, r3
 8004428:	461a      	mov	r2, r3
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	4413      	add	r3, r2
 800442e:	61bb      	str	r3, [r7, #24]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	00da      	lsls	r2, r3, #3
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	4413      	add	r3, r2
 800443a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	88db      	ldrh	r3, [r3, #6]
 8004444:	085b      	lsrs	r3, r3, #1
 8004446:	b29b      	uxth	r3, r3
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	881b      	ldrh	r3, [r3, #0]
 800445c:	827b      	strh	r3, [r7, #18]
 800445e:	8a7b      	ldrh	r3, [r7, #18]
 8004460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004464:	2b00      	cmp	r3, #0
 8004466:	d01b      	beq.n	80044a0 <USB_ActivateEndpoint+0x180>
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	b29b      	uxth	r3, r3
 8004476:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800447a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800447e:	823b      	strh	r3, [r7, #16]
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	441a      	add	r2, r3
 800448a:	8a3b      	ldrh	r3, [r7, #16]
 800448c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004490:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004494:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004498:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800449c:	b29b      	uxth	r3, r3
 800449e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	78db      	ldrb	r3, [r3, #3]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d020      	beq.n	80044ea <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044be:	81bb      	strh	r3, [r7, #12]
 80044c0:	89bb      	ldrh	r3, [r7, #12]
 80044c2:	f083 0320 	eor.w	r3, r3, #32
 80044c6:	81bb      	strh	r3, [r7, #12]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	441a      	add	r2, r3
 80044d2:	89bb      	ldrh	r3, [r7, #12]
 80044d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	8013      	strh	r3, [r2, #0]
 80044e8:	e2d5      	b.n	8004a96 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	881b      	ldrh	r3, [r3, #0]
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004500:	81fb      	strh	r3, [r7, #14]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	441a      	add	r2, r3
 800450c:	89fb      	ldrh	r3, [r7, #14]
 800450e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004512:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004516:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800451a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800451e:	b29b      	uxth	r3, r3
 8004520:	8013      	strh	r3, [r2, #0]
 8004522:	e2b8      	b.n	8004a96 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	633b      	str	r3, [r7, #48]	@ 0x30
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800452e:	b29b      	uxth	r3, r3
 8004530:	461a      	mov	r2, r3
 8004532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004534:	4413      	add	r3, r2
 8004536:	633b      	str	r3, [r7, #48]	@ 0x30
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	00da      	lsls	r2, r3, #3
 800453e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004540:	4413      	add	r3, r2
 8004542:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004546:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	88db      	ldrh	r3, [r3, #6]
 800454c:	085b      	lsrs	r3, r3, #1
 800454e:	b29b      	uxth	r3, r3
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	b29a      	uxth	r2, r3
 8004554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004556:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004562:	b29b      	uxth	r3, r3
 8004564:	461a      	mov	r2, r3
 8004566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004568:	4413      	add	r3, r2
 800456a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	00da      	lsls	r2, r3, #3
 8004572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004574:	4413      	add	r3, r2
 8004576:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800457a:	627b      	str	r3, [r7, #36]	@ 0x24
 800457c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457e:	881b      	ldrh	r3, [r3, #0]
 8004580:	b29b      	uxth	r3, r3
 8004582:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004586:	b29a      	uxth	r2, r3
 8004588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458a:	801a      	strh	r2, [r3, #0]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	2b3e      	cmp	r3, #62	@ 0x3e
 8004592:	d91d      	bls.n	80045d0 <USB_ActivateEndpoint+0x2b0>
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	095b      	lsrs	r3, r3, #5
 800459a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	f003 031f 	and.w	r3, r3, #31
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d102      	bne.n	80045ae <USB_ActivateEndpoint+0x28e>
 80045a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045aa:	3b01      	subs	r3, #1
 80045ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	029b      	lsls	r3, r3, #10
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	4313      	orrs	r3, r2
 80045be:	b29b      	uxth	r3, r3
 80045c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045cc:	801a      	strh	r2, [r3, #0]
 80045ce:	e026      	b.n	800461e <USB_ActivateEndpoint+0x2fe>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10a      	bne.n	80045ee <USB_ActivateEndpoint+0x2ce>
 80045d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	b29b      	uxth	r3, r3
 80045de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ea:	801a      	strh	r2, [r3, #0]
 80045ec:	e017      	b.n	800461e <USB_ActivateEndpoint+0x2fe>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	085b      	lsrs	r3, r3, #1
 80045f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d002      	beq.n	8004608 <USB_ActivateEndpoint+0x2e8>
 8004602:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004604:	3301      	adds	r3, #1
 8004606:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460a:	881b      	ldrh	r3, [r3, #0]
 800460c:	b29a      	uxth	r2, r3
 800460e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004610:	b29b      	uxth	r3, r3
 8004612:	029b      	lsls	r3, r3, #10
 8004614:	b29b      	uxth	r3, r3
 8004616:	4313      	orrs	r3, r2
 8004618:	b29a      	uxth	r2, r3
 800461a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	881b      	ldrh	r3, [r3, #0]
 800462a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800462c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800462e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d01b      	beq.n	800466e <USB_ActivateEndpoint+0x34e>
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4413      	add	r3, r2
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	b29b      	uxth	r3, r3
 8004644:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004648:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800464c:	843b      	strh	r3, [r7, #32]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	441a      	add	r2, r3
 8004658:	8c3b      	ldrh	r3, [r7, #32]
 800465a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800465e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004662:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800466a:	b29b      	uxth	r3, r3
 800466c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d124      	bne.n	80046c0 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	881b      	ldrh	r3, [r3, #0]
 8004682:	b29b      	uxth	r3, r3
 8004684:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004688:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800468c:	83bb      	strh	r3, [r7, #28]
 800468e:	8bbb      	ldrh	r3, [r7, #28]
 8004690:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004694:	83bb      	strh	r3, [r7, #28]
 8004696:	8bbb      	ldrh	r3, [r7, #28]
 8004698:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800469c:	83bb      	strh	r3, [r7, #28]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	441a      	add	r2, r3
 80046a8:	8bbb      	ldrh	r3, [r7, #28]
 80046aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	8013      	strh	r3, [r2, #0]
 80046be:	e1ea      	b.n	8004a96 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	881b      	ldrh	r3, [r3, #0]
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046d6:	83fb      	strh	r3, [r7, #30]
 80046d8:	8bfb      	ldrh	r3, [r7, #30]
 80046da:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80046de:	83fb      	strh	r3, [r7, #30]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	441a      	add	r2, r3
 80046ea:	8bfb      	ldrh	r3, [r7, #30]
 80046ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	8013      	strh	r3, [r2, #0]
 8004700:	e1c9      	b.n	8004a96 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	78db      	ldrb	r3, [r3, #3]
 8004706:	2b02      	cmp	r3, #2
 8004708:	d11e      	bne.n	8004748 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	881b      	ldrh	r3, [r3, #0]
 8004716:	b29b      	uxth	r3, r3
 8004718:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800471c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004720:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	441a      	add	r2, r3
 800472e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004732:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004736:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800473a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800473e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004742:	b29b      	uxth	r3, r3
 8004744:	8013      	strh	r3, [r2, #0]
 8004746:	e01d      	b.n	8004784 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	881b      	ldrh	r3, [r3, #0]
 8004754:	b29b      	uxth	r3, r3
 8004756:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800475a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800475e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	441a      	add	r2, r3
 800476c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004770:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004774:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004778:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800477c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004780:	b29b      	uxth	r3, r3
 8004782:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800478e:	b29b      	uxth	r3, r3
 8004790:	461a      	mov	r2, r3
 8004792:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004794:	4413      	add	r3, r2
 8004796:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	00da      	lsls	r2, r3, #3
 800479e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047a0:	4413      	add	r3, r2
 80047a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80047a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	891b      	ldrh	r3, [r3, #8]
 80047ac:	085b      	lsrs	r3, r3, #1
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047b6:	801a      	strh	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	461a      	mov	r2, r3
 80047c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047c8:	4413      	add	r3, r2
 80047ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	00da      	lsls	r2, r3, #3
 80047d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047d4:	4413      	add	r3, r2
 80047d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80047da:	653b      	str	r3, [r7, #80]	@ 0x50
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	895b      	ldrh	r3, [r3, #10]
 80047e0:	085b      	lsrs	r3, r3, #1
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047ea:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	785b      	ldrb	r3, [r3, #1]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f040 8093 	bne.w	800491c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004806:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800480a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d01b      	beq.n	800484a <USB_ActivateEndpoint+0x52a>
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	b29b      	uxth	r3, r3
 8004820:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004824:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004828:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	441a      	add	r2, r3
 8004834:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004836:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800483a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800483e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004842:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004846:	b29b      	uxth	r3, r3
 8004848:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	881b      	ldrh	r3, [r3, #0]
 8004856:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004858:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800485a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800485e:	2b00      	cmp	r3, #0
 8004860:	d01b      	beq.n	800489a <USB_ActivateEndpoint+0x57a>
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	b29b      	uxth	r3, r3
 8004870:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004874:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004878:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	441a      	add	r2, r3
 8004884:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004886:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800488a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800488e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004892:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004896:	b29b      	uxth	r3, r3
 8004898:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	881b      	ldrh	r3, [r3, #0]
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048b0:	873b      	strh	r3, [r7, #56]	@ 0x38
 80048b2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80048b4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80048b8:	873b      	strh	r3, [r7, #56]	@ 0x38
 80048ba:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80048bc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80048c0:	873b      	strh	r3, [r7, #56]	@ 0x38
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	441a      	add	r2, r3
 80048cc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80048ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048de:	b29b      	uxth	r3, r3
 80048e0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4413      	add	r3, r2
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048f8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	441a      	add	r2, r3
 8004904:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004906:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800490a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800490e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004916:	b29b      	uxth	r3, r3
 8004918:	8013      	strh	r3, [r2, #0]
 800491a:	e0bc      	b.n	8004a96 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	881b      	ldrh	r3, [r3, #0]
 8004928:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800492c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004930:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d01d      	beq.n	8004974 <USB_ActivateEndpoint+0x654>
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	881b      	ldrh	r3, [r3, #0]
 8004944:	b29b      	uxth	r3, r3
 8004946:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800494a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800494e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	441a      	add	r2, r3
 800495c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004960:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004964:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004968:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800496c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004970:	b29b      	uxth	r3, r3
 8004972:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	4413      	add	r3, r2
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004984:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800498c:	2b00      	cmp	r3, #0
 800498e:	d01d      	beq.n	80049cc <USB_ActivateEndpoint+0x6ac>
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	881b      	ldrh	r3, [r3, #0]
 800499c:	b29b      	uxth	r3, r3
 800499e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049a6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	441a      	add	r2, r3
 80049b4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80049b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	78db      	ldrb	r3, [r3, #3]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d024      	beq.n	8004a1e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049ea:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80049ee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80049f2:	f083 0320 	eor.w	r3, r3, #32
 80049f6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	441a      	add	r2, r3
 8004a04:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004a08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	8013      	strh	r3, [r2, #0]
 8004a1c:	e01d      	b.n	8004a5a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	881b      	ldrh	r3, [r3, #0]
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a34:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	441a      	add	r2, r3
 8004a42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004a46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	881b      	ldrh	r3, [r3, #0]
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a70:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	441a      	add	r2, r3
 8004a7e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004a82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004a96:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3774      	adds	r7, #116	@ 0x74
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop

08004aa8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b08d      	sub	sp, #52	@ 0x34
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	7b1b      	ldrb	r3, [r3, #12]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f040 808e 	bne.w	8004bd8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	785b      	ldrb	r3, [r3, #1]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d044      	beq.n	8004b4e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	81bb      	strh	r3, [r7, #12]
 8004ad2:	89bb      	ldrh	r3, [r7, #12]
 8004ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d01b      	beq.n	8004b14 <USB_DeactivateEndpoint+0x6c>
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004af2:	817b      	strh	r3, [r7, #10]
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	441a      	add	r2, r3
 8004afe:	897b      	ldrh	r3, [r7, #10]
 8004b00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b0c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	881b      	ldrh	r3, [r3, #0]
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b2a:	813b      	strh	r3, [r7, #8]
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	441a      	add	r2, r3
 8004b36:	893b      	ldrh	r3, [r7, #8]
 8004b38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	8013      	strh	r3, [r2, #0]
 8004b4c:	e192      	b.n	8004e74 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	827b      	strh	r3, [r7, #18]
 8004b5c:	8a7b      	ldrh	r3, [r7, #18]
 8004b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d01b      	beq.n	8004b9e <USB_DeactivateEndpoint+0xf6>
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b7c:	823b      	strh	r3, [r7, #16]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	441a      	add	r2, r3
 8004b88:	8a3b      	ldrh	r3, [r7, #16]
 8004b8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bb4:	81fb      	strh	r3, [r7, #14]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	441a      	add	r2, r3
 8004bc0:	89fb      	ldrh	r3, [r7, #14]
 8004bc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	8013      	strh	r3, [r2, #0]
 8004bd6:	e14d      	b.n	8004e74 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	785b      	ldrb	r3, [r3, #1]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f040 80a5 	bne.w	8004d2c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4413      	add	r3, r2
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	843b      	strh	r3, [r7, #32]
 8004bf0:	8c3b      	ldrh	r3, [r7, #32]
 8004bf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d01b      	beq.n	8004c32 <USB_DeactivateEndpoint+0x18a>
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	881b      	ldrh	r3, [r3, #0]
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c10:	83fb      	strh	r3, [r7, #30]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	441a      	add	r2, r3
 8004c1c:	8bfb      	ldrh	r3, [r7, #30]
 8004c1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c26:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	881b      	ldrh	r3, [r3, #0]
 8004c3e:	83bb      	strh	r3, [r7, #28]
 8004c40:	8bbb      	ldrh	r3, [r7, #28]
 8004c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d01b      	beq.n	8004c82 <USB_DeactivateEndpoint+0x1da>
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c60:	837b      	strh	r3, [r7, #26]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	441a      	add	r2, r3
 8004c6c:	8b7b      	ldrh	r3, [r7, #26]
 8004c6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c7a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c98:	833b      	strh	r3, [r7, #24]
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	441a      	add	r2, r3
 8004ca4:	8b3b      	ldrh	r3, [r7, #24]
 8004ca6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004caa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cb2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4413      	add	r3, r2
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ccc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cd0:	82fb      	strh	r3, [r7, #22]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	441a      	add	r2, r3
 8004cdc:	8afb      	ldrh	r3, [r7, #22]
 8004cde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ce2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ce6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d08:	82bb      	strh	r3, [r7, #20]
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	441a      	add	r2, r3
 8004d14:	8abb      	ldrh	r3, [r7, #20]
 8004d16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	8013      	strh	r3, [r2, #0]
 8004d2a:	e0a3      	b.n	8004e74 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	881b      	ldrh	r3, [r3, #0]
 8004d38:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004d3a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004d3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d01b      	beq.n	8004d7c <USB_DeactivateEndpoint+0x2d4>
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	881b      	ldrh	r3, [r3, #0]
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d5a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	441a      	add	r2, r3
 8004d66:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004d68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	881b      	ldrh	r3, [r3, #0]
 8004d88:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004d8a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d01b      	beq.n	8004dcc <USB_DeactivateEndpoint+0x324>
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004daa:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	441a      	add	r2, r3
 8004db6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004db8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dc4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004de2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	441a      	add	r2, r3
 8004dee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004df0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004df4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004df8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004dfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	881b      	ldrh	r3, [r3, #0]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e1a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	441a      	add	r2, r3
 8004e26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	881b      	ldrh	r3, [r3, #0]
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e52:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	441a      	add	r2, r3
 8004e5e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004e60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3734      	adds	r7, #52	@ 0x34
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b0c2      	sub	sp, #264	@ 0x108
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e90:	6018      	str	r0, [r3, #0]
 8004e92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e9a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ea0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	785b      	ldrb	r3, [r3, #1]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	f040 86b7 	bne.w	8005c1c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004eae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	699a      	ldr	r2, [r3, #24]
 8004eba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ebe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d908      	bls.n	8004edc <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ece:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004eda:	e007      	b.n	8004eec <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004edc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ee0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004eec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ef0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	7b1b      	ldrb	r3, [r3, #12]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d13a      	bne.n	8004f72 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6959      	ldr	r1, [r3, #20]
 8004f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	88da      	ldrh	r2, [r3, #6]
 8004f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004f1e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004f22:	6800      	ldr	r0, [r0, #0]
 8004f24:	f001 fc98 	bl	8006858 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004f28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	613b      	str	r3, [r7, #16]
 8004f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	461a      	mov	r2, r3
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	4413      	add	r3, r2
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	00da      	lsls	r2, r3, #3
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	801a      	strh	r2, [r3, #0]
 8004f6e:	f000 be1f 	b.w	8005bb0 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	78db      	ldrb	r3, [r3, #3]
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	f040 8462 	bne.w	8005848 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004f84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6a1a      	ldr	r2, [r3, #32]
 8004f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	f240 83df 	bls.w	8005760 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fa6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fc8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004fcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	441a      	add	r2, r3
 8004fe6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004fea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ff2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004ff6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004ffe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005002:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6a1a      	ldr	r2, [r3, #32]
 800500a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800500e:	1ad2      	subs	r2, r2, r3
 8005010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005014:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800501c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005020:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800502a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	b29b      	uxth	r3, r3
 800503a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 81c7 	beq.w	80053d2 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005048:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005054:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	785b      	ldrb	r3, [r3, #1]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d177      	bne.n	8005150 <USB_EPStartXfer+0x2ce>
 8005060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005064:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800506c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005070:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800507a:	b29b      	uxth	r3, r3
 800507c:	461a      	mov	r2, r3
 800507e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005080:	4413      	add	r3, r2
 8005082:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005088:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	00da      	lsls	r2, r3, #3
 8005092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005094:	4413      	add	r3, r2
 8005096:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800509a:	627b      	str	r3, [r7, #36]	@ 0x24
 800509c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050aa:	801a      	strh	r2, [r3, #0]
 80050ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80050b2:	d921      	bls.n	80050f8 <USB_EPStartXfer+0x276>
 80050b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050b8:	095b      	lsrs	r3, r3, #5
 80050ba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80050be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050c2:	f003 031f 	and.w	r3, r3, #31
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d104      	bne.n	80050d4 <USB_EPStartXfer+0x252>
 80050ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80050ce:	3b01      	subs	r3, #1
 80050d0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80050d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d6:	881b      	ldrh	r3, [r3, #0]
 80050d8:	b29a      	uxth	r2, r3
 80050da:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80050de:	b29b      	uxth	r3, r3
 80050e0:	029b      	lsls	r3, r3, #10
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	4313      	orrs	r3, r2
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f4:	801a      	strh	r2, [r3, #0]
 80050f6:	e050      	b.n	800519a <USB_EPStartXfer+0x318>
 80050f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10a      	bne.n	8005116 <USB_EPStartXfer+0x294>
 8005100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005102:	881b      	ldrh	r3, [r3, #0]
 8005104:	b29b      	uxth	r3, r3
 8005106:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800510a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800510e:	b29a      	uxth	r2, r3
 8005110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005112:	801a      	strh	r2, [r3, #0]
 8005114:	e041      	b.n	800519a <USB_EPStartXfer+0x318>
 8005116:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800511a:	085b      	lsrs	r3, r3, #1
 800511c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	d004      	beq.n	8005136 <USB_EPStartXfer+0x2b4>
 800512c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005130:	3301      	adds	r3, #1
 8005132:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	b29a      	uxth	r2, r3
 800513c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005140:	b29b      	uxth	r3, r3
 8005142:	029b      	lsls	r3, r3, #10
 8005144:	b29b      	uxth	r3, r3
 8005146:	4313      	orrs	r3, r2
 8005148:	b29a      	uxth	r2, r3
 800514a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514c:	801a      	strh	r2, [r3, #0]
 800514e:	e024      	b.n	800519a <USB_EPStartXfer+0x318>
 8005150:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005154:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	785b      	ldrb	r3, [r3, #1]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d11c      	bne.n	800519a <USB_EPStartXfer+0x318>
 8005160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005164:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800516e:	b29b      	uxth	r3, r3
 8005170:	461a      	mov	r2, r3
 8005172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005174:	4413      	add	r3, r2
 8005176:	633b      	str	r3, [r7, #48]	@ 0x30
 8005178:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800517c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	00da      	lsls	r2, r3, #3
 8005186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005188:	4413      	add	r3, r2
 800518a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800518e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005194:	b29a      	uxth	r2, r3
 8005196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005198:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800519a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800519e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	895b      	ldrh	r3, [r3, #10]
 80051a6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6959      	ldr	r1, [r3, #20]
 80051b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80051c0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80051c4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80051c8:	6800      	ldr	r0, [r0, #0]
 80051ca:	f001 fb45 	bl	8006858 <USB_WritePMA>
            ep->xfer_buff += len;
 80051ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	695a      	ldr	r2, [r3, #20]
 80051da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051de:	441a      	add	r2, r3
 80051e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80051ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6a1a      	ldr	r2, [r3, #32]
 80051f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	429a      	cmp	r2, r3
 8005206:	d90f      	bls.n	8005228 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800520c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6a1a      	ldr	r2, [r3, #32]
 8005214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005218:	1ad2      	subs	r2, r2, r3
 800521a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800521e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	621a      	str	r2, [r3, #32]
 8005226:	e00e      	b.n	8005246 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800522c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800523c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2200      	movs	r2, #0
 8005244:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800524a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	785b      	ldrb	r3, [r3, #1]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d177      	bne.n	8005346 <USB_EPStartXfer+0x4c4>
 8005256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800525a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	61bb      	str	r3, [r7, #24]
 8005262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005266:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005270:	b29b      	uxth	r3, r3
 8005272:	461a      	mov	r2, r3
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	4413      	add	r3, r2
 8005278:	61bb      	str	r3, [r7, #24]
 800527a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800527e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	00da      	lsls	r2, r3, #3
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	4413      	add	r3, r2
 800528c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005290:	617b      	str	r3, [r7, #20]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	881b      	ldrh	r3, [r3, #0]
 8005296:	b29b      	uxth	r3, r3
 8005298:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800529c:	b29a      	uxth	r2, r3
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	801a      	strh	r2, [r3, #0]
 80052a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80052a8:	d921      	bls.n	80052ee <USB_EPStartXfer+0x46c>
 80052aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ae:	095b      	lsrs	r3, r3, #5
 80052b0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80052b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052b8:	f003 031f 	and.w	r3, r3, #31
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d104      	bne.n	80052ca <USB_EPStartXfer+0x448>
 80052c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052c4:	3b01      	subs	r3, #1
 80052c6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	029b      	lsls	r3, r3, #10
 80052d8:	b29b      	uxth	r3, r3
 80052da:	4313      	orrs	r3, r2
 80052dc:	b29b      	uxth	r3, r3
 80052de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	801a      	strh	r2, [r3, #0]
 80052ec:	e056      	b.n	800539c <USB_EPStartXfer+0x51a>
 80052ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10a      	bne.n	800530c <USB_EPStartXfer+0x48a>
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	881b      	ldrh	r3, [r3, #0]
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005304:	b29a      	uxth	r2, r3
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	801a      	strh	r2, [r3, #0]
 800530a:	e047      	b.n	800539c <USB_EPStartXfer+0x51a>
 800530c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005310:	085b      	lsrs	r3, r3, #1
 8005312:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	d004      	beq.n	800532c <USB_EPStartXfer+0x4aa>
 8005322:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005326:	3301      	adds	r3, #1
 8005328:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	b29a      	uxth	r2, r3
 8005332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005336:	b29b      	uxth	r3, r3
 8005338:	029b      	lsls	r3, r3, #10
 800533a:	b29b      	uxth	r3, r3
 800533c:	4313      	orrs	r3, r2
 800533e:	b29a      	uxth	r2, r3
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	801a      	strh	r2, [r3, #0]
 8005344:	e02a      	b.n	800539c <USB_EPStartXfer+0x51a>
 8005346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800534a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	785b      	ldrb	r3, [r3, #1]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d122      	bne.n	800539c <USB_EPStartXfer+0x51a>
 8005356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800535a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	623b      	str	r3, [r7, #32]
 8005362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005366:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005370:	b29b      	uxth	r3, r3
 8005372:	461a      	mov	r2, r3
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	4413      	add	r3, r2
 8005378:	623b      	str	r3, [r7, #32]
 800537a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800537e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	00da      	lsls	r2, r3, #3
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	4413      	add	r3, r2
 800538c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005390:	61fb      	str	r3, [r7, #28]
 8005392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005396:	b29a      	uxth	r2, r3
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800539c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	891b      	ldrh	r3, [r3, #8]
 80053a8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6959      	ldr	r1, [r3, #20]
 80053b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053bc:	b29b      	uxth	r3, r3
 80053be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80053c2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80053c6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80053ca:	6800      	ldr	r0, [r0, #0]
 80053cc:	f001 fa44 	bl	8006858 <USB_WritePMA>
 80053d0:	e3ee      	b.n	8005bb0 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80053d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	785b      	ldrb	r3, [r3, #1]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d177      	bne.n	80054d2 <USB_EPStartXfer+0x650>
 80053e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	461a      	mov	r2, r3
 8005400:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005402:	4413      	add	r3, r2
 8005404:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800540a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	00da      	lsls	r2, r3, #3
 8005414:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005416:	4413      	add	r3, r2
 8005418:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800541c:	647b      	str	r3, [r7, #68]	@ 0x44
 800541e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005420:	881b      	ldrh	r3, [r3, #0]
 8005422:	b29b      	uxth	r3, r3
 8005424:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005428:	b29a      	uxth	r2, r3
 800542a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800542c:	801a      	strh	r2, [r3, #0]
 800542e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005432:	2b3e      	cmp	r3, #62	@ 0x3e
 8005434:	d921      	bls.n	800547a <USB_EPStartXfer+0x5f8>
 8005436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800543a:	095b      	lsrs	r3, r3, #5
 800543c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005444:	f003 031f 	and.w	r3, r3, #31
 8005448:	2b00      	cmp	r3, #0
 800544a:	d104      	bne.n	8005456 <USB_EPStartXfer+0x5d4>
 800544c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005450:	3b01      	subs	r3, #1
 8005452:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005456:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	b29a      	uxth	r2, r3
 800545c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005460:	b29b      	uxth	r3, r3
 8005462:	029b      	lsls	r3, r3, #10
 8005464:	b29b      	uxth	r3, r3
 8005466:	4313      	orrs	r3, r2
 8005468:	b29b      	uxth	r3, r3
 800546a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800546e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005472:	b29a      	uxth	r2, r3
 8005474:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005476:	801a      	strh	r2, [r3, #0]
 8005478:	e056      	b.n	8005528 <USB_EPStartXfer+0x6a6>
 800547a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10a      	bne.n	8005498 <USB_EPStartXfer+0x616>
 8005482:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005484:	881b      	ldrh	r3, [r3, #0]
 8005486:	b29b      	uxth	r3, r3
 8005488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800548c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005490:	b29a      	uxth	r2, r3
 8005492:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005494:	801a      	strh	r2, [r3, #0]
 8005496:	e047      	b.n	8005528 <USB_EPStartXfer+0x6a6>
 8005498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800549c:	085b      	lsrs	r3, r3, #1
 800549e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80054a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d004      	beq.n	80054b8 <USB_EPStartXfer+0x636>
 80054ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80054b2:	3301      	adds	r3, #1
 80054b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80054b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	b29a      	uxth	r2, r3
 80054be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	029b      	lsls	r3, r3, #10
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	4313      	orrs	r3, r2
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054ce:	801a      	strh	r2, [r3, #0]
 80054d0:	e02a      	b.n	8005528 <USB_EPStartXfer+0x6a6>
 80054d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	785b      	ldrb	r3, [r3, #1]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d122      	bne.n	8005528 <USB_EPStartXfer+0x6a6>
 80054e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80054ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	461a      	mov	r2, r3
 8005500:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005502:	4413      	add	r3, r2
 8005504:	653b      	str	r3, [r7, #80]	@ 0x50
 8005506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800550a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	00da      	lsls	r2, r3, #3
 8005514:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005516:	4413      	add	r3, r2
 8005518:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800551c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800551e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005522:	b29a      	uxth	r2, r3
 8005524:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005526:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800552c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	891b      	ldrh	r3, [r3, #8]
 8005534:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800553c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6959      	ldr	r1, [r3, #20]
 8005544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005548:	b29b      	uxth	r3, r3
 800554a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800554e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005552:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005556:	6800      	ldr	r0, [r0, #0]
 8005558:	f001 f97e 	bl	8006858 <USB_WritePMA>
            ep->xfer_buff += len;
 800555c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005560:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	695a      	ldr	r2, [r3, #20]
 8005568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800556c:	441a      	add	r2, r3
 800556e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005572:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800557a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800557e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6a1a      	ldr	r2, [r3, #32]
 8005586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800558a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	429a      	cmp	r2, r3
 8005594:	d90f      	bls.n	80055b6 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800559a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6a1a      	ldr	r2, [r3, #32]
 80055a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055a6:	1ad2      	subs	r2, r2, r3
 80055a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	621a      	str	r2, [r3, #32]
 80055b4:	e00e      	b.n	80055d4 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80055b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80055c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2200      	movs	r2, #0
 80055d2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80055d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	643b      	str	r3, [r7, #64]	@ 0x40
 80055e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	785b      	ldrb	r3, [r3, #1]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d177      	bne.n	80056e0 <USB_EPStartXfer+0x85e>
 80055f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005600:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800560a:	b29b      	uxth	r3, r3
 800560c:	461a      	mov	r2, r3
 800560e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005610:	4413      	add	r3, r2
 8005612:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005618:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	00da      	lsls	r2, r3, #3
 8005622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005624:	4413      	add	r3, r2
 8005626:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800562a:	637b      	str	r3, [r7, #52]	@ 0x34
 800562c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800562e:	881b      	ldrh	r3, [r3, #0]
 8005630:	b29b      	uxth	r3, r3
 8005632:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005636:	b29a      	uxth	r2, r3
 8005638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800563a:	801a      	strh	r2, [r3, #0]
 800563c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005640:	2b3e      	cmp	r3, #62	@ 0x3e
 8005642:	d921      	bls.n	8005688 <USB_EPStartXfer+0x806>
 8005644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005648:	095b      	lsrs	r3, r3, #5
 800564a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800564e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005652:	f003 031f 	and.w	r3, r3, #31
 8005656:	2b00      	cmp	r3, #0
 8005658:	d104      	bne.n	8005664 <USB_EPStartXfer+0x7e2>
 800565a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800565e:	3b01      	subs	r3, #1
 8005660:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005666:	881b      	ldrh	r3, [r3, #0]
 8005668:	b29a      	uxth	r2, r3
 800566a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800566e:	b29b      	uxth	r3, r3
 8005670:	029b      	lsls	r3, r3, #10
 8005672:	b29b      	uxth	r3, r3
 8005674:	4313      	orrs	r3, r2
 8005676:	b29b      	uxth	r3, r3
 8005678:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800567c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005680:	b29a      	uxth	r2, r3
 8005682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005684:	801a      	strh	r2, [r3, #0]
 8005686:	e050      	b.n	800572a <USB_EPStartXfer+0x8a8>
 8005688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10a      	bne.n	80056a6 <USB_EPStartXfer+0x824>
 8005690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	b29b      	uxth	r3, r3
 8005696:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800569a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800569e:	b29a      	uxth	r2, r3
 80056a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056a2:	801a      	strh	r2, [r3, #0]
 80056a4:	e041      	b.n	800572a <USB_EPStartXfer+0x8a8>
 80056a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056aa:	085b      	lsrs	r3, r3, #1
 80056ac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80056b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d004      	beq.n	80056c6 <USB_EPStartXfer+0x844>
 80056bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c0:	3301      	adds	r3, #1
 80056c2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80056c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	029b      	lsls	r3, r3, #10
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	4313      	orrs	r3, r2
 80056d8:	b29a      	uxth	r2, r3
 80056da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056dc:	801a      	strh	r2, [r3, #0]
 80056de:	e024      	b.n	800572a <USB_EPStartXfer+0x8a8>
 80056e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	785b      	ldrb	r3, [r3, #1]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d11c      	bne.n	800572a <USB_EPStartXfer+0x8a8>
 80056f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056fe:	b29b      	uxth	r3, r3
 8005700:	461a      	mov	r2, r3
 8005702:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005704:	4413      	add	r3, r2
 8005706:	643b      	str	r3, [r7, #64]	@ 0x40
 8005708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800570c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	00da      	lsls	r2, r3, #3
 8005716:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005718:	4413      	add	r3, r2
 800571a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800571e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005724:	b29a      	uxth	r2, r3
 8005726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005728:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800572a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800572e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	895b      	ldrh	r3, [r3, #10]
 8005736:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800573a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800573e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6959      	ldr	r1, [r3, #20]
 8005746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800574a:	b29b      	uxth	r3, r3
 800574c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005750:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005754:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005758:	6800      	ldr	r0, [r0, #0]
 800575a:	f001 f87d 	bl	8006858 <USB_WritePMA>
 800575e:	e227      	b.n	8005bb0 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005764:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005774:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800577e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	b29b      	uxth	r3, r3
 800578e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005796:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800579a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800579e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	441a      	add	r2, r3
 80057b4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80057b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80057cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	461a      	mov	r2, r3
 80057ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057ec:	4413      	add	r3, r2
 80057ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	00da      	lsls	r2, r3, #3
 80057fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005800:	4413      	add	r3, r2
 8005802:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005806:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800580c:	b29a      	uxth	r2, r3
 800580e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005810:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005812:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005816:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	891b      	ldrh	r3, [r3, #8]
 800581e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005826:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6959      	ldr	r1, [r3, #20]
 800582e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005832:	b29b      	uxth	r3, r3
 8005834:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005838:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800583c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005840:	6800      	ldr	r0, [r0, #0]
 8005842:	f001 f809 	bl	8006858 <USB_WritePMA>
 8005846:	e1b3      	b.n	8005bb0 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800584c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6a1a      	ldr	r2, [r3, #32]
 8005854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005858:	1ad2      	subs	r2, r2, r3
 800585a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800585e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800586a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005874:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	b29b      	uxth	r3, r3
 8005884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005888:	2b00      	cmp	r3, #0
 800588a:	f000 80c6 	beq.w	8005a1a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800588e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005892:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	673b      	str	r3, [r7, #112]	@ 0x70
 800589a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800589e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	785b      	ldrb	r3, [r3, #1]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d177      	bne.n	800599a <USB_EPStartXfer+0xb18>
 80058aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	461a      	mov	r2, r3
 80058c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058ca:	4413      	add	r3, r2
 80058cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	00da      	lsls	r2, r3, #3
 80058dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058de:	4413      	add	r3, r2
 80058e0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80058e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80058e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058f4:	801a      	strh	r2, [r3, #0]
 80058f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80058fc:	d921      	bls.n	8005942 <USB_EPStartXfer+0xac0>
 80058fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005902:	095b      	lsrs	r3, r3, #5
 8005904:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800590c:	f003 031f 	and.w	r3, r3, #31
 8005910:	2b00      	cmp	r3, #0
 8005912:	d104      	bne.n	800591e <USB_EPStartXfer+0xa9c>
 8005914:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005918:	3b01      	subs	r3, #1
 800591a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800591e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	b29a      	uxth	r2, r3
 8005924:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005928:	b29b      	uxth	r3, r3
 800592a:	029b      	lsls	r3, r3, #10
 800592c:	b29b      	uxth	r3, r3
 800592e:	4313      	orrs	r3, r2
 8005930:	b29b      	uxth	r3, r3
 8005932:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005936:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800593a:	b29a      	uxth	r2, r3
 800593c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800593e:	801a      	strh	r2, [r3, #0]
 8005940:	e050      	b.n	80059e4 <USB_EPStartXfer+0xb62>
 8005942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10a      	bne.n	8005960 <USB_EPStartXfer+0xade>
 800594a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800594c:	881b      	ldrh	r3, [r3, #0]
 800594e:	b29b      	uxth	r3, r3
 8005950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005958:	b29a      	uxth	r2, r3
 800595a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800595c:	801a      	strh	r2, [r3, #0]
 800595e:	e041      	b.n	80059e4 <USB_EPStartXfer+0xb62>
 8005960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005964:	085b      	lsrs	r3, r3, #1
 8005966:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800596a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d004      	beq.n	8005980 <USB_EPStartXfer+0xafe>
 8005976:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800597a:	3301      	adds	r3, #1
 800597c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005980:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005982:	881b      	ldrh	r3, [r3, #0]
 8005984:	b29a      	uxth	r2, r3
 8005986:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800598a:	b29b      	uxth	r3, r3
 800598c:	029b      	lsls	r3, r3, #10
 800598e:	b29b      	uxth	r3, r3
 8005990:	4313      	orrs	r3, r2
 8005992:	b29a      	uxth	r2, r3
 8005994:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005996:	801a      	strh	r2, [r3, #0]
 8005998:	e024      	b.n	80059e4 <USB_EPStartXfer+0xb62>
 800599a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800599e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	785b      	ldrb	r3, [r3, #1]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d11c      	bne.n	80059e4 <USB_EPStartXfer+0xb62>
 80059aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	461a      	mov	r2, r3
 80059bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059be:	4413      	add	r3, r2
 80059c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80059c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	00da      	lsls	r2, r3, #3
 80059d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059d2:	4413      	add	r3, r2
 80059d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80059d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80059da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059de:	b29a      	uxth	r2, r3
 80059e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059e2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80059e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	895b      	ldrh	r3, [r3, #10]
 80059f0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	6959      	ldr	r1, [r3, #20]
 8005a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005a0a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005a0e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005a12:	6800      	ldr	r0, [r0, #0]
 8005a14:	f000 ff20 	bl	8006858 <USB_WritePMA>
 8005a18:	e0ca      	b.n	8005bb0 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	785b      	ldrb	r3, [r3, #1]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d177      	bne.n	8005b1a <USB_EPStartXfer+0xc98>
 8005a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	461a      	mov	r2, r3
 8005a48:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005a4a:	4413      	add	r3, r2
 8005a4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	00da      	lsls	r2, r3, #3
 8005a5c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005a5e:	4413      	add	r3, r2
 8005a60:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005a64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a74:	801a      	strh	r2, [r3, #0]
 8005a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a7c:	d921      	bls.n	8005ac2 <USB_EPStartXfer+0xc40>
 8005a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a82:	095b      	lsrs	r3, r3, #5
 8005a84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a8c:	f003 031f 	and.w	r3, r3, #31
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d104      	bne.n	8005a9e <USB_EPStartXfer+0xc1c>
 8005a94:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005a9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	029b      	lsls	r3, r3, #10
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005abe:	801a      	strh	r2, [r3, #0]
 8005ac0:	e05c      	b.n	8005b7c <USB_EPStartXfer+0xcfa>
 8005ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10a      	bne.n	8005ae0 <USB_EPStartXfer+0xc5e>
 8005aca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005acc:	881b      	ldrh	r3, [r3, #0]
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ad4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005adc:	801a      	strh	r2, [r3, #0]
 8005ade:	e04d      	b.n	8005b7c <USB_EPStartXfer+0xcfa>
 8005ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ae4:	085b      	lsrs	r3, r3, #1
 8005ae6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d004      	beq.n	8005b00 <USB_EPStartXfer+0xc7e>
 8005af6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005afa:	3301      	adds	r3, #1
 8005afc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005b00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b02:	881b      	ldrh	r3, [r3, #0]
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	029b      	lsls	r3, r3, #10
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	4313      	orrs	r3, r2
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b16:	801a      	strh	r2, [r3, #0]
 8005b18:	e030      	b.n	8005b7c <USB_EPStartXfer+0xcfa>
 8005b1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	785b      	ldrb	r3, [r3, #1]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d128      	bne.n	8005b7c <USB_EPStartXfer+0xcfa>
 8005b2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	461a      	mov	r2, r3
 8005b4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b4e:	4413      	add	r3, r2
 8005b50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	00da      	lsls	r2, r3, #3
 8005b62:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b66:	4413      	add	r3, r2
 8005b68:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005b6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005b7a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	891b      	ldrh	r3, [r3, #8]
 8005b88:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6959      	ldr	r1, [r3, #20]
 8005b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005ba2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005ba6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005baa:	6800      	ldr	r0, [r0, #0]
 8005bac:	f000 fe54 	bl	8006858 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005bb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4413      	add	r3, r2
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bd6:	817b      	strh	r3, [r7, #10]
 8005bd8:	897b      	ldrh	r3, [r7, #10]
 8005bda:	f083 0310 	eor.w	r3, r3, #16
 8005bde:	817b      	strh	r3, [r7, #10]
 8005be0:	897b      	ldrh	r3, [r7, #10]
 8005be2:	f083 0320 	eor.w	r3, r3, #32
 8005be6:	817b      	strh	r3, [r7, #10]
 8005be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	441a      	add	r2, r3
 8005c02:	897b      	ldrh	r3, [r7, #10]
 8005c04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	8013      	strh	r3, [r2, #0]
 8005c18:	f000 bcde 	b.w	80065d8 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005c1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	7b1b      	ldrb	r3, [r3, #12]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f040 80bb 	bne.w	8005da4 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005c2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	699a      	ldr	r2, [r3, #24]
 8005c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d917      	bls.n	8005c7a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005c5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	699a      	ldr	r2, [r3, #24]
 8005c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c6a:	1ad2      	subs	r2, r2, r3
 8005c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	619a      	str	r2, [r3, #24]
 8005c78:	e00e      	b.n	8005c98 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005c7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005c8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2200      	movs	r2, #0
 8005c96:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005caa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005cc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	00da      	lsls	r2, r3, #3
 8005cd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005cda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005cde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005cf0:	801a      	strh	r2, [r3, #0]
 8005cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cf6:	2b3e      	cmp	r3, #62	@ 0x3e
 8005cf8:	d924      	bls.n	8005d44 <USB_EPStartXfer+0xec2>
 8005cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cfe:	095b      	lsrs	r3, r3, #5
 8005d00:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d08:	f003 031f 	and.w	r3, r3, #31
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d104      	bne.n	8005d1a <USB_EPStartXfer+0xe98>
 8005d10:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005d14:	3b01      	subs	r3, #1
 8005d16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d1e:	881b      	ldrh	r3, [r3, #0]
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	029b      	lsls	r3, r3, #10
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d3e:	801a      	strh	r2, [r3, #0]
 8005d40:	f000 bc10 	b.w	8006564 <USB_EPStartXfer+0x16e2>
 8005d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10c      	bne.n	8005d66 <USB_EPStartXfer+0xee4>
 8005d4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d50:	881b      	ldrh	r3, [r3, #0]
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d62:	801a      	strh	r2, [r3, #0]
 8005d64:	e3fe      	b.n	8006564 <USB_EPStartXfer+0x16e2>
 8005d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d6a:	085b      	lsrs	r3, r3, #1
 8005d6c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d004      	beq.n	8005d86 <USB_EPStartXfer+0xf04>
 8005d7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005d80:	3301      	adds	r3, #1
 8005d82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	029b      	lsls	r3, r3, #10
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005da0:	801a      	strh	r2, [r3, #0]
 8005da2:	e3df      	b.n	8006564 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005da4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005da8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	78db      	ldrb	r3, [r3, #3]
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	f040 8218 	bne.w	80061e6 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005db6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	785b      	ldrb	r3, [r3, #1]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f040 809d 	bne.w	8005f02 <USB_EPStartXfer+0x1080>
 8005dc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005dd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	461a      	mov	r2, r3
 8005de8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005dec:	4413      	add	r3, r2
 8005dee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005df2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005df6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	00da      	lsls	r2, r3, #3
 8005e00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e04:	4413      	add	r3, r2
 8005e06:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005e0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e12:	881b      	ldrh	r3, [r3, #0]
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e20:	801a      	strh	r2, [r3, #0]
 8005e22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e30:	d92b      	bls.n	8005e8a <USB_EPStartXfer+0x1008>
 8005e32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	095b      	lsrs	r3, r3, #5
 8005e40:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	f003 031f 	and.w	r3, r3, #31
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d104      	bne.n	8005e62 <USB_EPStartXfer+0xfe0>
 8005e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e66:	881b      	ldrh	r3, [r3, #0]
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	029b      	lsls	r3, r3, #10
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	4313      	orrs	r3, r2
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e86:	801a      	strh	r2, [r3, #0]
 8005e88:	e070      	b.n	8005f6c <USB_EPStartXfer+0x10ea>
 8005e8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10c      	bne.n	8005eb4 <USB_EPStartXfer+0x1032>
 8005e9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005eb0:	801a      	strh	r2, [r3, #0]
 8005eb2:	e05b      	b.n	8005f6c <USB_EPStartXfer+0x10ea>
 8005eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	085b      	lsrs	r3, r3, #1
 8005ec2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d004      	beq.n	8005ee4 <USB_EPStartXfer+0x1062>
 8005eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ede:	3301      	adds	r3, #1
 8005ee0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ee4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	029b      	lsls	r3, r3, #10
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005efe:	801a      	strh	r2, [r3, #0]
 8005f00:	e034      	b.n	8005f6c <USB_EPStartXfer+0x10ea>
 8005f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	785b      	ldrb	r3, [r3, #1]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d12c      	bne.n	8005f6c <USB_EPStartXfer+0x10ea>
 8005f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	461a      	mov	r2, r3
 8005f32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005f36:	4413      	add	r3, r2
 8005f38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	00da      	lsls	r2, r3, #3
 8005f4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005f4e:	4413      	add	r3, r2
 8005f50:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005f54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005f6a:	801a      	strh	r2, [r3, #0]
 8005f6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005f7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	785b      	ldrb	r3, [r3, #1]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f040 809d 	bne.w	80060c6 <USB_EPStartXfer+0x1244>
 8005f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	461a      	mov	r2, r3
 8005fac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005fb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	00da      	lsls	r2, r3, #3
 8005fc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005fc8:	4413      	add	r3, r2
 8005fca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005fce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005fd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fd6:	881b      	ldrh	r3, [r3, #0]
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fe4:	801a      	strh	r2, [r3, #0]
 8005fe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ff4:	d92b      	bls.n	800604e <USB_EPStartXfer+0x11cc>
 8005ff6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ffa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	095b      	lsrs	r3, r3, #5
 8006004:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800600c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	f003 031f 	and.w	r3, r3, #31
 8006018:	2b00      	cmp	r3, #0
 800601a:	d104      	bne.n	8006026 <USB_EPStartXfer+0x11a4>
 800601c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006020:	3b01      	subs	r3, #1
 8006022:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006026:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800602a:	881b      	ldrh	r3, [r3, #0]
 800602c:	b29a      	uxth	r2, r3
 800602e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006032:	b29b      	uxth	r3, r3
 8006034:	029b      	lsls	r3, r3, #10
 8006036:	b29b      	uxth	r3, r3
 8006038:	4313      	orrs	r3, r2
 800603a:	b29b      	uxth	r3, r3
 800603c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006040:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006044:	b29a      	uxth	r2, r3
 8006046:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800604a:	801a      	strh	r2, [r3, #0]
 800604c:	e069      	b.n	8006122 <USB_EPStartXfer+0x12a0>
 800604e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006052:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10c      	bne.n	8006078 <USB_EPStartXfer+0x11f6>
 800605e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006062:	881b      	ldrh	r3, [r3, #0]
 8006064:	b29b      	uxth	r3, r3
 8006066:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800606a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800606e:	b29a      	uxth	r2, r3
 8006070:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006074:	801a      	strh	r2, [r3, #0]
 8006076:	e054      	b.n	8006122 <USB_EPStartXfer+0x12a0>
 8006078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800607c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	085b      	lsrs	r3, r3, #1
 8006086:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800608a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800608e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b00      	cmp	r3, #0
 800609c:	d004      	beq.n	80060a8 <USB_EPStartXfer+0x1226>
 800609e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060a2:	3301      	adds	r3, #1
 80060a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80060a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	029b      	lsls	r3, r3, #10
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	4313      	orrs	r3, r2
 80060bc:	b29a      	uxth	r2, r3
 80060be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060c2:	801a      	strh	r2, [r3, #0]
 80060c4:	e02d      	b.n	8006122 <USB_EPStartXfer+0x12a0>
 80060c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	785b      	ldrb	r3, [r3, #1]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d125      	bne.n	8006122 <USB_EPStartXfer+0x12a0>
 80060d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	461a      	mov	r2, r3
 80060e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80060ec:	4413      	add	r3, r2
 80060ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80060f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	00da      	lsls	r2, r3, #3
 8006100:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006104:	4413      	add	r3, r2
 8006106:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800610a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800610e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006112:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	b29a      	uxth	r2, r3
 800611c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006120:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006126:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	69db      	ldr	r3, [r3, #28]
 800612e:	2b00      	cmp	r3, #0
 8006130:	f000 8218 	beq.w	8006564 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006138:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006142:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006154:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006158:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d005      	beq.n	800616c <USB_EPStartXfer+0x12ea>
 8006160:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10d      	bne.n	8006188 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800616c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006170:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006174:	2b00      	cmp	r3, #0
 8006176:	f040 81f5 	bne.w	8006564 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800617a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800617e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006182:	2b00      	cmp	r3, #0
 8006184:	f040 81ee 	bne.w	8006564 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006188:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800618c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006196:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061ae:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80061b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	441a      	add	r2, r3
 80061cc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80061d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061dc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	8013      	strh	r3, [r2, #0]
 80061e4:	e1be      	b.n	8006564 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80061e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	78db      	ldrb	r3, [r3, #3]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	f040 81b4 	bne.w	8006560 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80061f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	699a      	ldr	r2, [r3, #24]
 8006204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006208:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	429a      	cmp	r2, r3
 8006212:	d917      	bls.n	8006244 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006218:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006228:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	699a      	ldr	r2, [r3, #24]
 8006230:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006234:	1ad2      	subs	r2, r2, r3
 8006236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800623a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	619a      	str	r2, [r3, #24]
 8006242:	e00e      	b.n	8006262 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006244:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006248:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006258:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2200      	movs	r2, #0
 8006260:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006266:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	785b      	ldrb	r3, [r3, #1]
 800626e:	2b00      	cmp	r3, #0
 8006270:	f040 8085 	bne.w	800637e <USB_EPStartXfer+0x14fc>
 8006274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006278:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006282:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006286:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006290:	b29b      	uxth	r3, r3
 8006292:	461a      	mov	r2, r3
 8006294:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006298:	4413      	add	r3, r2
 800629a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800629e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	00da      	lsls	r2, r3, #3
 80062ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062b0:	4413      	add	r3, r2
 80062b2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80062b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80062be:	881b      	ldrh	r3, [r3, #0]
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80062cc:	801a      	strh	r2, [r3, #0]
 80062ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80062d4:	d923      	bls.n	800631e <USB_EPStartXfer+0x149c>
 80062d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062da:	095b      	lsrs	r3, r3, #5
 80062dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80062e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e4:	f003 031f 	and.w	r3, r3, #31
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d104      	bne.n	80062f6 <USB_EPStartXfer+0x1474>
 80062ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062f0:	3b01      	subs	r3, #1
 80062f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80062f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006302:	b29b      	uxth	r3, r3
 8006304:	029b      	lsls	r3, r3, #10
 8006306:	b29b      	uxth	r3, r3
 8006308:	4313      	orrs	r3, r2
 800630a:	b29b      	uxth	r3, r3
 800630c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006314:	b29a      	uxth	r2, r3
 8006316:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800631a:	801a      	strh	r2, [r3, #0]
 800631c:	e060      	b.n	80063e0 <USB_EPStartXfer+0x155e>
 800631e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10c      	bne.n	8006340 <USB_EPStartXfer+0x14be>
 8006326:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	b29b      	uxth	r3, r3
 800632e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006332:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006336:	b29a      	uxth	r2, r3
 8006338:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800633c:	801a      	strh	r2, [r3, #0]
 800633e:	e04f      	b.n	80063e0 <USB_EPStartXfer+0x155e>
 8006340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006344:	085b      	lsrs	r3, r3, #1
 8006346:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800634a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d004      	beq.n	8006360 <USB_EPStartXfer+0x14de>
 8006356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800635a:	3301      	adds	r3, #1
 800635c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006360:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006364:	881b      	ldrh	r3, [r3, #0]
 8006366:	b29a      	uxth	r2, r3
 8006368:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800636c:	b29b      	uxth	r3, r3
 800636e:	029b      	lsls	r3, r3, #10
 8006370:	b29b      	uxth	r3, r3
 8006372:	4313      	orrs	r3, r2
 8006374:	b29a      	uxth	r2, r3
 8006376:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800637a:	801a      	strh	r2, [r3, #0]
 800637c:	e030      	b.n	80063e0 <USB_EPStartXfer+0x155e>
 800637e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006382:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	785b      	ldrb	r3, [r3, #1]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d128      	bne.n	80063e0 <USB_EPStartXfer+0x155e>
 800638e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006392:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800639c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	461a      	mov	r2, r3
 80063ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063b2:	4413      	add	r3, r2
 80063b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80063b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	00da      	lsls	r2, r3, #3
 80063c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063ca:	4413      	add	r3, r2
 80063cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80063d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d8:	b29a      	uxth	r2, r3
 80063da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80063de:	801a      	strh	r2, [r3, #0]
 80063e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80063ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	785b      	ldrb	r3, [r3, #1]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f040 8085 	bne.w	800650a <USB_EPStartXfer+0x1688>
 8006400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006404:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800640e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006412:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800641c:	b29b      	uxth	r3, r3
 800641e:	461a      	mov	r2, r3
 8006420:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006424:	4413      	add	r3, r2
 8006426:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800642a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800642e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	00da      	lsls	r2, r3, #3
 8006438:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800643c:	4413      	add	r3, r2
 800643e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006442:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006446:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800644a:	881b      	ldrh	r3, [r3, #0]
 800644c:	b29b      	uxth	r3, r3
 800644e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006452:	b29a      	uxth	r2, r3
 8006454:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006458:	801a      	strh	r2, [r3, #0]
 800645a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800645e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006460:	d923      	bls.n	80064aa <USB_EPStartXfer+0x1628>
 8006462:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006466:	095b      	lsrs	r3, r3, #5
 8006468:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800646c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006470:	f003 031f 	and.w	r3, r3, #31
 8006474:	2b00      	cmp	r3, #0
 8006476:	d104      	bne.n	8006482 <USB_EPStartXfer+0x1600>
 8006478:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800647c:	3b01      	subs	r3, #1
 800647e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006482:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006486:	881b      	ldrh	r3, [r3, #0]
 8006488:	b29a      	uxth	r2, r3
 800648a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800648e:	b29b      	uxth	r3, r3
 8006490:	029b      	lsls	r3, r3, #10
 8006492:	b29b      	uxth	r3, r3
 8006494:	4313      	orrs	r3, r2
 8006496:	b29b      	uxth	r3, r3
 8006498:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800649c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80064a6:	801a      	strh	r2, [r3, #0]
 80064a8:	e05c      	b.n	8006564 <USB_EPStartXfer+0x16e2>
 80064aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10c      	bne.n	80064cc <USB_EPStartXfer+0x164a>
 80064b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80064b6:	881b      	ldrh	r3, [r3, #0]
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80064c8:	801a      	strh	r2, [r3, #0]
 80064ca:	e04b      	b.n	8006564 <USB_EPStartXfer+0x16e2>
 80064cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064d0:	085b      	lsrs	r3, r3, #1
 80064d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80064d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d004      	beq.n	80064ec <USB_EPStartXfer+0x166a>
 80064e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064e6:	3301      	adds	r3, #1
 80064e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80064ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	029b      	lsls	r3, r3, #10
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	4313      	orrs	r3, r2
 8006500:	b29a      	uxth	r2, r3
 8006502:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006506:	801a      	strh	r2, [r3, #0]
 8006508:	e02c      	b.n	8006564 <USB_EPStartXfer+0x16e2>
 800650a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800650e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	785b      	ldrb	r3, [r3, #1]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d124      	bne.n	8006564 <USB_EPStartXfer+0x16e2>
 800651a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800651e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006528:	b29b      	uxth	r3, r3
 800652a:	461a      	mov	r2, r3
 800652c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006530:	4413      	add	r3, r2
 8006532:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800653a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	00da      	lsls	r2, r3, #3
 8006544:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006548:	4413      	add	r3, r2
 800654a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800654e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006556:	b29a      	uxth	r2, r3
 8006558:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800655c:	801a      	strh	r2, [r3, #0]
 800655e:	e001      	b.n	8006564 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e03a      	b.n	80065da <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006568:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006572:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	b29b      	uxth	r3, r3
 8006582:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800658a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800658e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006592:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006596:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800659a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800659e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80065a2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80065a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	441a      	add	r2, r3
 80065c0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80065c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	785b      	ldrb	r3, [r3, #1]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d020      	beq.n	8006638 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	b29b      	uxth	r3, r3
 8006604:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006608:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800660c:	81bb      	strh	r3, [r7, #12]
 800660e:	89bb      	ldrh	r3, [r7, #12]
 8006610:	f083 0310 	eor.w	r3, r3, #16
 8006614:	81bb      	strh	r3, [r7, #12]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	441a      	add	r2, r3
 8006620:	89bb      	ldrh	r3, [r7, #12]
 8006622:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006626:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800662a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800662e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006632:	b29b      	uxth	r3, r3
 8006634:	8013      	strh	r3, [r2, #0]
 8006636:	e01f      	b.n	8006678 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	4413      	add	r3, r2
 8006642:	881b      	ldrh	r3, [r3, #0]
 8006644:	b29b      	uxth	r3, r3
 8006646:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800664a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800664e:	81fb      	strh	r3, [r7, #14]
 8006650:	89fb      	ldrh	r3, [r7, #14]
 8006652:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006656:	81fb      	strh	r3, [r7, #14]
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	441a      	add	r2, r3
 8006662:	89fb      	ldrh	r3, [r7, #14]
 8006664:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006668:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800666c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006670:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006674:	b29b      	uxth	r3, r3
 8006676:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3714      	adds	r7, #20
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006686:	b480      	push	{r7}
 8006688:	b087      	sub	sp, #28
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
 800668e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	7b1b      	ldrb	r3, [r3, #12]
 8006694:	2b00      	cmp	r3, #0
 8006696:	f040 809d 	bne.w	80067d4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	785b      	ldrb	r3, [r3, #1]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d04c      	beq.n	800673c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4413      	add	r3, r2
 80066ac:	881b      	ldrh	r3, [r3, #0]
 80066ae:	823b      	strh	r3, [r7, #16]
 80066b0:	8a3b      	ldrh	r3, [r7, #16]
 80066b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d01b      	beq.n	80066f2 <USB_EPClearStall+0x6c>
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4413      	add	r3, r2
 80066c4:	881b      	ldrh	r3, [r3, #0]
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066d0:	81fb      	strh	r3, [r7, #14]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	441a      	add	r2, r3
 80066dc:	89fb      	ldrh	r3, [r7, #14]
 80066de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	78db      	ldrb	r3, [r3, #3]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d06c      	beq.n	80067d4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	b29b      	uxth	r3, r3
 8006708:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800670c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006710:	81bb      	strh	r3, [r7, #12]
 8006712:	89bb      	ldrh	r3, [r7, #12]
 8006714:	f083 0320 	eor.w	r3, r3, #32
 8006718:	81bb      	strh	r3, [r7, #12]
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	441a      	add	r2, r3
 8006724:	89bb      	ldrh	r3, [r7, #12]
 8006726:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800672a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800672e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006732:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006736:	b29b      	uxth	r3, r3
 8006738:	8013      	strh	r3, [r2, #0]
 800673a:	e04b      	b.n	80067d4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4413      	add	r3, r2
 8006746:	881b      	ldrh	r3, [r3, #0]
 8006748:	82fb      	strh	r3, [r7, #22]
 800674a:	8afb      	ldrh	r3, [r7, #22]
 800674c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d01b      	beq.n	800678c <USB_EPClearStall+0x106>
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	b29b      	uxth	r3, r3
 8006762:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800676a:	82bb      	strh	r3, [r7, #20]
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	441a      	add	r2, r3
 8006776:	8abb      	ldrh	r3, [r7, #20]
 8006778:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800677c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006780:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006788:	b29b      	uxth	r3, r3
 800678a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	881b      	ldrh	r3, [r3, #0]
 8006798:	b29b      	uxth	r3, r3
 800679a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800679e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067a2:	827b      	strh	r3, [r7, #18]
 80067a4:	8a7b      	ldrh	r3, [r7, #18]
 80067a6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80067aa:	827b      	strh	r3, [r7, #18]
 80067ac:	8a7b      	ldrh	r3, [r7, #18]
 80067ae:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80067b2:	827b      	strh	r3, [r7, #18]
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	441a      	add	r2, r3
 80067be:	8a7b      	ldrh	r3, [r7, #18]
 80067c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	371c      	adds	r7, #28
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b083      	sub	sp, #12
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	460b      	mov	r3, r1
 80067ec:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80067ee:	78fb      	ldrb	r3, [r7, #3]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d103      	bne.n	80067fc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2280      	movs	r2, #128	@ 0x80
 80067f8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800680a:	b480      	push	{r7}
 800680c:	b083      	sub	sp, #12
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006818:	b29b      	uxth	r3, r3
 800681a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800681e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006822:	b29a      	uxth	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006846:	b29b      	uxth	r3, r3
 8006848:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800684a:	68fb      	ldr	r3, [r7, #12]
}
 800684c:	4618      	mov	r0, r3
 800684e:	3714      	adds	r7, #20
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006858:	b480      	push	{r7}
 800685a:	b08b      	sub	sp, #44	@ 0x2c
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	4611      	mov	r1, r2
 8006864:	461a      	mov	r2, r3
 8006866:	460b      	mov	r3, r1
 8006868:	80fb      	strh	r3, [r7, #6]
 800686a:	4613      	mov	r3, r2
 800686c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800686e:	88bb      	ldrh	r3, [r7, #4]
 8006870:	3301      	adds	r3, #1
 8006872:	085b      	lsrs	r3, r3, #1
 8006874:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800687e:	88fa      	ldrh	r2, [r7, #6]
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	4413      	add	r3, r2
 8006884:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006888:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	627b      	str	r3, [r7, #36]	@ 0x24
 800688e:	e01b      	b.n	80068c8 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	3301      	adds	r3, #1
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	021b      	lsls	r3, r3, #8
 800689e:	b21a      	sxth	r2, r3
 80068a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	b21b      	sxth	r3, r3
 80068a8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80068aa:	6a3b      	ldr	r3, [r7, #32]
 80068ac:	8a7a      	ldrh	r2, [r7, #18]
 80068ae:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	3302      	adds	r3, #2
 80068b4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	3301      	adds	r3, #1
 80068ba:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	3301      	adds	r3, #1
 80068c0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80068c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c4:	3b01      	subs	r3, #1
 80068c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80068c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1e0      	bne.n	8006890 <USB_WritePMA+0x38>
  }
}
 80068ce:	bf00      	nop
 80068d0:	bf00      	nop
 80068d2:	372c      	adds	r7, #44	@ 0x2c
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80068dc:	b480      	push	{r7}
 80068de:	b08b      	sub	sp, #44	@ 0x2c
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	4611      	mov	r1, r2
 80068e8:	461a      	mov	r2, r3
 80068ea:	460b      	mov	r3, r1
 80068ec:	80fb      	strh	r3, [r7, #6]
 80068ee:	4613      	mov	r3, r2
 80068f0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80068f2:	88bb      	ldrh	r3, [r7, #4]
 80068f4:	085b      	lsrs	r3, r3, #1
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006902:	88fa      	ldrh	r2, [r7, #6]
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	4413      	add	r3, r2
 8006908:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800690c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	627b      	str	r3, [r7, #36]	@ 0x24
 8006912:	e018      	b.n	8006946 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	881b      	ldrh	r3, [r3, #0]
 8006918:	b29b      	uxth	r3, r3
 800691a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800691c:	6a3b      	ldr	r3, [r7, #32]
 800691e:	3302      	adds	r3, #2
 8006920:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	b2da      	uxtb	r2, r3
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	3301      	adds	r3, #1
 800692e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	0a1b      	lsrs	r3, r3, #8
 8006934:	b2da      	uxtb	r2, r3
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	3301      	adds	r3, #1
 800693e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006942:	3b01      	subs	r3, #1
 8006944:	627b      	str	r3, [r7, #36]	@ 0x24
 8006946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1e3      	bne.n	8006914 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800694c:	88bb      	ldrh	r3, [r7, #4]
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	b29b      	uxth	r3, r3
 8006954:	2b00      	cmp	r3, #0
 8006956:	d007      	beq.n	8006968 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	b29b      	uxth	r3, r3
 800695e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	b2da      	uxtb	r2, r3
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	701a      	strb	r2, [r3, #0]
  }
}
 8006968:	bf00      	nop
 800696a:	372c      	adds	r7, #44	@ 0x2c
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	460b      	mov	r3, r1
 800697e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006980:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006984:	f002 fc6a 	bl	800925c <USBD_static_malloc>
 8006988:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d109      	bne.n	80069a4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	32b0      	adds	r2, #176	@ 0xb0
 800699a:	2100      	movs	r1, #0
 800699c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80069a0:	2302      	movs	r3, #2
 80069a2:	e0d4      	b.n	8006b4e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80069a4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80069a8:	2100      	movs	r1, #0
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f002 fcc0 	bl	8009330 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	32b0      	adds	r2, #176	@ 0xb0
 80069ba:	68f9      	ldr	r1, [r7, #12]
 80069bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	32b0      	adds	r2, #176	@ 0xb0
 80069ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	7c1b      	ldrb	r3, [r3, #16]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d138      	bne.n	8006a4e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80069dc:	4b5e      	ldr	r3, [pc, #376]	@ (8006b58 <USBD_CDC_Init+0x1e4>)
 80069de:	7819      	ldrb	r1, [r3, #0]
 80069e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80069e4:	2202      	movs	r2, #2
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f002 fadf 	bl	8008faa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80069ec:	4b5a      	ldr	r3, [pc, #360]	@ (8006b58 <USBD_CDC_Init+0x1e4>)
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	f003 020f 	and.w	r2, r3, #15
 80069f4:	6879      	ldr	r1, [r7, #4]
 80069f6:	4613      	mov	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	440b      	add	r3, r1
 8006a00:	3324      	adds	r3, #36	@ 0x24
 8006a02:	2201      	movs	r2, #1
 8006a04:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006a06:	4b55      	ldr	r3, [pc, #340]	@ (8006b5c <USBD_CDC_Init+0x1e8>)
 8006a08:	7819      	ldrb	r1, [r3, #0]
 8006a0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a0e:	2202      	movs	r2, #2
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f002 faca 	bl	8008faa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006a16:	4b51      	ldr	r3, [pc, #324]	@ (8006b5c <USBD_CDC_Init+0x1e8>)
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	f003 020f 	and.w	r2, r3, #15
 8006a1e:	6879      	ldr	r1, [r7, #4]
 8006a20:	4613      	mov	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4413      	add	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	440b      	add	r3, r1
 8006a2a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006a2e:	2201      	movs	r2, #1
 8006a30:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006a32:	4b4b      	ldr	r3, [pc, #300]	@ (8006b60 <USBD_CDC_Init+0x1ec>)
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	f003 020f 	and.w	r2, r3, #15
 8006a3a:	6879      	ldr	r1, [r7, #4]
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4413      	add	r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	440b      	add	r3, r1
 8006a46:	3326      	adds	r3, #38	@ 0x26
 8006a48:	2210      	movs	r2, #16
 8006a4a:	801a      	strh	r2, [r3, #0]
 8006a4c:	e035      	b.n	8006aba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006a4e:	4b42      	ldr	r3, [pc, #264]	@ (8006b58 <USBD_CDC_Init+0x1e4>)
 8006a50:	7819      	ldrb	r1, [r3, #0]
 8006a52:	2340      	movs	r3, #64	@ 0x40
 8006a54:	2202      	movs	r2, #2
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f002 faa7 	bl	8008faa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006a5c:	4b3e      	ldr	r3, [pc, #248]	@ (8006b58 <USBD_CDC_Init+0x1e4>)
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	f003 020f 	and.w	r2, r3, #15
 8006a64:	6879      	ldr	r1, [r7, #4]
 8006a66:	4613      	mov	r3, r2
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4413      	add	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	440b      	add	r3, r1
 8006a70:	3324      	adds	r3, #36	@ 0x24
 8006a72:	2201      	movs	r2, #1
 8006a74:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006a76:	4b39      	ldr	r3, [pc, #228]	@ (8006b5c <USBD_CDC_Init+0x1e8>)
 8006a78:	7819      	ldrb	r1, [r3, #0]
 8006a7a:	2340      	movs	r3, #64	@ 0x40
 8006a7c:	2202      	movs	r2, #2
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f002 fa93 	bl	8008faa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006a84:	4b35      	ldr	r3, [pc, #212]	@ (8006b5c <USBD_CDC_Init+0x1e8>)
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	f003 020f 	and.w	r2, r3, #15
 8006a8c:	6879      	ldr	r1, [r7, #4]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	440b      	add	r3, r1
 8006a98:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006aa0:	4b2f      	ldr	r3, [pc, #188]	@ (8006b60 <USBD_CDC_Init+0x1ec>)
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	f003 020f 	and.w	r2, r3, #15
 8006aa8:	6879      	ldr	r1, [r7, #4]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	440b      	add	r3, r1
 8006ab4:	3326      	adds	r3, #38	@ 0x26
 8006ab6:	2210      	movs	r2, #16
 8006ab8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006aba:	4b29      	ldr	r3, [pc, #164]	@ (8006b60 <USBD_CDC_Init+0x1ec>)
 8006abc:	7819      	ldrb	r1, [r3, #0]
 8006abe:	2308      	movs	r3, #8
 8006ac0:	2203      	movs	r2, #3
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f002 fa71 	bl	8008faa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006ac8:	4b25      	ldr	r3, [pc, #148]	@ (8006b60 <USBD_CDC_Init+0x1ec>)
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	f003 020f 	and.w	r2, r3, #15
 8006ad0:	6879      	ldr	r1, [r7, #4]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4413      	add	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	440b      	add	r3, r1
 8006adc:	3324      	adds	r3, #36	@ 0x24
 8006ade:	2201      	movs	r2, #1
 8006ae0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	33b0      	adds	r3, #176	@ 0xb0
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4413      	add	r3, r2
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006b18:	2302      	movs	r3, #2
 8006b1a:	e018      	b.n	8006b4e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	7c1b      	ldrb	r3, [r3, #16]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d10a      	bne.n	8006b3a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b24:	4b0d      	ldr	r3, [pc, #52]	@ (8006b5c <USBD_CDC_Init+0x1e8>)
 8006b26:	7819      	ldrb	r1, [r3, #0]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006b2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f002 fb28 	bl	8009188 <USBD_LL_PrepareReceive>
 8006b38:	e008      	b.n	8006b4c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b3a:	4b08      	ldr	r3, [pc, #32]	@ (8006b5c <USBD_CDC_Init+0x1e8>)
 8006b3c:	7819      	ldrb	r1, [r3, #0]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006b44:	2340      	movs	r3, #64	@ 0x40
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f002 fb1e 	bl	8009188 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	2000009b 	.word	0x2000009b
 8006b5c:	2000009c 	.word	0x2000009c
 8006b60:	2000009d 	.word	0x2000009d

08006b64 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006b70:	4b3a      	ldr	r3, [pc, #232]	@ (8006c5c <USBD_CDC_DeInit+0xf8>)
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	4619      	mov	r1, r3
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f002 fa3d 	bl	8008ff6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006b7c:	4b37      	ldr	r3, [pc, #220]	@ (8006c5c <USBD_CDC_DeInit+0xf8>)
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	f003 020f 	and.w	r2, r3, #15
 8006b84:	6879      	ldr	r1, [r7, #4]
 8006b86:	4613      	mov	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	440b      	add	r3, r1
 8006b90:	3324      	adds	r3, #36	@ 0x24
 8006b92:	2200      	movs	r2, #0
 8006b94:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006b96:	4b32      	ldr	r3, [pc, #200]	@ (8006c60 <USBD_CDC_DeInit+0xfc>)
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f002 fa2a 	bl	8008ff6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8006c60 <USBD_CDC_DeInit+0xfc>)
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	f003 020f 	and.w	r2, r3, #15
 8006baa:	6879      	ldr	r1, [r7, #4]
 8006bac:	4613      	mov	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4413      	add	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	440b      	add	r3, r1
 8006bb6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006bba:	2200      	movs	r2, #0
 8006bbc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006bbe:	4b29      	ldr	r3, [pc, #164]	@ (8006c64 <USBD_CDC_DeInit+0x100>)
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f002 fa16 	bl	8008ff6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006bca:	4b26      	ldr	r3, [pc, #152]	@ (8006c64 <USBD_CDC_DeInit+0x100>)
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	f003 020f 	and.w	r2, r3, #15
 8006bd2:	6879      	ldr	r1, [r7, #4]
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4413      	add	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	440b      	add	r3, r1
 8006bde:	3324      	adds	r3, #36	@ 0x24
 8006be0:	2200      	movs	r2, #0
 8006be2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006be4:	4b1f      	ldr	r3, [pc, #124]	@ (8006c64 <USBD_CDC_DeInit+0x100>)
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	f003 020f 	and.w	r2, r3, #15
 8006bec:	6879      	ldr	r1, [r7, #4]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	440b      	add	r3, r1
 8006bf8:	3326      	adds	r3, #38	@ 0x26
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	32b0      	adds	r2, #176	@ 0xb0
 8006c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d01f      	beq.n	8006c50 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	33b0      	adds	r3, #176	@ 0xb0
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	4413      	add	r3, r2
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	32b0      	adds	r2, #176	@ 0xb0
 8006c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c32:	4618      	mov	r0, r3
 8006c34:	f002 fb20 	bl	8009278 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	32b0      	adds	r2, #176	@ 0xb0
 8006c42:	2100      	movs	r1, #0
 8006c44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3708      	adds	r7, #8
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	2000009b 	.word	0x2000009b
 8006c60:	2000009c 	.word	0x2000009c
 8006c64:	2000009d 	.word	0x2000009d

08006c68 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	32b0      	adds	r2, #176	@ 0xb0
 8006c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c80:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006c86:	2300      	movs	r3, #0
 8006c88:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d101      	bne.n	8006c98 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e0bf      	b.n	8006e18 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d050      	beq.n	8006d46 <USBD_CDC_Setup+0xde>
 8006ca4:	2b20      	cmp	r3, #32
 8006ca6:	f040 80af 	bne.w	8006e08 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	88db      	ldrh	r3, [r3, #6]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d03a      	beq.n	8006d28 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	b25b      	sxtb	r3, r3
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	da1b      	bge.n	8006cf4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	33b0      	adds	r3, #176	@ 0xb0
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4413      	add	r3, r2
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	683a      	ldr	r2, [r7, #0]
 8006cd0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006cd2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	88d2      	ldrh	r2, [r2, #6]
 8006cd8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	88db      	ldrh	r3, [r3, #6]
 8006cde:	2b07      	cmp	r3, #7
 8006ce0:	bf28      	it	cs
 8006ce2:	2307      	movcs	r3, #7
 8006ce4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	89fa      	ldrh	r2, [r7, #14]
 8006cea:	4619      	mov	r1, r3
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f001 fd1f 	bl	8008730 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006cf2:	e090      	b.n	8006e16 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	785a      	ldrb	r2, [r3, #1]
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	88db      	ldrh	r3, [r3, #6]
 8006d02:	2b3f      	cmp	r3, #63	@ 0x3f
 8006d04:	d803      	bhi.n	8006d0e <USBD_CDC_Setup+0xa6>
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	88db      	ldrh	r3, [r3, #6]
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	e000      	b.n	8006d10 <USBD_CDC_Setup+0xa8>
 8006d0e:	2240      	movs	r2, #64	@ 0x40
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006d16:	6939      	ldr	r1, [r7, #16]
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006d1e:	461a      	mov	r2, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f001 fd31 	bl	8008788 <USBD_CtlPrepareRx>
      break;
 8006d26:	e076      	b.n	8006e16 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	33b0      	adds	r3, #176	@ 0xb0
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4413      	add	r3, r2
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	7850      	ldrb	r0, [r2, #1]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	6839      	ldr	r1, [r7, #0]
 8006d42:	4798      	blx	r3
      break;
 8006d44:	e067      	b.n	8006e16 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	785b      	ldrb	r3, [r3, #1]
 8006d4a:	2b0b      	cmp	r3, #11
 8006d4c:	d851      	bhi.n	8006df2 <USBD_CDC_Setup+0x18a>
 8006d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d54 <USBD_CDC_Setup+0xec>)
 8006d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d54:	08006d85 	.word	0x08006d85
 8006d58:	08006e01 	.word	0x08006e01
 8006d5c:	08006df3 	.word	0x08006df3
 8006d60:	08006df3 	.word	0x08006df3
 8006d64:	08006df3 	.word	0x08006df3
 8006d68:	08006df3 	.word	0x08006df3
 8006d6c:	08006df3 	.word	0x08006df3
 8006d70:	08006df3 	.word	0x08006df3
 8006d74:	08006df3 	.word	0x08006df3
 8006d78:	08006df3 	.word	0x08006df3
 8006d7c:	08006daf 	.word	0x08006daf
 8006d80:	08006dd9 	.word	0x08006dd9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	2b03      	cmp	r3, #3
 8006d8e:	d107      	bne.n	8006da0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006d90:	f107 030a 	add.w	r3, r7, #10
 8006d94:	2202      	movs	r2, #2
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f001 fcc9 	bl	8008730 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d9e:	e032      	b.n	8006e06 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006da0:	6839      	ldr	r1, [r7, #0]
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f001 fc53 	bl	800864e <USBD_CtlError>
            ret = USBD_FAIL;
 8006da8:	2303      	movs	r3, #3
 8006daa:	75fb      	strb	r3, [r7, #23]
          break;
 8006dac:	e02b      	b.n	8006e06 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	d107      	bne.n	8006dca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006dba:	f107 030d 	add.w	r3, r7, #13
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f001 fcb4 	bl	8008730 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006dc8:	e01d      	b.n	8006e06 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f001 fc3e 	bl	800864e <USBD_CtlError>
            ret = USBD_FAIL;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	75fb      	strb	r3, [r7, #23]
          break;
 8006dd6:	e016      	b.n	8006e06 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b03      	cmp	r3, #3
 8006de2:	d00f      	beq.n	8006e04 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f001 fc31 	bl	800864e <USBD_CtlError>
            ret = USBD_FAIL;
 8006dec:	2303      	movs	r3, #3
 8006dee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006df0:	e008      	b.n	8006e04 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006df2:	6839      	ldr	r1, [r7, #0]
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f001 fc2a 	bl	800864e <USBD_CtlError>
          ret = USBD_FAIL;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	75fb      	strb	r3, [r7, #23]
          break;
 8006dfe:	e002      	b.n	8006e06 <USBD_CDC_Setup+0x19e>
          break;
 8006e00:	bf00      	nop
 8006e02:	e008      	b.n	8006e16 <USBD_CDC_Setup+0x1ae>
          break;
 8006e04:	bf00      	nop
      }
      break;
 8006e06:	e006      	b.n	8006e16 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006e08:	6839      	ldr	r1, [r7, #0]
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f001 fc1f 	bl	800864e <USBD_CtlError>
      ret = USBD_FAIL;
 8006e10:	2303      	movs	r3, #3
 8006e12:	75fb      	strb	r3, [r7, #23]
      break;
 8006e14:	bf00      	nop
  }

  return (uint8_t)ret;
 8006e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3718      	adds	r7, #24
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006e32:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	32b0      	adds	r2, #176	@ 0xb0
 8006e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d101      	bne.n	8006e4a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e065      	b.n	8006f16 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	32b0      	adds	r2, #176	@ 0xb0
 8006e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e58:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006e5a:	78fb      	ldrb	r3, [r7, #3]
 8006e5c:	f003 020f 	and.w	r2, r3, #15
 8006e60:	6879      	ldr	r1, [r7, #4]
 8006e62:	4613      	mov	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	4413      	add	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	440b      	add	r3, r1
 8006e6c:	3318      	adds	r3, #24
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d02f      	beq.n	8006ed4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006e74:	78fb      	ldrb	r3, [r7, #3]
 8006e76:	f003 020f 	and.w	r2, r3, #15
 8006e7a:	6879      	ldr	r1, [r7, #4]
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	440b      	add	r3, r1
 8006e86:	3318      	adds	r3, #24
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	78fb      	ldrb	r3, [r7, #3]
 8006e8c:	f003 010f 	and.w	r1, r3, #15
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	460b      	mov	r3, r1
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	440b      	add	r3, r1
 8006e98:	00db      	lsls	r3, r3, #3
 8006e9a:	4403      	add	r3, r0
 8006e9c:	3320      	adds	r3, #32
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ea4:	fb01 f303 	mul.w	r3, r1, r3
 8006ea8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d112      	bne.n	8006ed4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006eae:	78fb      	ldrb	r3, [r7, #3]
 8006eb0:	f003 020f 	and.w	r2, r3, #15
 8006eb4:	6879      	ldr	r1, [r7, #4]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4413      	add	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	440b      	add	r3, r1
 8006ec0:	3318      	adds	r3, #24
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006ec6:	78f9      	ldrb	r1, [r7, #3]
 8006ec8:	2300      	movs	r3, #0
 8006eca:	2200      	movs	r2, #0
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f002 f93a 	bl	8009146 <USBD_LL_Transmit>
 8006ed2:	e01f      	b.n	8006f14 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	33b0      	adds	r3, #176	@ 0xb0
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4413      	add	r3, r2
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d010      	beq.n	8006f14 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	33b0      	adds	r3, #176	@ 0xb0
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	68ba      	ldr	r2, [r7, #8]
 8006f06:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006f10:	78fa      	ldrb	r2, [r7, #3]
 8006f12:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b084      	sub	sp, #16
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
 8006f26:	460b      	mov	r3, r1
 8006f28:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	32b0      	adds	r2, #176	@ 0xb0
 8006f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f38:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	32b0      	adds	r2, #176	@ 0xb0
 8006f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d101      	bne.n	8006f50 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e01a      	b.n	8006f86 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006f50:	78fb      	ldrb	r3, [r7, #3]
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f002 f938 	bl	80091ca <USBD_LL_GetRxDataSize>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	33b0      	adds	r3, #176	@ 0xb0
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4413      	add	r3, r2
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006f80:	4611      	mov	r1, r2
 8006f82:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b084      	sub	sp, #16
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	32b0      	adds	r2, #176	@ 0xb0
 8006fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d101      	bne.n	8006fb0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e024      	b.n	8006ffa <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	33b0      	adds	r3, #176	@ 0xb0
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d019      	beq.n	8006ff8 <USBD_CDC_EP0_RxReady+0x6a>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006fca:	2bff      	cmp	r3, #255	@ 0xff
 8006fcc:	d014      	beq.n	8006ff8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	33b0      	adds	r3, #176	@ 0xb0
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006fe6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006fee:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	22ff      	movs	r2, #255	@ 0xff
 8006ff4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
	...

08007004 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800700c:	2182      	movs	r1, #130	@ 0x82
 800700e:	4818      	ldr	r0, [pc, #96]	@ (8007070 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007010:	f000 fcbd 	bl	800798e <USBD_GetEpDesc>
 8007014:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007016:	2101      	movs	r1, #1
 8007018:	4815      	ldr	r0, [pc, #84]	@ (8007070 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800701a:	f000 fcb8 	bl	800798e <USBD_GetEpDesc>
 800701e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007020:	2181      	movs	r1, #129	@ 0x81
 8007022:	4813      	ldr	r0, [pc, #76]	@ (8007070 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007024:	f000 fcb3 	bl	800798e <USBD_GetEpDesc>
 8007028:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d002      	beq.n	8007036 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	2210      	movs	r2, #16
 8007034:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d006      	beq.n	800704a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	2200      	movs	r2, #0
 8007040:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007044:	711a      	strb	r2, [r3, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d006      	beq.n	800705e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2200      	movs	r2, #0
 8007054:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007058:	711a      	strb	r2, [r3, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2243      	movs	r2, #67	@ 0x43
 8007062:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007064:	4b02      	ldr	r3, [pc, #8]	@ (8007070 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007066:	4618      	mov	r0, r3
 8007068:	3718      	adds	r7, #24
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	20000058 	.word	0x20000058

08007074 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800707c:	2182      	movs	r1, #130	@ 0x82
 800707e:	4818      	ldr	r0, [pc, #96]	@ (80070e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007080:	f000 fc85 	bl	800798e <USBD_GetEpDesc>
 8007084:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007086:	2101      	movs	r1, #1
 8007088:	4815      	ldr	r0, [pc, #84]	@ (80070e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800708a:	f000 fc80 	bl	800798e <USBD_GetEpDesc>
 800708e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007090:	2181      	movs	r1, #129	@ 0x81
 8007092:	4813      	ldr	r0, [pc, #76]	@ (80070e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007094:	f000 fc7b 	bl	800798e <USBD_GetEpDesc>
 8007098:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d002      	beq.n	80070a6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	2210      	movs	r2, #16
 80070a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d006      	beq.n	80070ba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	2200      	movs	r2, #0
 80070b0:	711a      	strb	r2, [r3, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f042 0202 	orr.w	r2, r2, #2
 80070b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d006      	beq.n	80070ce <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	711a      	strb	r2, [r3, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f042 0202 	orr.w	r2, r2, #2
 80070cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2243      	movs	r2, #67	@ 0x43
 80070d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80070d4:	4b02      	ldr	r3, [pc, #8]	@ (80070e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3718      	adds	r7, #24
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	20000058 	.word	0x20000058

080070e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b086      	sub	sp, #24
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80070ec:	2182      	movs	r1, #130	@ 0x82
 80070ee:	4818      	ldr	r0, [pc, #96]	@ (8007150 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070f0:	f000 fc4d 	bl	800798e <USBD_GetEpDesc>
 80070f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80070f6:	2101      	movs	r1, #1
 80070f8:	4815      	ldr	r0, [pc, #84]	@ (8007150 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070fa:	f000 fc48 	bl	800798e <USBD_GetEpDesc>
 80070fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007100:	2181      	movs	r1, #129	@ 0x81
 8007102:	4813      	ldr	r0, [pc, #76]	@ (8007150 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007104:	f000 fc43 	bl	800798e <USBD_GetEpDesc>
 8007108:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d002      	beq.n	8007116 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	2210      	movs	r2, #16
 8007114:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d006      	beq.n	800712a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	2200      	movs	r2, #0
 8007120:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007124:	711a      	strb	r2, [r3, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d006      	beq.n	800713e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007138:	711a      	strb	r2, [r3, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2243      	movs	r2, #67	@ 0x43
 8007142:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007144:	4b02      	ldr	r3, [pc, #8]	@ (8007150 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007146:	4618      	mov	r0, r3
 8007148:	3718      	adds	r7, #24
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	20000058 	.word	0x20000058

08007154 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	220a      	movs	r2, #10
 8007160:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007162:	4b03      	ldr	r3, [pc, #12]	@ (8007170 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007164:	4618      	mov	r0, r3
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr
 8007170:	20000014 	.word	0x20000014

08007174 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d101      	bne.n	8007188 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007184:	2303      	movs	r3, #3
 8007186:	e009      	b.n	800719c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	33b0      	adds	r3, #176	@ 0xb0
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4413      	add	r3, r2
 8007196:	683a      	ldr	r2, [r7, #0]
 8007198:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b087      	sub	sp, #28
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	32b0      	adds	r2, #176	@ 0xb0
 80071be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071c2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e008      	b.n	80071e0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	68ba      	ldr	r2, [r7, #8]
 80071d2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	371c      	adds	r7, #28
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	32b0      	adds	r2, #176	@ 0xb0
 8007200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007204:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d101      	bne.n	8007210 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800720c:	2303      	movs	r3, #3
 800720e:	e004      	b.n	800721a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3714      	adds	r7, #20
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
	...

08007228 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	32b0      	adds	r2, #176	@ 0xb0
 800723a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800723e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007240:	2301      	movs	r3, #1
 8007242:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800724a:	2303      	movs	r3, #3
 800724c:	e025      	b.n	800729a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007254:	2b00      	cmp	r3, #0
 8007256:	d11f      	bne.n	8007298 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	2201      	movs	r2, #1
 800725c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007260:	4b10      	ldr	r3, [pc, #64]	@ (80072a4 <USBD_CDC_TransmitPacket+0x7c>)
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	f003 020f 	and.w	r2, r3, #15
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	4613      	mov	r3, r2
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4403      	add	r3, r0
 800727a:	3318      	adds	r3, #24
 800727c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800727e:	4b09      	ldr	r3, [pc, #36]	@ (80072a4 <USBD_CDC_TransmitPacket+0x7c>)
 8007280:	7819      	ldrb	r1, [r3, #0]
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f001 ff59 	bl	8009146 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007294:	2300      	movs	r3, #0
 8007296:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007298:	7bfb      	ldrb	r3, [r7, #15]
}
 800729a:	4618      	mov	r0, r3
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	2000009b 	.word	0x2000009b

080072a8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	32b0      	adds	r2, #176	@ 0xb0
 80072ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072be:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	32b0      	adds	r2, #176	@ 0xb0
 80072ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d101      	bne.n	80072d6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e018      	b.n	8007308 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	7c1b      	ldrb	r3, [r3, #16]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10a      	bne.n	80072f4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80072de:	4b0c      	ldr	r3, [pc, #48]	@ (8007310 <USBD_CDC_ReceivePacket+0x68>)
 80072e0:	7819      	ldrb	r1, [r3, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80072e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f001 ff4b 	bl	8009188 <USBD_LL_PrepareReceive>
 80072f2:	e008      	b.n	8007306 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80072f4:	4b06      	ldr	r3, [pc, #24]	@ (8007310 <USBD_CDC_ReceivePacket+0x68>)
 80072f6:	7819      	ldrb	r1, [r3, #0]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80072fe:	2340      	movs	r3, #64	@ 0x40
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f001 ff41 	bl	8009188 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	2000009c 	.word	0x2000009c

08007314 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b086      	sub	sp, #24
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	4613      	mov	r3, r2
 8007320:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d101      	bne.n	800732c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007328:	2303      	movs	r3, #3
 800732a:	e01f      	b.n	800736c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2200      	movs	r2, #0
 8007330:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2200      	movs	r2, #0
 8007340:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d003      	beq.n	8007352 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2201      	movs	r2, #1
 8007356:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	79fa      	ldrb	r2, [r7, #7]
 800735e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f001 fda5 	bl	8008eb0 <USBD_LL_Init>
 8007366:	4603      	mov	r3, r0
 8007368:	75fb      	strb	r3, [r7, #23]

  return ret;
 800736a:	7dfb      	ldrb	r3, [r7, #23]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3718      	adds	r7, #24
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800737e:	2300      	movs	r3, #0
 8007380:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d101      	bne.n	800738c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007388:	2303      	movs	r3, #3
 800738a:	e025      	b.n	80073d8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	683a      	ldr	r2, [r7, #0]
 8007390:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	32ae      	adds	r2, #174	@ 0xae
 800739e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00f      	beq.n	80073c8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	32ae      	adds	r2, #174	@ 0xae
 80073b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b8:	f107 020e 	add.w	r2, r7, #14
 80073bc:	4610      	mov	r0, r2
 80073be:	4798      	blx	r3
 80073c0:	4602      	mov	r2, r0
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80073ce:	1c5a      	adds	r2, r3, #1
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f001 fdc3 	bl	8008f74 <USBD_LL_Start>
 80073ee:	4603      	mov	r3, r0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007400:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007402:	4618      	mov	r0, r3
 8007404:	370c      	adds	r7, #12
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b084      	sub	sp, #16
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
 8007416:	460b      	mov	r3, r1
 8007418:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800741a:	2300      	movs	r3, #0
 800741c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007424:	2b00      	cmp	r3, #0
 8007426:	d009      	beq.n	800743c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	78fa      	ldrb	r2, [r7, #3]
 8007432:	4611      	mov	r1, r2
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	4798      	blx	r3
 8007438:	4603      	mov	r3, r0
 800743a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800743c:	7bfb      	ldrb	r3, [r7, #15]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b084      	sub	sp, #16
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
 800744e:	460b      	mov	r3, r1
 8007450:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	78fa      	ldrb	r2, [r7, #3]
 8007460:	4611      	mov	r1, r2
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	4798      	blx	r3
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800746c:	2303      	movs	r3, #3
 800746e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007470:	7bfb      	ldrb	r3, [r7, #15]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b084      	sub	sp, #16
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
 8007482:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800748a:	6839      	ldr	r1, [r7, #0]
 800748c:	4618      	mov	r0, r3
 800748e:	f001 f8a4 	bl	80085da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80074a0:	461a      	mov	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80074ae:	f003 031f 	and.w	r3, r3, #31
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d01a      	beq.n	80074ec <USBD_LL_SetupStage+0x72>
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d822      	bhi.n	8007500 <USBD_LL_SetupStage+0x86>
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d002      	beq.n	80074c4 <USBD_LL_SetupStage+0x4a>
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d00a      	beq.n	80074d8 <USBD_LL_SetupStage+0x5e>
 80074c2:	e01d      	b.n	8007500 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80074ca:	4619      	mov	r1, r3
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fad1 	bl	8007a74 <USBD_StdDevReq>
 80074d2:	4603      	mov	r3, r0
 80074d4:	73fb      	strb	r3, [r7, #15]
      break;
 80074d6:	e020      	b.n	800751a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80074de:	4619      	mov	r1, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fb39 	bl	8007b58 <USBD_StdItfReq>
 80074e6:	4603      	mov	r3, r0
 80074e8:	73fb      	strb	r3, [r7, #15]
      break;
 80074ea:	e016      	b.n	800751a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80074f2:	4619      	mov	r1, r3
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 fb9b 	bl	8007c30 <USBD_StdEPReq>
 80074fa:	4603      	mov	r3, r0
 80074fc:	73fb      	strb	r3, [r7, #15]
      break;
 80074fe:	e00c      	b.n	800751a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007506:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800750a:	b2db      	uxtb	r3, r3
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f001 fd90 	bl	8009034 <USBD_LL_StallEP>
 8007514:	4603      	mov	r3, r0
 8007516:	73fb      	strb	r3, [r7, #15]
      break;
 8007518:	bf00      	nop
  }

  return ret;
 800751a:	7bfb      	ldrb	r3, [r7, #15]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b086      	sub	sp, #24
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	460b      	mov	r3, r1
 800752e:	607a      	str	r2, [r7, #4]
 8007530:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007532:	2300      	movs	r3, #0
 8007534:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007536:	7afb      	ldrb	r3, [r7, #11]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d16e      	bne.n	800761a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007542:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800754a:	2b03      	cmp	r3, #3
 800754c:	f040 8098 	bne.w	8007680 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	689a      	ldr	r2, [r3, #8]
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	429a      	cmp	r2, r3
 800755a:	d913      	bls.n	8007584 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	689a      	ldr	r2, [r3, #8]
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	1ad2      	subs	r2, r2, r3
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	68da      	ldr	r2, [r3, #12]
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	4293      	cmp	r3, r2
 8007574:	bf28      	it	cs
 8007576:	4613      	movcs	r3, r2
 8007578:	461a      	mov	r2, r3
 800757a:	6879      	ldr	r1, [r7, #4]
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f001 f920 	bl	80087c2 <USBD_CtlContinueRx>
 8007582:	e07d      	b.n	8007680 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800758a:	f003 031f 	and.w	r3, r3, #31
 800758e:	2b02      	cmp	r3, #2
 8007590:	d014      	beq.n	80075bc <USBD_LL_DataOutStage+0x98>
 8007592:	2b02      	cmp	r3, #2
 8007594:	d81d      	bhi.n	80075d2 <USBD_LL_DataOutStage+0xae>
 8007596:	2b00      	cmp	r3, #0
 8007598:	d002      	beq.n	80075a0 <USBD_LL_DataOutStage+0x7c>
 800759a:	2b01      	cmp	r3, #1
 800759c:	d003      	beq.n	80075a6 <USBD_LL_DataOutStage+0x82>
 800759e:	e018      	b.n	80075d2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80075a0:	2300      	movs	r3, #0
 80075a2:	75bb      	strb	r3, [r7, #22]
            break;
 80075a4:	e018      	b.n	80075d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	4619      	mov	r1, r3
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f000 f9d2 	bl	800795a <USBD_CoreFindIF>
 80075b6:	4603      	mov	r3, r0
 80075b8:	75bb      	strb	r3, [r7, #22]
            break;
 80075ba:	e00d      	b.n	80075d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	4619      	mov	r1, r3
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f000 f9d4 	bl	8007974 <USBD_CoreFindEP>
 80075cc:	4603      	mov	r3, r0
 80075ce:	75bb      	strb	r3, [r7, #22]
            break;
 80075d0:	e002      	b.n	80075d8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80075d2:	2300      	movs	r3, #0
 80075d4:	75bb      	strb	r3, [r7, #22]
            break;
 80075d6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80075d8:	7dbb      	ldrb	r3, [r7, #22]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d119      	bne.n	8007612 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b03      	cmp	r3, #3
 80075e8:	d113      	bne.n	8007612 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80075ea:	7dba      	ldrb	r2, [r7, #22]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	32ae      	adds	r2, #174	@ 0xae
 80075f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00b      	beq.n	8007612 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80075fa:	7dba      	ldrb	r2, [r7, #22]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007602:	7dba      	ldrb	r2, [r7, #22]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	32ae      	adds	r2, #174	@ 0xae
 8007608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f001 f8e6 	bl	80087e4 <USBD_CtlSendStatus>
 8007618:	e032      	b.n	8007680 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800761a:	7afb      	ldrb	r3, [r7, #11]
 800761c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007620:	b2db      	uxtb	r3, r3
 8007622:	4619      	mov	r1, r3
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f000 f9a5 	bl	8007974 <USBD_CoreFindEP>
 800762a:	4603      	mov	r3, r0
 800762c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800762e:	7dbb      	ldrb	r3, [r7, #22]
 8007630:	2bff      	cmp	r3, #255	@ 0xff
 8007632:	d025      	beq.n	8007680 <USBD_LL_DataOutStage+0x15c>
 8007634:	7dbb      	ldrb	r3, [r7, #22]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d122      	bne.n	8007680 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b03      	cmp	r3, #3
 8007644:	d117      	bne.n	8007676 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007646:	7dba      	ldrb	r2, [r7, #22]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	32ae      	adds	r2, #174	@ 0xae
 800764c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00f      	beq.n	8007676 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007656:	7dba      	ldrb	r2, [r7, #22]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800765e:	7dba      	ldrb	r2, [r7, #22]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	32ae      	adds	r2, #174	@ 0xae
 8007664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	7afa      	ldrb	r2, [r7, #11]
 800766c:	4611      	mov	r1, r2
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	4798      	blx	r3
 8007672:	4603      	mov	r3, r0
 8007674:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007676:	7dfb      	ldrb	r3, [r7, #23]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d001      	beq.n	8007680 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800767c:	7dfb      	ldrb	r3, [r7, #23]
 800767e:	e000      	b.n	8007682 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3718      	adds	r7, #24
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b086      	sub	sp, #24
 800768e:	af00      	add	r7, sp, #0
 8007690:	60f8      	str	r0, [r7, #12]
 8007692:	460b      	mov	r3, r1
 8007694:	607a      	str	r2, [r7, #4]
 8007696:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007698:	7afb      	ldrb	r3, [r7, #11]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d16f      	bne.n	800777e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	3314      	adds	r3, #20
 80076a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d15a      	bne.n	8007764 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	689a      	ldr	r2, [r3, #8]
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d914      	bls.n	80076e4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	689a      	ldr	r2, [r3, #8]
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	1ad2      	subs	r2, r2, r3
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	461a      	mov	r2, r3
 80076ce:	6879      	ldr	r1, [r7, #4]
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f001 f848 	bl	8008766 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076d6:	2300      	movs	r3, #0
 80076d8:	2200      	movs	r2, #0
 80076da:	2100      	movs	r1, #0
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f001 fd53 	bl	8009188 <USBD_LL_PrepareReceive>
 80076e2:	e03f      	b.n	8007764 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	68da      	ldr	r2, [r3, #12]
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d11c      	bne.n	800772a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d316      	bcc.n	800772a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	685a      	ldr	r2, [r3, #4]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007706:	429a      	cmp	r2, r3
 8007708:	d20f      	bcs.n	800772a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800770a:	2200      	movs	r2, #0
 800770c:	2100      	movs	r1, #0
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f001 f829 	bl	8008766 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2200      	movs	r2, #0
 8007718:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800771c:	2300      	movs	r3, #0
 800771e:	2200      	movs	r2, #0
 8007720:	2100      	movs	r1, #0
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f001 fd30 	bl	8009188 <USBD_LL_PrepareReceive>
 8007728:	e01c      	b.n	8007764 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007730:	b2db      	uxtb	r3, r3
 8007732:	2b03      	cmp	r3, #3
 8007734:	d10f      	bne.n	8007756 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d009      	beq.n	8007756 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007756:	2180      	movs	r1, #128	@ 0x80
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f001 fc6b 	bl	8009034 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	f001 f853 	bl	800880a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d03a      	beq.n	80077e4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f7ff fe42 	bl	80073f8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800777c:	e032      	b.n	80077e4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800777e:	7afb      	ldrb	r3, [r7, #11]
 8007780:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007784:	b2db      	uxtb	r3, r3
 8007786:	4619      	mov	r1, r3
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f000 f8f3 	bl	8007974 <USBD_CoreFindEP>
 800778e:	4603      	mov	r3, r0
 8007790:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007792:	7dfb      	ldrb	r3, [r7, #23]
 8007794:	2bff      	cmp	r3, #255	@ 0xff
 8007796:	d025      	beq.n	80077e4 <USBD_LL_DataInStage+0x15a>
 8007798:	7dfb      	ldrb	r3, [r7, #23]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d122      	bne.n	80077e4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b03      	cmp	r3, #3
 80077a8:	d11c      	bne.n	80077e4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80077aa:	7dfa      	ldrb	r2, [r7, #23]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	32ae      	adds	r2, #174	@ 0xae
 80077b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d014      	beq.n	80077e4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80077ba:	7dfa      	ldrb	r2, [r7, #23]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80077c2:	7dfa      	ldrb	r2, [r7, #23]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	32ae      	adds	r2, #174	@ 0xae
 80077c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	7afa      	ldrb	r2, [r7, #11]
 80077d0:	4611      	mov	r1, r2
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	4798      	blx	r3
 80077d6:	4603      	mov	r3, r0
 80077d8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80077da:	7dbb      	ldrb	r3, [r7, #22]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d001      	beq.n	80077e4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80077e0:	7dbb      	ldrb	r3, [r7, #22]
 80077e2:	e000      	b.n	80077e6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3718      	adds	r7, #24
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b084      	sub	sp, #16
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80077f6:	2300      	movs	r3, #0
 80077f8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007826:	2b00      	cmp	r3, #0
 8007828:	d014      	beq.n	8007854 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00e      	beq.n	8007854 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	6852      	ldr	r2, [r2, #4]
 8007842:	b2d2      	uxtb	r2, r2
 8007844:	4611      	mov	r1, r2
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	4798      	blx	r3
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d001      	beq.n	8007854 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007850:	2303      	movs	r3, #3
 8007852:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007854:	2340      	movs	r3, #64	@ 0x40
 8007856:	2200      	movs	r2, #0
 8007858:	2100      	movs	r1, #0
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f001 fba5 	bl	8008faa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2240      	movs	r2, #64	@ 0x40
 800786c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007870:	2340      	movs	r3, #64	@ 0x40
 8007872:	2200      	movs	r2, #0
 8007874:	2180      	movs	r1, #128	@ 0x80
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f001 fb97 	bl	8008faa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2240      	movs	r2, #64	@ 0x40
 8007886:	621a      	str	r2, [r3, #32]

  return ret;
 8007888:	7bfb      	ldrb	r3, [r7, #15]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
 800789a:	460b      	mov	r3, r1
 800789c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	78fa      	ldrb	r2, [r7, #3]
 80078a2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b083      	sub	sp, #12
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b04      	cmp	r3, #4
 80078c4:	d006      	beq.n	80078d4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078cc:	b2da      	uxtb	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2204      	movs	r2, #4
 80078d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	370c      	adds	r7, #12
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr

080078ea <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80078ea:	b480      	push	{r7}
 80078ec:	b083      	sub	sp, #12
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	2b04      	cmp	r3, #4
 80078fc:	d106      	bne.n	800790c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007904:	b2da      	uxtb	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b082      	sub	sp, #8
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b03      	cmp	r3, #3
 800792c:	d110      	bne.n	8007950 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00b      	beq.n	8007950 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800793e:	69db      	ldr	r3, [r3, #28]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d005      	beq.n	8007950 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800794a:	69db      	ldr	r3, [r3, #28]
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800795a:	b480      	push	{r7}
 800795c:	b083      	sub	sp, #12
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
 8007962:	460b      	mov	r3, r1
 8007964:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007966:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007968:	4618      	mov	r0, r3
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	460b      	mov	r3, r1
 800797e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007980:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007982:	4618      	mov	r0, r3
 8007984:	370c      	adds	r7, #12
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr

0800798e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b086      	sub	sp, #24
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	460b      	mov	r3, r1
 8007998:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80079a2:	2300      	movs	r3, #0
 80079a4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	885b      	ldrh	r3, [r3, #2]
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	7812      	ldrb	r2, [r2, #0]
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d91f      	bls.n	80079f4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80079ba:	e013      	b.n	80079e4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80079bc:	f107 030a 	add.w	r3, r7, #10
 80079c0:	4619      	mov	r1, r3
 80079c2:	6978      	ldr	r0, [r7, #20]
 80079c4:	f000 f81b 	bl	80079fe <USBD_GetNextDesc>
 80079c8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	785b      	ldrb	r3, [r3, #1]
 80079ce:	2b05      	cmp	r3, #5
 80079d0:	d108      	bne.n	80079e4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	789b      	ldrb	r3, [r3, #2]
 80079da:	78fa      	ldrb	r2, [r7, #3]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d008      	beq.n	80079f2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80079e0:	2300      	movs	r3, #0
 80079e2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	885b      	ldrh	r3, [r3, #2]
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	897b      	ldrh	r3, [r7, #10]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d8e5      	bhi.n	80079bc <USBD_GetEpDesc+0x2e>
 80079f0:	e000      	b.n	80079f4 <USBD_GetEpDesc+0x66>
          break;
 80079f2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80079f4:	693b      	ldr	r3, [r7, #16]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3718      	adds	r7, #24
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80079fe:	b480      	push	{r7}
 8007a00:	b085      	sub	sp, #20
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	881b      	ldrh	r3, [r3, #0]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	7812      	ldrb	r2, [r2, #0]
 8007a14:	4413      	add	r3, r2
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	461a      	mov	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4413      	add	r3, r2
 8007a26:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007a28:	68fb      	ldr	r3, [r7, #12]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3714      	adds	r7, #20
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007a36:	b480      	push	{r7}
 8007a38:	b087      	sub	sp, #28
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007a54:	8a3b      	ldrh	r3, [r7, #16]
 8007a56:	021b      	lsls	r3, r3, #8
 8007a58:	b21a      	sxth	r2, r3
 8007a5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	b21b      	sxth	r3, r3
 8007a62:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007a64:	89fb      	ldrh	r3, [r7, #14]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	371c      	adds	r7, #28
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
	...

08007a74 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a8a:	2b40      	cmp	r3, #64	@ 0x40
 8007a8c:	d005      	beq.n	8007a9a <USBD_StdDevReq+0x26>
 8007a8e:	2b40      	cmp	r3, #64	@ 0x40
 8007a90:	d857      	bhi.n	8007b42 <USBD_StdDevReq+0xce>
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00f      	beq.n	8007ab6 <USBD_StdDevReq+0x42>
 8007a96:	2b20      	cmp	r3, #32
 8007a98:	d153      	bne.n	8007b42 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	32ae      	adds	r2, #174	@ 0xae
 8007aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	4798      	blx	r3
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ab4:	e04a      	b.n	8007b4c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	785b      	ldrb	r3, [r3, #1]
 8007aba:	2b09      	cmp	r3, #9
 8007abc:	d83b      	bhi.n	8007b36 <USBD_StdDevReq+0xc2>
 8007abe:	a201      	add	r2, pc, #4	@ (adr r2, 8007ac4 <USBD_StdDevReq+0x50>)
 8007ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac4:	08007b19 	.word	0x08007b19
 8007ac8:	08007b2d 	.word	0x08007b2d
 8007acc:	08007b37 	.word	0x08007b37
 8007ad0:	08007b23 	.word	0x08007b23
 8007ad4:	08007b37 	.word	0x08007b37
 8007ad8:	08007af7 	.word	0x08007af7
 8007adc:	08007aed 	.word	0x08007aed
 8007ae0:	08007b37 	.word	0x08007b37
 8007ae4:	08007b0f 	.word	0x08007b0f
 8007ae8:	08007b01 	.word	0x08007b01
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007aec:	6839      	ldr	r1, [r7, #0]
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fa3c 	bl	8007f6c <USBD_GetDescriptor>
          break;
 8007af4:	e024      	b.n	8007b40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007af6:	6839      	ldr	r1, [r7, #0]
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 fbcb 	bl	8008294 <USBD_SetAddress>
          break;
 8007afe:	e01f      	b.n	8007b40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007b00:	6839      	ldr	r1, [r7, #0]
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fc0a 	bl	800831c <USBD_SetConfig>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	73fb      	strb	r3, [r7, #15]
          break;
 8007b0c:	e018      	b.n	8007b40 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007b0e:	6839      	ldr	r1, [r7, #0]
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 fcad 	bl	8008470 <USBD_GetConfig>
          break;
 8007b16:	e013      	b.n	8007b40 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007b18:	6839      	ldr	r1, [r7, #0]
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fcde 	bl	80084dc <USBD_GetStatus>
          break;
 8007b20:	e00e      	b.n	8007b40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fd0d 	bl	8008544 <USBD_SetFeature>
          break;
 8007b2a:	e009      	b.n	8007b40 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007b2c:	6839      	ldr	r1, [r7, #0]
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fd31 	bl	8008596 <USBD_ClrFeature>
          break;
 8007b34:	e004      	b.n	8007b40 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007b36:	6839      	ldr	r1, [r7, #0]
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 fd88 	bl	800864e <USBD_CtlError>
          break;
 8007b3e:	bf00      	nop
      }
      break;
 8007b40:	e004      	b.n	8007b4c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 fd82 	bl	800864e <USBD_CtlError>
      break;
 8007b4a:	bf00      	nop
  }

  return ret;
 8007b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop

08007b58 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b62:	2300      	movs	r3, #0
 8007b64:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b6e:	2b40      	cmp	r3, #64	@ 0x40
 8007b70:	d005      	beq.n	8007b7e <USBD_StdItfReq+0x26>
 8007b72:	2b40      	cmp	r3, #64	@ 0x40
 8007b74:	d852      	bhi.n	8007c1c <USBD_StdItfReq+0xc4>
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d001      	beq.n	8007b7e <USBD_StdItfReq+0x26>
 8007b7a:	2b20      	cmp	r3, #32
 8007b7c:	d14e      	bne.n	8007c1c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	3b01      	subs	r3, #1
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d840      	bhi.n	8007c0e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	889b      	ldrh	r3, [r3, #4]
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d836      	bhi.n	8007c04 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	889b      	ldrh	r3, [r3, #4]
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f7ff fedb 	bl	800795a <USBD_CoreFindIF>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ba8:	7bbb      	ldrb	r3, [r7, #14]
 8007baa:	2bff      	cmp	r3, #255	@ 0xff
 8007bac:	d01d      	beq.n	8007bea <USBD_StdItfReq+0x92>
 8007bae:	7bbb      	ldrb	r3, [r7, #14]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d11a      	bne.n	8007bea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007bb4:	7bba      	ldrb	r2, [r7, #14]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	32ae      	adds	r2, #174	@ 0xae
 8007bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00f      	beq.n	8007be4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007bc4:	7bba      	ldrb	r2, [r7, #14]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007bcc:	7bba      	ldrb	r2, [r7, #14]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	32ae      	adds	r2, #174	@ 0xae
 8007bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	6839      	ldr	r1, [r7, #0]
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	4798      	blx	r3
 8007bde:	4603      	mov	r3, r0
 8007be0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007be2:	e004      	b.n	8007bee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007be4:	2303      	movs	r3, #3
 8007be6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007be8:	e001      	b.n	8007bee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007bea:	2303      	movs	r3, #3
 8007bec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	88db      	ldrh	r3, [r3, #6]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d110      	bne.n	8007c18 <USBD_StdItfReq+0xc0>
 8007bf6:	7bfb      	ldrb	r3, [r7, #15]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d10d      	bne.n	8007c18 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 fdf1 	bl	80087e4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007c02:	e009      	b.n	8007c18 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fd21 	bl	800864e <USBD_CtlError>
          break;
 8007c0c:	e004      	b.n	8007c18 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007c0e:	6839      	ldr	r1, [r7, #0]
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 fd1c 	bl	800864e <USBD_CtlError>
          break;
 8007c16:	e000      	b.n	8007c1a <USBD_StdItfReq+0xc2>
          break;
 8007c18:	bf00      	nop
      }
      break;
 8007c1a:	e004      	b.n	8007c26 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007c1c:	6839      	ldr	r1, [r7, #0]
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fd15 	bl	800864e <USBD_CtlError>
      break;
 8007c24:	bf00      	nop
  }

  return ret;
 8007c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	889b      	ldrh	r3, [r3, #4]
 8007c42:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c4c:	2b40      	cmp	r3, #64	@ 0x40
 8007c4e:	d007      	beq.n	8007c60 <USBD_StdEPReq+0x30>
 8007c50:	2b40      	cmp	r3, #64	@ 0x40
 8007c52:	f200 817f 	bhi.w	8007f54 <USBD_StdEPReq+0x324>
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d02a      	beq.n	8007cb0 <USBD_StdEPReq+0x80>
 8007c5a:	2b20      	cmp	r3, #32
 8007c5c:	f040 817a 	bne.w	8007f54 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007c60:	7bbb      	ldrb	r3, [r7, #14]
 8007c62:	4619      	mov	r1, r3
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f7ff fe85 	bl	8007974 <USBD_CoreFindEP>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c6e:	7b7b      	ldrb	r3, [r7, #13]
 8007c70:	2bff      	cmp	r3, #255	@ 0xff
 8007c72:	f000 8174 	beq.w	8007f5e <USBD_StdEPReq+0x32e>
 8007c76:	7b7b      	ldrb	r3, [r7, #13]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f040 8170 	bne.w	8007f5e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007c7e:	7b7a      	ldrb	r2, [r7, #13]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007c86:	7b7a      	ldrb	r2, [r7, #13]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	32ae      	adds	r2, #174	@ 0xae
 8007c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f000 8163 	beq.w	8007f5e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007c98:	7b7a      	ldrb	r2, [r7, #13]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	32ae      	adds	r2, #174	@ 0xae
 8007c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	6839      	ldr	r1, [r7, #0]
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	4798      	blx	r3
 8007caa:	4603      	mov	r3, r0
 8007cac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007cae:	e156      	b.n	8007f5e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	785b      	ldrb	r3, [r3, #1]
 8007cb4:	2b03      	cmp	r3, #3
 8007cb6:	d008      	beq.n	8007cca <USBD_StdEPReq+0x9a>
 8007cb8:	2b03      	cmp	r3, #3
 8007cba:	f300 8145 	bgt.w	8007f48 <USBD_StdEPReq+0x318>
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f000 809b 	beq.w	8007dfa <USBD_StdEPReq+0x1ca>
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d03c      	beq.n	8007d42 <USBD_StdEPReq+0x112>
 8007cc8:	e13e      	b.n	8007f48 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d002      	beq.n	8007cdc <USBD_StdEPReq+0xac>
 8007cd6:	2b03      	cmp	r3, #3
 8007cd8:	d016      	beq.n	8007d08 <USBD_StdEPReq+0xd8>
 8007cda:	e02c      	b.n	8007d36 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007cdc:	7bbb      	ldrb	r3, [r7, #14]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00d      	beq.n	8007cfe <USBD_StdEPReq+0xce>
 8007ce2:	7bbb      	ldrb	r3, [r7, #14]
 8007ce4:	2b80      	cmp	r3, #128	@ 0x80
 8007ce6:	d00a      	beq.n	8007cfe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ce8:	7bbb      	ldrb	r3, [r7, #14]
 8007cea:	4619      	mov	r1, r3
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f001 f9a1 	bl	8009034 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007cf2:	2180      	movs	r1, #128	@ 0x80
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f001 f99d 	bl	8009034 <USBD_LL_StallEP>
 8007cfa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007cfc:	e020      	b.n	8007d40 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 fca4 	bl	800864e <USBD_CtlError>
              break;
 8007d06:	e01b      	b.n	8007d40 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	885b      	ldrh	r3, [r3, #2]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10e      	bne.n	8007d2e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007d10:	7bbb      	ldrb	r3, [r7, #14]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00b      	beq.n	8007d2e <USBD_StdEPReq+0xfe>
 8007d16:	7bbb      	ldrb	r3, [r7, #14]
 8007d18:	2b80      	cmp	r3, #128	@ 0x80
 8007d1a:	d008      	beq.n	8007d2e <USBD_StdEPReq+0xfe>
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	88db      	ldrh	r3, [r3, #6]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d104      	bne.n	8007d2e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d24:	7bbb      	ldrb	r3, [r7, #14]
 8007d26:	4619      	mov	r1, r3
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f001 f983 	bl	8009034 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fd58 	bl	80087e4 <USBD_CtlSendStatus>

              break;
 8007d34:	e004      	b.n	8007d40 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007d36:	6839      	ldr	r1, [r7, #0]
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fc88 	bl	800864e <USBD_CtlError>
              break;
 8007d3e:	bf00      	nop
          }
          break;
 8007d40:	e107      	b.n	8007f52 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d002      	beq.n	8007d54 <USBD_StdEPReq+0x124>
 8007d4e:	2b03      	cmp	r3, #3
 8007d50:	d016      	beq.n	8007d80 <USBD_StdEPReq+0x150>
 8007d52:	e04b      	b.n	8007dec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d54:	7bbb      	ldrb	r3, [r7, #14]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00d      	beq.n	8007d76 <USBD_StdEPReq+0x146>
 8007d5a:	7bbb      	ldrb	r3, [r7, #14]
 8007d5c:	2b80      	cmp	r3, #128	@ 0x80
 8007d5e:	d00a      	beq.n	8007d76 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d60:	7bbb      	ldrb	r3, [r7, #14]
 8007d62:	4619      	mov	r1, r3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f001 f965 	bl	8009034 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d6a:	2180      	movs	r1, #128	@ 0x80
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f001 f961 	bl	8009034 <USBD_LL_StallEP>
 8007d72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d74:	e040      	b.n	8007df8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007d76:	6839      	ldr	r1, [r7, #0]
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 fc68 	bl	800864e <USBD_CtlError>
              break;
 8007d7e:	e03b      	b.n	8007df8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	885b      	ldrh	r3, [r3, #2]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d136      	bne.n	8007df6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007d88:	7bbb      	ldrb	r3, [r7, #14]
 8007d8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d004      	beq.n	8007d9c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007d92:	7bbb      	ldrb	r3, [r7, #14]
 8007d94:	4619      	mov	r1, r3
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f001 f96b 	bl	8009072 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fd21 	bl	80087e4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007da2:	7bbb      	ldrb	r3, [r7, #14]
 8007da4:	4619      	mov	r1, r3
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f7ff fde4 	bl	8007974 <USBD_CoreFindEP>
 8007dac:	4603      	mov	r3, r0
 8007dae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007db0:	7b7b      	ldrb	r3, [r7, #13]
 8007db2:	2bff      	cmp	r3, #255	@ 0xff
 8007db4:	d01f      	beq.n	8007df6 <USBD_StdEPReq+0x1c6>
 8007db6:	7b7b      	ldrb	r3, [r7, #13]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d11c      	bne.n	8007df6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007dbc:	7b7a      	ldrb	r2, [r7, #13]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007dc4:	7b7a      	ldrb	r2, [r7, #13]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	32ae      	adds	r2, #174	@ 0xae
 8007dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d010      	beq.n	8007df6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007dd4:	7b7a      	ldrb	r2, [r7, #13]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	32ae      	adds	r2, #174	@ 0xae
 8007dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	4798      	blx	r3
 8007de6:	4603      	mov	r3, r0
 8007de8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007dea:	e004      	b.n	8007df6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007dec:	6839      	ldr	r1, [r7, #0]
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 fc2d 	bl	800864e <USBD_CtlError>
              break;
 8007df4:	e000      	b.n	8007df8 <USBD_StdEPReq+0x1c8>
              break;
 8007df6:	bf00      	nop
          }
          break;
 8007df8:	e0ab      	b.n	8007f52 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d002      	beq.n	8007e0c <USBD_StdEPReq+0x1dc>
 8007e06:	2b03      	cmp	r3, #3
 8007e08:	d032      	beq.n	8007e70 <USBD_StdEPReq+0x240>
 8007e0a:	e097      	b.n	8007f3c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e0c:	7bbb      	ldrb	r3, [r7, #14]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d007      	beq.n	8007e22 <USBD_StdEPReq+0x1f2>
 8007e12:	7bbb      	ldrb	r3, [r7, #14]
 8007e14:	2b80      	cmp	r3, #128	@ 0x80
 8007e16:	d004      	beq.n	8007e22 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007e18:	6839      	ldr	r1, [r7, #0]
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 fc17 	bl	800864e <USBD_CtlError>
                break;
 8007e20:	e091      	b.n	8007f46 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	da0b      	bge.n	8007e42 <USBD_StdEPReq+0x212>
 8007e2a:	7bbb      	ldrb	r3, [r7, #14]
 8007e2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e30:	4613      	mov	r3, r2
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	4413      	add	r3, r2
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	3310      	adds	r3, #16
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	3304      	adds	r3, #4
 8007e40:	e00b      	b.n	8007e5a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e42:	7bbb      	ldrb	r3, [r7, #14]
 8007e44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e48:	4613      	mov	r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	4413      	add	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	4413      	add	r3, r2
 8007e58:	3304      	adds	r3, #4
 8007e5a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	2202      	movs	r2, #2
 8007e66:	4619      	mov	r1, r3
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 fc61 	bl	8008730 <USBD_CtlSendData>
              break;
 8007e6e:	e06a      	b.n	8007f46 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007e70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	da11      	bge.n	8007e9c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007e78:	7bbb      	ldrb	r3, [r7, #14]
 8007e7a:	f003 020f 	and.w	r2, r3, #15
 8007e7e:	6879      	ldr	r1, [r7, #4]
 8007e80:	4613      	mov	r3, r2
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4413      	add	r3, r2
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	440b      	add	r3, r1
 8007e8a:	3324      	adds	r3, #36	@ 0x24
 8007e8c:	881b      	ldrh	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d117      	bne.n	8007ec2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007e92:	6839      	ldr	r1, [r7, #0]
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fbda 	bl	800864e <USBD_CtlError>
                  break;
 8007e9a:	e054      	b.n	8007f46 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007e9c:	7bbb      	ldrb	r3, [r7, #14]
 8007e9e:	f003 020f 	and.w	r2, r3, #15
 8007ea2:	6879      	ldr	r1, [r7, #4]
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	4413      	add	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	440b      	add	r3, r1
 8007eae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007eb2:	881b      	ldrh	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d104      	bne.n	8007ec2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fbc7 	bl	800864e <USBD_CtlError>
                  break;
 8007ec0:	e041      	b.n	8007f46 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ec2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	da0b      	bge.n	8007ee2 <USBD_StdEPReq+0x2b2>
 8007eca:	7bbb      	ldrb	r3, [r7, #14]
 8007ecc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	4413      	add	r3, r2
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	3310      	adds	r3, #16
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	4413      	add	r3, r2
 8007ede:	3304      	adds	r3, #4
 8007ee0:	e00b      	b.n	8007efa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ee2:	7bbb      	ldrb	r3, [r7, #14]
 8007ee4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ee8:	4613      	mov	r3, r2
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	4413      	add	r3, r2
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	3304      	adds	r3, #4
 8007efa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007efc:	7bbb      	ldrb	r3, [r7, #14]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d002      	beq.n	8007f08 <USBD_StdEPReq+0x2d8>
 8007f02:	7bbb      	ldrb	r3, [r7, #14]
 8007f04:	2b80      	cmp	r3, #128	@ 0x80
 8007f06:	d103      	bne.n	8007f10 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	601a      	str	r2, [r3, #0]
 8007f0e:	e00e      	b.n	8007f2e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007f10:	7bbb      	ldrb	r3, [r7, #14]
 8007f12:	4619      	mov	r1, r3
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f001 f8cb 	bl	80090b0 <USBD_LL_IsStallEP>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d003      	beq.n	8007f28 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	2201      	movs	r2, #1
 8007f24:	601a      	str	r2, [r3, #0]
 8007f26:	e002      	b.n	8007f2e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	2202      	movs	r2, #2
 8007f32:	4619      	mov	r1, r3
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 fbfb 	bl	8008730 <USBD_CtlSendData>
              break;
 8007f3a:	e004      	b.n	8007f46 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007f3c:	6839      	ldr	r1, [r7, #0]
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 fb85 	bl	800864e <USBD_CtlError>
              break;
 8007f44:	bf00      	nop
          }
          break;
 8007f46:	e004      	b.n	8007f52 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fb7f 	bl	800864e <USBD_CtlError>
          break;
 8007f50:	bf00      	nop
      }
      break;
 8007f52:	e005      	b.n	8007f60 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007f54:	6839      	ldr	r1, [r7, #0]
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 fb79 	bl	800864e <USBD_CtlError>
      break;
 8007f5c:	e000      	b.n	8007f60 <USBD_StdEPReq+0x330>
      break;
 8007f5e:	bf00      	nop
  }

  return ret;
 8007f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
	...

08007f6c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f76:	2300      	movs	r3, #0
 8007f78:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	885b      	ldrh	r3, [r3, #2]
 8007f86:	0a1b      	lsrs	r3, r3, #8
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	2b0e      	cmp	r3, #14
 8007f8e:	f200 8152 	bhi.w	8008236 <USBD_GetDescriptor+0x2ca>
 8007f92:	a201      	add	r2, pc, #4	@ (adr r2, 8007f98 <USBD_GetDescriptor+0x2c>)
 8007f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f98:	08008009 	.word	0x08008009
 8007f9c:	08008021 	.word	0x08008021
 8007fa0:	08008061 	.word	0x08008061
 8007fa4:	08008237 	.word	0x08008237
 8007fa8:	08008237 	.word	0x08008237
 8007fac:	080081d7 	.word	0x080081d7
 8007fb0:	08008203 	.word	0x08008203
 8007fb4:	08008237 	.word	0x08008237
 8007fb8:	08008237 	.word	0x08008237
 8007fbc:	08008237 	.word	0x08008237
 8007fc0:	08008237 	.word	0x08008237
 8007fc4:	08008237 	.word	0x08008237
 8007fc8:	08008237 	.word	0x08008237
 8007fcc:	08008237 	.word	0x08008237
 8007fd0:	08007fd5 	.word	0x08007fd5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fda:	69db      	ldr	r3, [r3, #28]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00b      	beq.n	8007ff8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fe6:	69db      	ldr	r3, [r3, #28]
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	7c12      	ldrb	r2, [r2, #16]
 8007fec:	f107 0108 	add.w	r1, r7, #8
 8007ff0:	4610      	mov	r0, r2
 8007ff2:	4798      	blx	r3
 8007ff4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ff6:	e126      	b.n	8008246 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007ff8:	6839      	ldr	r1, [r7, #0]
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 fb27 	bl	800864e <USBD_CtlError>
        err++;
 8008000:	7afb      	ldrb	r3, [r7, #11]
 8008002:	3301      	adds	r3, #1
 8008004:	72fb      	strb	r3, [r7, #11]
      break;
 8008006:	e11e      	b.n	8008246 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	7c12      	ldrb	r2, [r2, #16]
 8008014:	f107 0108 	add.w	r1, r7, #8
 8008018:	4610      	mov	r0, r2
 800801a:	4798      	blx	r3
 800801c:	60f8      	str	r0, [r7, #12]
      break;
 800801e:	e112      	b.n	8008246 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	7c1b      	ldrb	r3, [r3, #16]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10d      	bne.n	8008044 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800802e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008030:	f107 0208 	add.w	r2, r7, #8
 8008034:	4610      	mov	r0, r2
 8008036:	4798      	blx	r3
 8008038:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	3301      	adds	r3, #1
 800803e:	2202      	movs	r2, #2
 8008040:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008042:	e100      	b.n	8008246 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800804a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800804c:	f107 0208 	add.w	r2, r7, #8
 8008050:	4610      	mov	r0, r2
 8008052:	4798      	blx	r3
 8008054:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	3301      	adds	r3, #1
 800805a:	2202      	movs	r2, #2
 800805c:	701a      	strb	r2, [r3, #0]
      break;
 800805e:	e0f2      	b.n	8008246 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	885b      	ldrh	r3, [r3, #2]
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b05      	cmp	r3, #5
 8008068:	f200 80ac 	bhi.w	80081c4 <USBD_GetDescriptor+0x258>
 800806c:	a201      	add	r2, pc, #4	@ (adr r2, 8008074 <USBD_GetDescriptor+0x108>)
 800806e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008072:	bf00      	nop
 8008074:	0800808d 	.word	0x0800808d
 8008078:	080080c1 	.word	0x080080c1
 800807c:	080080f5 	.word	0x080080f5
 8008080:	08008129 	.word	0x08008129
 8008084:	0800815d 	.word	0x0800815d
 8008088:	08008191 	.word	0x08008191
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00b      	beq.n	80080b0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	7c12      	ldrb	r2, [r2, #16]
 80080a4:	f107 0108 	add.w	r1, r7, #8
 80080a8:	4610      	mov	r0, r2
 80080aa:	4798      	blx	r3
 80080ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080ae:	e091      	b.n	80081d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80080b0:	6839      	ldr	r1, [r7, #0]
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 facb 	bl	800864e <USBD_CtlError>
            err++;
 80080b8:	7afb      	ldrb	r3, [r7, #11]
 80080ba:	3301      	adds	r3, #1
 80080bc:	72fb      	strb	r3, [r7, #11]
          break;
 80080be:	e089      	b.n	80081d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00b      	beq.n	80080e4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	7c12      	ldrb	r2, [r2, #16]
 80080d8:	f107 0108 	add.w	r1, r7, #8
 80080dc:	4610      	mov	r0, r2
 80080de:	4798      	blx	r3
 80080e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080e2:	e077      	b.n	80081d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80080e4:	6839      	ldr	r1, [r7, #0]
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fab1 	bl	800864e <USBD_CtlError>
            err++;
 80080ec:	7afb      	ldrb	r3, [r7, #11]
 80080ee:	3301      	adds	r3, #1
 80080f0:	72fb      	strb	r3, [r7, #11]
          break;
 80080f2:	e06f      	b.n	80081d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00b      	beq.n	8008118 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	7c12      	ldrb	r2, [r2, #16]
 800810c:	f107 0108 	add.w	r1, r7, #8
 8008110:	4610      	mov	r0, r2
 8008112:	4798      	blx	r3
 8008114:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008116:	e05d      	b.n	80081d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008118:	6839      	ldr	r1, [r7, #0]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 fa97 	bl	800864e <USBD_CtlError>
            err++;
 8008120:	7afb      	ldrb	r3, [r7, #11]
 8008122:	3301      	adds	r3, #1
 8008124:	72fb      	strb	r3, [r7, #11]
          break;
 8008126:	e055      	b.n	80081d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00b      	beq.n	800814c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	7c12      	ldrb	r2, [r2, #16]
 8008140:	f107 0108 	add.w	r1, r7, #8
 8008144:	4610      	mov	r0, r2
 8008146:	4798      	blx	r3
 8008148:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800814a:	e043      	b.n	80081d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800814c:	6839      	ldr	r1, [r7, #0]
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fa7d 	bl	800864e <USBD_CtlError>
            err++;
 8008154:	7afb      	ldrb	r3, [r7, #11]
 8008156:	3301      	adds	r3, #1
 8008158:	72fb      	strb	r3, [r7, #11]
          break;
 800815a:	e03b      	b.n	80081d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008162:	695b      	ldr	r3, [r3, #20]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00b      	beq.n	8008180 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800816e:	695b      	ldr	r3, [r3, #20]
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	7c12      	ldrb	r2, [r2, #16]
 8008174:	f107 0108 	add.w	r1, r7, #8
 8008178:	4610      	mov	r0, r2
 800817a:	4798      	blx	r3
 800817c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800817e:	e029      	b.n	80081d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008180:	6839      	ldr	r1, [r7, #0]
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fa63 	bl	800864e <USBD_CtlError>
            err++;
 8008188:	7afb      	ldrb	r3, [r7, #11]
 800818a:	3301      	adds	r3, #1
 800818c:	72fb      	strb	r3, [r7, #11]
          break;
 800818e:	e021      	b.n	80081d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00b      	beq.n	80081b4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	7c12      	ldrb	r2, [r2, #16]
 80081a8:	f107 0108 	add.w	r1, r7, #8
 80081ac:	4610      	mov	r0, r2
 80081ae:	4798      	blx	r3
 80081b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081b2:	e00f      	b.n	80081d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fa49 	bl	800864e <USBD_CtlError>
            err++;
 80081bc:	7afb      	ldrb	r3, [r7, #11]
 80081be:	3301      	adds	r3, #1
 80081c0:	72fb      	strb	r3, [r7, #11]
          break;
 80081c2:	e007      	b.n	80081d4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80081c4:	6839      	ldr	r1, [r7, #0]
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fa41 	bl	800864e <USBD_CtlError>
          err++;
 80081cc:	7afb      	ldrb	r3, [r7, #11]
 80081ce:	3301      	adds	r3, #1
 80081d0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80081d2:	bf00      	nop
      }
      break;
 80081d4:	e037      	b.n	8008246 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	7c1b      	ldrb	r3, [r3, #16]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d109      	bne.n	80081f2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081e6:	f107 0208 	add.w	r2, r7, #8
 80081ea:	4610      	mov	r0, r2
 80081ec:	4798      	blx	r3
 80081ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80081f0:	e029      	b.n	8008246 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80081f2:	6839      	ldr	r1, [r7, #0]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 fa2a 	bl	800864e <USBD_CtlError>
        err++;
 80081fa:	7afb      	ldrb	r3, [r7, #11]
 80081fc:	3301      	adds	r3, #1
 80081fe:	72fb      	strb	r3, [r7, #11]
      break;
 8008200:	e021      	b.n	8008246 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	7c1b      	ldrb	r3, [r3, #16]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d10d      	bne.n	8008226 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008212:	f107 0208 	add.w	r2, r7, #8
 8008216:	4610      	mov	r0, r2
 8008218:	4798      	blx	r3
 800821a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	3301      	adds	r3, #1
 8008220:	2207      	movs	r2, #7
 8008222:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008224:	e00f      	b.n	8008246 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008226:	6839      	ldr	r1, [r7, #0]
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fa10 	bl	800864e <USBD_CtlError>
        err++;
 800822e:	7afb      	ldrb	r3, [r7, #11]
 8008230:	3301      	adds	r3, #1
 8008232:	72fb      	strb	r3, [r7, #11]
      break;
 8008234:	e007      	b.n	8008246 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008236:	6839      	ldr	r1, [r7, #0]
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fa08 	bl	800864e <USBD_CtlError>
      err++;
 800823e:	7afb      	ldrb	r3, [r7, #11]
 8008240:	3301      	adds	r3, #1
 8008242:	72fb      	strb	r3, [r7, #11]
      break;
 8008244:	bf00      	nop
  }

  if (err != 0U)
 8008246:	7afb      	ldrb	r3, [r7, #11]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d11e      	bne.n	800828a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	88db      	ldrh	r3, [r3, #6]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d016      	beq.n	8008282 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008254:	893b      	ldrh	r3, [r7, #8]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00e      	beq.n	8008278 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	88da      	ldrh	r2, [r3, #6]
 800825e:	893b      	ldrh	r3, [r7, #8]
 8008260:	4293      	cmp	r3, r2
 8008262:	bf28      	it	cs
 8008264:	4613      	movcs	r3, r2
 8008266:	b29b      	uxth	r3, r3
 8008268:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800826a:	893b      	ldrh	r3, [r7, #8]
 800826c:	461a      	mov	r2, r3
 800826e:	68f9      	ldr	r1, [r7, #12]
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fa5d 	bl	8008730 <USBD_CtlSendData>
 8008276:	e009      	b.n	800828c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008278:	6839      	ldr	r1, [r7, #0]
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f9e7 	bl	800864e <USBD_CtlError>
 8008280:	e004      	b.n	800828c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 faae 	bl	80087e4 <USBD_CtlSendStatus>
 8008288:	e000      	b.n	800828c <USBD_GetDescriptor+0x320>
    return;
 800828a:	bf00      	nop
  }
}
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop

08008294 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	889b      	ldrh	r3, [r3, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d131      	bne.n	800830a <USBD_SetAddress+0x76>
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	88db      	ldrh	r3, [r3, #6]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d12d      	bne.n	800830a <USBD_SetAddress+0x76>
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	885b      	ldrh	r3, [r3, #2]
 80082b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80082b4:	d829      	bhi.n	800830a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	885b      	ldrh	r3, [r3, #2]
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	2b03      	cmp	r3, #3
 80082cc:	d104      	bne.n	80082d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80082ce:	6839      	ldr	r1, [r7, #0]
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f9bc 	bl	800864e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082d6:	e01d      	b.n	8008314 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	7bfa      	ldrb	r2, [r7, #15]
 80082dc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80082e0:	7bfb      	ldrb	r3, [r7, #15]
 80082e2:	4619      	mov	r1, r3
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 ff0f 	bl	8009108 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 fa7a 	bl	80087e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80082f0:	7bfb      	ldrb	r3, [r7, #15]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d004      	beq.n	8008300 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2202      	movs	r2, #2
 80082fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082fe:	e009      	b.n	8008314 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008308:	e004      	b.n	8008314 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800830a:	6839      	ldr	r1, [r7, #0]
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 f99e 	bl	800864e <USBD_CtlError>
  }
}
 8008312:	bf00      	nop
 8008314:	bf00      	nop
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008326:	2300      	movs	r3, #0
 8008328:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	885b      	ldrh	r3, [r3, #2]
 800832e:	b2da      	uxtb	r2, r3
 8008330:	4b4e      	ldr	r3, [pc, #312]	@ (800846c <USBD_SetConfig+0x150>)
 8008332:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008334:	4b4d      	ldr	r3, [pc, #308]	@ (800846c <USBD_SetConfig+0x150>)
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d905      	bls.n	8008348 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800833c:	6839      	ldr	r1, [r7, #0]
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f985 	bl	800864e <USBD_CtlError>
    return USBD_FAIL;
 8008344:	2303      	movs	r3, #3
 8008346:	e08c      	b.n	8008462 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800834e:	b2db      	uxtb	r3, r3
 8008350:	2b02      	cmp	r3, #2
 8008352:	d002      	beq.n	800835a <USBD_SetConfig+0x3e>
 8008354:	2b03      	cmp	r3, #3
 8008356:	d029      	beq.n	80083ac <USBD_SetConfig+0x90>
 8008358:	e075      	b.n	8008446 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800835a:	4b44      	ldr	r3, [pc, #272]	@ (800846c <USBD_SetConfig+0x150>)
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d020      	beq.n	80083a4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008362:	4b42      	ldr	r3, [pc, #264]	@ (800846c <USBD_SetConfig+0x150>)
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	461a      	mov	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800836c:	4b3f      	ldr	r3, [pc, #252]	@ (800846c <USBD_SetConfig+0x150>)
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	4619      	mov	r1, r3
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f7ff f84b 	bl	800740e <USBD_SetClassConfig>
 8008378:	4603      	mov	r3, r0
 800837a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800837c:	7bfb      	ldrb	r3, [r7, #15]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d008      	beq.n	8008394 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008382:	6839      	ldr	r1, [r7, #0]
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 f962 	bl	800864e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2202      	movs	r2, #2
 800838e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008392:	e065      	b.n	8008460 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 fa25 	bl	80087e4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2203      	movs	r2, #3
 800839e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80083a2:	e05d      	b.n	8008460 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 fa1d 	bl	80087e4 <USBD_CtlSendStatus>
      break;
 80083aa:	e059      	b.n	8008460 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80083ac:	4b2f      	ldr	r3, [pc, #188]	@ (800846c <USBD_SetConfig+0x150>)
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d112      	bne.n	80083da <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2202      	movs	r2, #2
 80083b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80083bc:	4b2b      	ldr	r3, [pc, #172]	@ (800846c <USBD_SetConfig+0x150>)
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	461a      	mov	r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80083c6:	4b29      	ldr	r3, [pc, #164]	@ (800846c <USBD_SetConfig+0x150>)
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	4619      	mov	r1, r3
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f7ff f83a 	bl	8007446 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fa06 	bl	80087e4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80083d8:	e042      	b.n	8008460 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80083da:	4b24      	ldr	r3, [pc, #144]	@ (800846c <USBD_SetConfig+0x150>)
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	461a      	mov	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d02a      	beq.n	800843e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	4619      	mov	r1, r3
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f7ff f828 	bl	8007446 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80083f6:	4b1d      	ldr	r3, [pc, #116]	@ (800846c <USBD_SetConfig+0x150>)
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	461a      	mov	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008400:	4b1a      	ldr	r3, [pc, #104]	@ (800846c <USBD_SetConfig+0x150>)
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	4619      	mov	r1, r3
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f7ff f801 	bl	800740e <USBD_SetClassConfig>
 800840c:	4603      	mov	r3, r0
 800840e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008410:	7bfb      	ldrb	r3, [r7, #15]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00f      	beq.n	8008436 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f918 	bl	800864e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	b2db      	uxtb	r3, r3
 8008424:	4619      	mov	r1, r3
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f7ff f80d 	bl	8007446 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2202      	movs	r2, #2
 8008430:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008434:	e014      	b.n	8008460 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f9d4 	bl	80087e4 <USBD_CtlSendStatus>
      break;
 800843c:	e010      	b.n	8008460 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f9d0 	bl	80087e4 <USBD_CtlSendStatus>
      break;
 8008444:	e00c      	b.n	8008460 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008446:	6839      	ldr	r1, [r7, #0]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 f900 	bl	800864e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800844e:	4b07      	ldr	r3, [pc, #28]	@ (800846c <USBD_SetConfig+0x150>)
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	4619      	mov	r1, r3
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f7fe fff6 	bl	8007446 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800845a:	2303      	movs	r3, #3
 800845c:	73fb      	strb	r3, [r7, #15]
      break;
 800845e:	bf00      	nop
  }

  return ret;
 8008460:	7bfb      	ldrb	r3, [r7, #15]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	2000017c 	.word	0x2000017c

08008470 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	88db      	ldrh	r3, [r3, #6]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d004      	beq.n	800848c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008482:	6839      	ldr	r1, [r7, #0]
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 f8e2 	bl	800864e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800848a:	e023      	b.n	80084d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008492:	b2db      	uxtb	r3, r3
 8008494:	2b02      	cmp	r3, #2
 8008496:	dc02      	bgt.n	800849e <USBD_GetConfig+0x2e>
 8008498:	2b00      	cmp	r3, #0
 800849a:	dc03      	bgt.n	80084a4 <USBD_GetConfig+0x34>
 800849c:	e015      	b.n	80084ca <USBD_GetConfig+0x5a>
 800849e:	2b03      	cmp	r3, #3
 80084a0:	d00b      	beq.n	80084ba <USBD_GetConfig+0x4a>
 80084a2:	e012      	b.n	80084ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	3308      	adds	r3, #8
 80084ae:	2201      	movs	r2, #1
 80084b0:	4619      	mov	r1, r3
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 f93c 	bl	8008730 <USBD_CtlSendData>
        break;
 80084b8:	e00c      	b.n	80084d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	3304      	adds	r3, #4
 80084be:	2201      	movs	r2, #1
 80084c0:	4619      	mov	r1, r3
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f934 	bl	8008730 <USBD_CtlSendData>
        break;
 80084c8:	e004      	b.n	80084d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80084ca:	6839      	ldr	r1, [r7, #0]
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 f8be 	bl	800864e <USBD_CtlError>
        break;
 80084d2:	bf00      	nop
}
 80084d4:	bf00      	nop
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	3b01      	subs	r3, #1
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d81e      	bhi.n	8008532 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	88db      	ldrh	r3, [r3, #6]
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d004      	beq.n	8008506 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80084fc:	6839      	ldr	r1, [r7, #0]
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f8a5 	bl	800864e <USBD_CtlError>
        break;
 8008504:	e01a      	b.n	800853c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2201      	movs	r2, #1
 800850a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008512:	2b00      	cmp	r3, #0
 8008514:	d005      	beq.n	8008522 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	f043 0202 	orr.w	r2, r3, #2
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	330c      	adds	r3, #12
 8008526:	2202      	movs	r2, #2
 8008528:	4619      	mov	r1, r3
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f900 	bl	8008730 <USBD_CtlSendData>
      break;
 8008530:	e004      	b.n	800853c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008532:	6839      	ldr	r1, [r7, #0]
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 f88a 	bl	800864e <USBD_CtlError>
      break;
 800853a:	bf00      	nop
  }
}
 800853c:	bf00      	nop
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	885b      	ldrh	r3, [r3, #2]
 8008552:	2b01      	cmp	r3, #1
 8008554:	d107      	bne.n	8008566 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2201      	movs	r2, #1
 800855a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 f940 	bl	80087e4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008564:	e013      	b.n	800858e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	885b      	ldrh	r3, [r3, #2]
 800856a:	2b02      	cmp	r3, #2
 800856c:	d10b      	bne.n	8008586 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	889b      	ldrh	r3, [r3, #4]
 8008572:	0a1b      	lsrs	r3, r3, #8
 8008574:	b29b      	uxth	r3, r3
 8008576:	b2da      	uxtb	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f930 	bl	80087e4 <USBD_CtlSendStatus>
}
 8008584:	e003      	b.n	800858e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008586:	6839      	ldr	r1, [r7, #0]
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 f860 	bl	800864e <USBD_CtlError>
}
 800858e:	bf00      	nop
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b082      	sub	sp, #8
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	3b01      	subs	r3, #1
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d80b      	bhi.n	80085c6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	885b      	ldrh	r3, [r3, #2]
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d10c      	bne.n	80085d0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f910 	bl	80087e4 <USBD_CtlSendStatus>
      }
      break;
 80085c4:	e004      	b.n	80085d0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80085c6:	6839      	ldr	r1, [r7, #0]
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 f840 	bl	800864e <USBD_CtlError>
      break;
 80085ce:	e000      	b.n	80085d2 <USBD_ClrFeature+0x3c>
      break;
 80085d0:	bf00      	nop
  }
}
 80085d2:	bf00      	nop
 80085d4:	3708      	adds	r7, #8
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b084      	sub	sp, #16
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	781a      	ldrb	r2, [r3, #0]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	3301      	adds	r3, #1
 80085f4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	781a      	ldrb	r2, [r3, #0]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	3301      	adds	r3, #1
 8008602:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f7ff fa16 	bl	8007a36 <SWAPBYTE>
 800860a:	4603      	mov	r3, r0
 800860c:	461a      	mov	r2, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	3301      	adds	r3, #1
 8008616:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	3301      	adds	r3, #1
 800861c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f7ff fa09 	bl	8007a36 <SWAPBYTE>
 8008624:	4603      	mov	r3, r0
 8008626:	461a      	mov	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	3301      	adds	r3, #1
 8008630:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	3301      	adds	r3, #1
 8008636:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f7ff f9fc 	bl	8007a36 <SWAPBYTE>
 800863e:	4603      	mov	r3, r0
 8008640:	461a      	mov	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	80da      	strh	r2, [r3, #6]
}
 8008646:	bf00      	nop
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b082      	sub	sp, #8
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
 8008656:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008658:	2180      	movs	r1, #128	@ 0x80
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 fcea 	bl	8009034 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008660:	2100      	movs	r1, #0
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 fce6 	bl	8009034 <USBD_LL_StallEP>
}
 8008668:	bf00      	nop
 800866a:	3708      	adds	r7, #8
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b086      	sub	sp, #24
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800867c:	2300      	movs	r3, #0
 800867e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d036      	beq.n	80086f4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800868a:	6938      	ldr	r0, [r7, #16]
 800868c:	f000 f836 	bl	80086fc <USBD_GetLen>
 8008690:	4603      	mov	r3, r0
 8008692:	3301      	adds	r3, #1
 8008694:	b29b      	uxth	r3, r3
 8008696:	005b      	lsls	r3, r3, #1
 8008698:	b29a      	uxth	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800869e:	7dfb      	ldrb	r3, [r7, #23]
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	4413      	add	r3, r2
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	7812      	ldrb	r2, [r2, #0]
 80086a8:	701a      	strb	r2, [r3, #0]
  idx++;
 80086aa:	7dfb      	ldrb	r3, [r7, #23]
 80086ac:	3301      	adds	r3, #1
 80086ae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80086b0:	7dfb      	ldrb	r3, [r7, #23]
 80086b2:	68ba      	ldr	r2, [r7, #8]
 80086b4:	4413      	add	r3, r2
 80086b6:	2203      	movs	r2, #3
 80086b8:	701a      	strb	r2, [r3, #0]
  idx++;
 80086ba:	7dfb      	ldrb	r3, [r7, #23]
 80086bc:	3301      	adds	r3, #1
 80086be:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80086c0:	e013      	b.n	80086ea <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80086c2:	7dfb      	ldrb	r3, [r7, #23]
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	4413      	add	r3, r2
 80086c8:	693a      	ldr	r2, [r7, #16]
 80086ca:	7812      	ldrb	r2, [r2, #0]
 80086cc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	3301      	adds	r3, #1
 80086d2:	613b      	str	r3, [r7, #16]
    idx++;
 80086d4:	7dfb      	ldrb	r3, [r7, #23]
 80086d6:	3301      	adds	r3, #1
 80086d8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80086da:	7dfb      	ldrb	r3, [r7, #23]
 80086dc:	68ba      	ldr	r2, [r7, #8]
 80086de:	4413      	add	r3, r2
 80086e0:	2200      	movs	r2, #0
 80086e2:	701a      	strb	r2, [r3, #0]
    idx++;
 80086e4:	7dfb      	ldrb	r3, [r7, #23]
 80086e6:	3301      	adds	r3, #1
 80086e8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d1e7      	bne.n	80086c2 <USBD_GetString+0x52>
 80086f2:	e000      	b.n	80086f6 <USBD_GetString+0x86>
    return;
 80086f4:	bf00      	nop
  }
}
 80086f6:	3718      	adds	r7, #24
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b085      	sub	sp, #20
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008704:	2300      	movs	r3, #0
 8008706:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800870c:	e005      	b.n	800871a <USBD_GetLen+0x1e>
  {
    len++;
 800870e:	7bfb      	ldrb	r3, [r7, #15]
 8008710:	3301      	adds	r3, #1
 8008712:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	3301      	adds	r3, #1
 8008718:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1f5      	bne.n	800870e <USBD_GetLen+0x12>
  }

  return len;
 8008722:	7bfb      	ldrb	r3, [r7, #15]
}
 8008724:	4618      	mov	r0, r3
 8008726:	3714      	adds	r7, #20
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2202      	movs	r2, #2
 8008740:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	68ba      	ldr	r2, [r7, #8]
 8008754:	2100      	movs	r1, #0
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f000 fcf5 	bl	8009146 <USBD_LL_Transmit>

  return USBD_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b084      	sub	sp, #16
 800876a:	af00      	add	r7, sp, #0
 800876c:	60f8      	str	r0, [r7, #12]
 800876e:	60b9      	str	r1, [r7, #8]
 8008770:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	68ba      	ldr	r2, [r7, #8]
 8008776:	2100      	movs	r1, #0
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f000 fce4 	bl	8009146 <USBD_LL_Transmit>

  return USBD_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2203      	movs	r2, #3
 8008798:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	68ba      	ldr	r2, [r7, #8]
 80087b0:	2100      	movs	r1, #0
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	f000 fce8 	bl	8009188 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b084      	sub	sp, #16
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	60f8      	str	r0, [r7, #12]
 80087ca:	60b9      	str	r1, [r7, #8]
 80087cc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	2100      	movs	r1, #0
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f000 fcd7 	bl	8009188 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3710      	adds	r7, #16
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2204      	movs	r2, #4
 80087f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80087f4:	2300      	movs	r3, #0
 80087f6:	2200      	movs	r2, #0
 80087f8:	2100      	movs	r1, #0
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 fca3 	bl	8009146 <USBD_LL_Transmit>

  return USBD_OK;
 8008800:	2300      	movs	r3, #0
}
 8008802:	4618      	mov	r0, r3
 8008804:	3708      	adds	r7, #8
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b082      	sub	sp, #8
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2205      	movs	r2, #5
 8008816:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800881a:	2300      	movs	r3, #0
 800881c:	2200      	movs	r2, #0
 800881e:	2100      	movs	r1, #0
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fcb1 	bl	8009188 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008826:	2300      	movs	r3, #0
}
 8008828:	4618      	mov	r0, r3
 800882a:	3708      	adds	r7, #8
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8008834:	2200      	movs	r2, #0
 8008836:	4912      	ldr	r1, [pc, #72]	@ (8008880 <MX_USB_Device_Init+0x50>)
 8008838:	4812      	ldr	r0, [pc, #72]	@ (8008884 <MX_USB_Device_Init+0x54>)
 800883a:	f7fe fd6b 	bl	8007314 <USBD_Init>
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d001      	beq.n	8008848 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8008844:	f7f7 fdeb 	bl	800041e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8008848:	490f      	ldr	r1, [pc, #60]	@ (8008888 <MX_USB_Device_Init+0x58>)
 800884a:	480e      	ldr	r0, [pc, #56]	@ (8008884 <MX_USB_Device_Init+0x54>)
 800884c:	f7fe fd92 	bl	8007374 <USBD_RegisterClass>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d001      	beq.n	800885a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8008856:	f7f7 fde2 	bl	800041e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800885a:	490c      	ldr	r1, [pc, #48]	@ (800888c <MX_USB_Device_Init+0x5c>)
 800885c:	4809      	ldr	r0, [pc, #36]	@ (8008884 <MX_USB_Device_Init+0x54>)
 800885e:	f7fe fc89 	bl	8007174 <USBD_CDC_RegisterInterface>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d001      	beq.n	800886c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8008868:	f7f7 fdd9 	bl	800041e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800886c:	4805      	ldr	r0, [pc, #20]	@ (8008884 <MX_USB_Device_Init+0x54>)
 800886e:	f7fe fdb7 	bl	80073e0 <USBD_Start>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d001      	beq.n	800887c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8008878:	f7f7 fdd1 	bl	800041e <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800887c:	bf00      	nop
 800887e:	bd80      	pop	{r7, pc}
 8008880:	200000b4 	.word	0x200000b4
 8008884:	20000180 	.word	0x20000180
 8008888:	20000020 	.word	0x20000020
 800888c:	200000a0 	.word	0x200000a0

08008890 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008894:	2200      	movs	r2, #0
 8008896:	4905      	ldr	r1, [pc, #20]	@ (80088ac <CDC_Init_FS+0x1c>)
 8008898:	4805      	ldr	r0, [pc, #20]	@ (80088b0 <CDC_Init_FS+0x20>)
 800889a:	f7fe fc85 	bl	80071a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800889e:	4905      	ldr	r1, [pc, #20]	@ (80088b4 <CDC_Init_FS+0x24>)
 80088a0:	4803      	ldr	r0, [pc, #12]	@ (80088b0 <CDC_Init_FS+0x20>)
 80088a2:	f7fe fca3 	bl	80071ec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80088a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	20000c5c 	.word	0x20000c5c
 80088b0:	20000180 	.word	0x20000180
 80088b4:	2000045c 	.word	0x2000045c

080088b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80088b8:	b480      	push	{r7}
 80088ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80088bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80088be:	4618      	mov	r0, r3
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	4603      	mov	r3, r0
 80088d0:	6039      	str	r1, [r7, #0]
 80088d2:	71fb      	strb	r3, [r7, #7]
 80088d4:	4613      	mov	r3, r2
 80088d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80088d8:	79fb      	ldrb	r3, [r7, #7]
 80088da:	2b23      	cmp	r3, #35	@ 0x23
 80088dc:	d84a      	bhi.n	8008974 <CDC_Control_FS+0xac>
 80088de:	a201      	add	r2, pc, #4	@ (adr r2, 80088e4 <CDC_Control_FS+0x1c>)
 80088e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e4:	08008975 	.word	0x08008975
 80088e8:	08008975 	.word	0x08008975
 80088ec:	08008975 	.word	0x08008975
 80088f0:	08008975 	.word	0x08008975
 80088f4:	08008975 	.word	0x08008975
 80088f8:	08008975 	.word	0x08008975
 80088fc:	08008975 	.word	0x08008975
 8008900:	08008975 	.word	0x08008975
 8008904:	08008975 	.word	0x08008975
 8008908:	08008975 	.word	0x08008975
 800890c:	08008975 	.word	0x08008975
 8008910:	08008975 	.word	0x08008975
 8008914:	08008975 	.word	0x08008975
 8008918:	08008975 	.word	0x08008975
 800891c:	08008975 	.word	0x08008975
 8008920:	08008975 	.word	0x08008975
 8008924:	08008975 	.word	0x08008975
 8008928:	08008975 	.word	0x08008975
 800892c:	08008975 	.word	0x08008975
 8008930:	08008975 	.word	0x08008975
 8008934:	08008975 	.word	0x08008975
 8008938:	08008975 	.word	0x08008975
 800893c:	08008975 	.word	0x08008975
 8008940:	08008975 	.word	0x08008975
 8008944:	08008975 	.word	0x08008975
 8008948:	08008975 	.word	0x08008975
 800894c:	08008975 	.word	0x08008975
 8008950:	08008975 	.word	0x08008975
 8008954:	08008975 	.word	0x08008975
 8008958:	08008975 	.word	0x08008975
 800895c:	08008975 	.word	0x08008975
 8008960:	08008975 	.word	0x08008975
 8008964:	08008975 	.word	0x08008975
 8008968:	08008975 	.word	0x08008975
 800896c:	08008975 	.word	0x08008975
 8008970:	08008975 	.word	0x08008975
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008974:	bf00      	nop
  }

  return (USBD_OK);
 8008976:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008978:	4618      	mov	r0, r3
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800898e:	6879      	ldr	r1, [r7, #4]
 8008990:	4805      	ldr	r0, [pc, #20]	@ (80089a8 <CDC_Receive_FS+0x24>)
 8008992:	f7fe fc2b 	bl	80071ec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008996:	4804      	ldr	r0, [pc, #16]	@ (80089a8 <CDC_Receive_FS+0x24>)
 8008998:	f7fe fc86 	bl	80072a8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800899c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3708      	adds	r7, #8
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	20000180 	.word	0x20000180

080089ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	460b      	mov	r3, r1
 80089b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80089b8:	2300      	movs	r3, #0
 80089ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80089bc:	4b0d      	ldr	r3, [pc, #52]	@ (80089f4 <CDC_Transmit_FS+0x48>)
 80089be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d001      	beq.n	80089d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80089ce:	2301      	movs	r3, #1
 80089d0:	e00b      	b.n	80089ea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80089d2:	887b      	ldrh	r3, [r7, #2]
 80089d4:	461a      	mov	r2, r3
 80089d6:	6879      	ldr	r1, [r7, #4]
 80089d8:	4806      	ldr	r0, [pc, #24]	@ (80089f4 <CDC_Transmit_FS+0x48>)
 80089da:	f7fe fbe5 	bl	80071a8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80089de:	4805      	ldr	r0, [pc, #20]	@ (80089f4 <CDC_Transmit_FS+0x48>)
 80089e0:	f7fe fc22 	bl	8007228 <USBD_CDC_TransmitPacket>
 80089e4:	4603      	mov	r3, r0
 80089e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80089e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	20000180 	.word	0x20000180

080089f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b087      	sub	sp, #28
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	4613      	mov	r3, r2
 8008a04:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008a0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	371c      	adds	r7, #28
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr
	...

08008a1c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	4603      	mov	r3, r0
 8008a24:	6039      	str	r1, [r7, #0]
 8008a26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	2212      	movs	r2, #18
 8008a2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8008a2e:	4b03      	ldr	r3, [pc, #12]	@ (8008a3c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr
 8008a3c:	200000d4 	.word	0x200000d4

08008a40 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	4603      	mov	r3, r0
 8008a48:	6039      	str	r1, [r7, #0]
 8008a4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	2204      	movs	r2, #4
 8008a50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008a52:	4b03      	ldr	r3, [pc, #12]	@ (8008a60 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	370c      	adds	r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr
 8008a60:	200000e8 	.word	0x200000e8

08008a64 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	6039      	str	r1, [r7, #0]
 8008a6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a70:	79fb      	ldrb	r3, [r7, #7]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d105      	bne.n	8008a82 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008a76:	683a      	ldr	r2, [r7, #0]
 8008a78:	4907      	ldr	r1, [pc, #28]	@ (8008a98 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008a7a:	4808      	ldr	r0, [pc, #32]	@ (8008a9c <USBD_CDC_ProductStrDescriptor+0x38>)
 8008a7c:	f7ff fdf8 	bl	8008670 <USBD_GetString>
 8008a80:	e004      	b.n	8008a8c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008a82:	683a      	ldr	r2, [r7, #0]
 8008a84:	4904      	ldr	r1, [pc, #16]	@ (8008a98 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008a86:	4805      	ldr	r0, [pc, #20]	@ (8008a9c <USBD_CDC_ProductStrDescriptor+0x38>)
 8008a88:	f7ff fdf2 	bl	8008670 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a8c:	4b02      	ldr	r3, [pc, #8]	@ (8008a98 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3708      	adds	r7, #8
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	2000145c 	.word	0x2000145c
 8008a9c:	08009c88 	.word	0x08009c88

08008aa0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	6039      	str	r1, [r7, #0]
 8008aaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008aac:	683a      	ldr	r2, [r7, #0]
 8008aae:	4904      	ldr	r1, [pc, #16]	@ (8008ac0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8008ab0:	4804      	ldr	r0, [pc, #16]	@ (8008ac4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8008ab2:	f7ff fddd 	bl	8008670 <USBD_GetString>
  return USBD_StrDesc;
 8008ab6:	4b02      	ldr	r3, [pc, #8]	@ (8008ac0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3708      	adds	r7, #8
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	2000145c 	.word	0x2000145c
 8008ac4:	08009ca0 	.word	0x08009ca0

08008ac8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	4603      	mov	r3, r0
 8008ad0:	6039      	str	r1, [r7, #0]
 8008ad2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	221a      	movs	r2, #26
 8008ad8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008ada:	f000 f843 	bl	8008b64 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008ade:	4b02      	ldr	r3, [pc, #8]	@ (8008ae8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3708      	adds	r7, #8
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	200000ec 	.word	0x200000ec

08008aec <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	4603      	mov	r3, r0
 8008af4:	6039      	str	r1, [r7, #0]
 8008af6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008af8:	79fb      	ldrb	r3, [r7, #7]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d105      	bne.n	8008b0a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008afe:	683a      	ldr	r2, [r7, #0]
 8008b00:	4907      	ldr	r1, [pc, #28]	@ (8008b20 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008b02:	4808      	ldr	r0, [pc, #32]	@ (8008b24 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008b04:	f7ff fdb4 	bl	8008670 <USBD_GetString>
 8008b08:	e004      	b.n	8008b14 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008b0a:	683a      	ldr	r2, [r7, #0]
 8008b0c:	4904      	ldr	r1, [pc, #16]	@ (8008b20 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008b0e:	4805      	ldr	r0, [pc, #20]	@ (8008b24 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008b10:	f7ff fdae 	bl	8008670 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b14:	4b02      	ldr	r3, [pc, #8]	@ (8008b20 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3708      	adds	r7, #8
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	2000145c 	.word	0x2000145c
 8008b24:	08009cb4 	.word	0x08009cb4

08008b28 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	4603      	mov	r3, r0
 8008b30:	6039      	str	r1, [r7, #0]
 8008b32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b34:	79fb      	ldrb	r3, [r7, #7]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d105      	bne.n	8008b46 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008b3a:	683a      	ldr	r2, [r7, #0]
 8008b3c:	4907      	ldr	r1, [pc, #28]	@ (8008b5c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008b3e:	4808      	ldr	r0, [pc, #32]	@ (8008b60 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008b40:	f7ff fd96 	bl	8008670 <USBD_GetString>
 8008b44:	e004      	b.n	8008b50 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008b46:	683a      	ldr	r2, [r7, #0]
 8008b48:	4904      	ldr	r1, [pc, #16]	@ (8008b5c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008b4a:	4805      	ldr	r0, [pc, #20]	@ (8008b60 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008b4c:	f7ff fd90 	bl	8008670 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b50:	4b02      	ldr	r3, [pc, #8]	@ (8008b5c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3708      	adds	r7, #8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	2000145c 	.word	0x2000145c
 8008b60:	08009cc0 	.word	0x08009cc0

08008b64 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8008ba8 <Get_SerialNum+0x44>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008b70:	4b0e      	ldr	r3, [pc, #56]	@ (8008bac <Get_SerialNum+0x48>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008b76:	4b0e      	ldr	r3, [pc, #56]	@ (8008bb0 <Get_SerialNum+0x4c>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4413      	add	r3, r2
 8008b82:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d009      	beq.n	8008b9e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008b8a:	2208      	movs	r2, #8
 8008b8c:	4909      	ldr	r1, [pc, #36]	@ (8008bb4 <Get_SerialNum+0x50>)
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f000 f814 	bl	8008bbc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008b94:	2204      	movs	r2, #4
 8008b96:	4908      	ldr	r1, [pc, #32]	@ (8008bb8 <Get_SerialNum+0x54>)
 8008b98:	68b8      	ldr	r0, [r7, #8]
 8008b9a:	f000 f80f 	bl	8008bbc <IntToUnicode>
  }
}
 8008b9e:	bf00      	nop
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	1fff7590 	.word	0x1fff7590
 8008bac:	1fff7594 	.word	0x1fff7594
 8008bb0:	1fff7598 	.word	0x1fff7598
 8008bb4:	200000ee 	.word	0x200000ee
 8008bb8:	200000fe 	.word	0x200000fe

08008bbc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b087      	sub	sp, #28
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008bce:	2300      	movs	r3, #0
 8008bd0:	75fb      	strb	r3, [r7, #23]
 8008bd2:	e027      	b.n	8008c24 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	0f1b      	lsrs	r3, r3, #28
 8008bd8:	2b09      	cmp	r3, #9
 8008bda:	d80b      	bhi.n	8008bf4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	0f1b      	lsrs	r3, r3, #28
 8008be0:	b2da      	uxtb	r2, r3
 8008be2:	7dfb      	ldrb	r3, [r7, #23]
 8008be4:	005b      	lsls	r3, r3, #1
 8008be6:	4619      	mov	r1, r3
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	440b      	add	r3, r1
 8008bec:	3230      	adds	r2, #48	@ 0x30
 8008bee:	b2d2      	uxtb	r2, r2
 8008bf0:	701a      	strb	r2, [r3, #0]
 8008bf2:	e00a      	b.n	8008c0a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	0f1b      	lsrs	r3, r3, #28
 8008bf8:	b2da      	uxtb	r2, r3
 8008bfa:	7dfb      	ldrb	r3, [r7, #23]
 8008bfc:	005b      	lsls	r3, r3, #1
 8008bfe:	4619      	mov	r1, r3
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	440b      	add	r3, r1
 8008c04:	3237      	adds	r2, #55	@ 0x37
 8008c06:	b2d2      	uxtb	r2, r2
 8008c08:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	011b      	lsls	r3, r3, #4
 8008c0e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008c10:	7dfb      	ldrb	r3, [r7, #23]
 8008c12:	005b      	lsls	r3, r3, #1
 8008c14:	3301      	adds	r3, #1
 8008c16:	68ba      	ldr	r2, [r7, #8]
 8008c18:	4413      	add	r3, r2
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008c1e:	7dfb      	ldrb	r3, [r7, #23]
 8008c20:	3301      	adds	r3, #1
 8008c22:	75fb      	strb	r3, [r7, #23]
 8008c24:	7dfa      	ldrb	r2, [r7, #23]
 8008c26:	79fb      	ldrb	r3, [r7, #7]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d3d3      	bcc.n	8008bd4 <IntToUnicode+0x18>
  }
}
 8008c2c:	bf00      	nop
 8008c2e:	bf00      	nop
 8008c30:	371c      	adds	r7, #28
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr

08008c3a <LL_AHB2_GRP1_EnableClock>:
{
 8008c3a:	b480      	push	{r7}
 8008c3c:	b085      	sub	sp, #20
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8008c42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8008c52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4013      	ands	r3, r2
 8008c5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
}
 8008c60:	bf00      	nop
 8008c62:	3714      	adds	r7, #20
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8008c74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c78:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008c7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8008c84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c88:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4013      	ands	r3, r2
 8008c8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008c90:	68fb      	ldr	r3, [r7, #12]
}
 8008c92:	bf00      	nop
 8008c94:	3714      	adds	r7, #20
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
	...

08008ca0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b09c      	sub	sp, #112	@ 0x70
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ca8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8008cac:	2200      	movs	r2, #0
 8008cae:	601a      	str	r2, [r3, #0]
 8008cb0:	605a      	str	r2, [r3, #4]
 8008cb2:	609a      	str	r2, [r3, #8]
 8008cb4:	60da      	str	r2, [r3, #12]
 8008cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008cb8:	f107 030c 	add.w	r3, r7, #12
 8008cbc:	2250      	movs	r2, #80	@ 0x50
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f000 fb35 	bl	8009330 <memset>
  if(pcdHandle->Instance==USB)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a23      	ldr	r2, [pc, #140]	@ (8008d58 <HAL_PCD_MspInit+0xb8>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d13e      	bne.n	8008d4e <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008cd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008cd4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8008cd6:	2306      	movs	r3, #6
 8008cd8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8008cda:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008cde:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8008ce0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008ce4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8008ce6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8008cea:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8008cec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008cf0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8008cf2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008cf6:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008cf8:	f107 030c 	add.w	r3, r7, #12
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7fb f838 	bl	8003d72 <HAL_RCCEx_PeriphCLKConfig>
 8008d02:	4603      	mov	r3, r0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d001      	beq.n	8008d0c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8008d08:	f7f7 fb89 	bl	800041e <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d0c:	2001      	movs	r0, #1
 8008d0e:	f7ff ff94 	bl	8008c3a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008d12:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008d16:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d18:	2302      	movs	r3, #2
 8008d1a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d20:	2300      	movs	r3, #0
 8008d22:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8008d24:	230a      	movs	r3, #10
 8008d26:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d28:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008d32:	f7f7 fe37 	bl	80009a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008d36:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8008d3a:	f7ff ff97 	bl	8008c6c <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8008d3e:	2200      	movs	r2, #0
 8008d40:	2100      	movs	r1, #0
 8008d42:	2014      	movs	r0, #20
 8008d44:	f7f7 fdf9 	bl	800093a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8008d48:	2014      	movs	r0, #20
 8008d4a:	f7f7 fe10 	bl	800096e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008d4e:	bf00      	nop
 8008d50:	3770      	adds	r7, #112	@ 0x70
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	40006800 	.word	0x40006800

08008d5c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008d70:	4619      	mov	r1, r3
 8008d72:	4610      	mov	r0, r2
 8008d74:	f7fe fb81 	bl	800747a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8008d78:	bf00      	nop
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	460b      	mov	r3, r1
 8008d8a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8008d92:	78fa      	ldrb	r2, [r7, #3]
 8008d94:	6879      	ldr	r1, [r7, #4]
 8008d96:	4613      	mov	r3, r2
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	4413      	add	r3, r2
 8008d9c:	00db      	lsls	r3, r3, #3
 8008d9e:	440b      	add	r3, r1
 8008da0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	78fb      	ldrb	r3, [r7, #3]
 8008da8:	4619      	mov	r1, r3
 8008daa:	f7fe fbbb 	bl	8007524 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8008dae:	bf00      	nop
 8008db0:	3708      	adds	r7, #8
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b082      	sub	sp, #8
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8008dc8:	78fa      	ldrb	r2, [r7, #3]
 8008dca:	6879      	ldr	r1, [r7, #4]
 8008dcc:	4613      	mov	r3, r2
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	4413      	add	r3, r2
 8008dd2:	00db      	lsls	r3, r3, #3
 8008dd4:	440b      	add	r3, r1
 8008dd6:	3324      	adds	r3, #36	@ 0x24
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	78fb      	ldrb	r3, [r7, #3]
 8008ddc:	4619      	mov	r1, r3
 8008dde:	f7fe fc54 	bl	800768a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8008de2:	bf00      	nop
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b082      	sub	sp, #8
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7fe fd8e 	bl	800791a <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8008dfe:	bf00      	nop
 8008e00:	3708      	adds	r7, #8
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b084      	sub	sp, #16
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	795b      	ldrb	r3, [r3, #5]
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d001      	beq.n	8008e1e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008e1a:	f7f7 fb00 	bl	800041e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008e24:	7bfa      	ldrb	r2, [r7, #15]
 8008e26:	4611      	mov	r1, r2
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f7fe fd32 	bl	8007892 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7fe fcda 	bl	80077ee <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8008e3a:	bf00      	nop
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
	...

08008e44 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7fe fd2d 	bl	80078b2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	7a5b      	ldrb	r3, [r3, #9]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d005      	beq.n	8008e6c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e60:	4b04      	ldr	r3, [pc, #16]	@ (8008e74 <HAL_PCD_SuspendCallback+0x30>)
 8008e62:	691b      	ldr	r3, [r3, #16]
 8008e64:	4a03      	ldr	r2, [pc, #12]	@ (8008e74 <HAL_PCD_SuspendCallback+0x30>)
 8008e66:	f043 0306 	orr.w	r3, r3, #6
 8008e6a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8008e6c:	bf00      	nop
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	e000ed00 	.word	0xe000ed00

08008e78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	7a5b      	ldrb	r3, [r3, #9]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d007      	beq.n	8008e98 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e88:	4b08      	ldr	r3, [pc, #32]	@ (8008eac <HAL_PCD_ResumeCallback+0x34>)
 8008e8a:	691b      	ldr	r3, [r3, #16]
 8008e8c:	4a07      	ldr	r2, [pc, #28]	@ (8008eac <HAL_PCD_ResumeCallback+0x34>)
 8008e8e:	f023 0306 	bic.w	r3, r3, #6
 8008e92:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008e94:	f000 f9fa 	bl	800928c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7fe fd23 	bl	80078ea <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8008ea4:	bf00      	nop
 8008ea6:	3708      	adds	r7, #8
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	e000ed00 	.word	0xe000ed00

08008eb0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8008eb8:	4a2c      	ldr	r2, [pc, #176]	@ (8008f6c <USBD_LL_Init+0xbc>)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a2a      	ldr	r2, [pc, #168]	@ (8008f6c <USBD_LL_Init+0xbc>)
 8008ec4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8008ec8:	f7f9 fc60 	bl	800278c <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8008ecc:	4b27      	ldr	r3, [pc, #156]	@ (8008f6c <USBD_LL_Init+0xbc>)
 8008ece:	4a28      	ldr	r2, [pc, #160]	@ (8008f70 <USBD_LL_Init+0xc0>)
 8008ed0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008ed2:	4b26      	ldr	r3, [pc, #152]	@ (8008f6c <USBD_LL_Init+0xbc>)
 8008ed4:	2208      	movs	r2, #8
 8008ed6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008ed8:	4b24      	ldr	r3, [pc, #144]	@ (8008f6c <USBD_LL_Init+0xbc>)
 8008eda:	2202      	movs	r2, #2
 8008edc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008ede:	4b23      	ldr	r3, [pc, #140]	@ (8008f6c <USBD_LL_Init+0xbc>)
 8008ee0:	2202      	movs	r2, #2
 8008ee2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8008ee4:	4b21      	ldr	r3, [pc, #132]	@ (8008f6c <USBD_LL_Init+0xbc>)
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008eea:	4b20      	ldr	r3, [pc, #128]	@ (8008f6c <USBD_LL_Init+0xbc>)
 8008eec:	2200      	movs	r2, #0
 8008eee:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008ef0:	4b1e      	ldr	r3, [pc, #120]	@ (8008f6c <USBD_LL_Init+0xbc>)
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8008f6c <USBD_LL_Init+0xbc>)
 8008ef8:	2200      	movs	r2, #0
 8008efa:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008efc:	481b      	ldr	r0, [pc, #108]	@ (8008f6c <USBD_LL_Init+0xbc>)
 8008efe:	f7f7 fef3 	bl	8000ce8 <HAL_PCD_Init>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d001      	beq.n	8008f0c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8008f08:	f7f7 fa89 	bl	800041e <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008f12:	2318      	movs	r3, #24
 8008f14:	2200      	movs	r2, #0
 8008f16:	2100      	movs	r1, #0
 8008f18:	f7f9 fbac 	bl	8002674 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008f22:	2358      	movs	r3, #88	@ 0x58
 8008f24:	2200      	movs	r2, #0
 8008f26:	2180      	movs	r1, #128	@ 0x80
 8008f28:	f7f9 fba4 	bl	8002674 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008f32:	23c0      	movs	r3, #192	@ 0xc0
 8008f34:	2200      	movs	r2, #0
 8008f36:	2181      	movs	r1, #129	@ 0x81
 8008f38:	f7f9 fb9c 	bl	8002674 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008f42:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008f46:	2200      	movs	r2, #0
 8008f48:	2101      	movs	r1, #1
 8008f4a:	f7f9 fb93 	bl	8002674 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008f54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008f58:	2200      	movs	r2, #0
 8008f5a:	2182      	movs	r1, #130	@ 0x82
 8008f5c:	f7f9 fb8a 	bl	8002674 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3708      	adds	r7, #8
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	2000165c 	.word	0x2000165c
 8008f70:	40006800 	.word	0x40006800

08008f74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f80:	2300      	movs	r3, #0
 8008f82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7f7 ff7a 	bl	8000e84 <HAL_PCD_Start>
 8008f90:	4603      	mov	r3, r0
 8008f92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f94:	7bfb      	ldrb	r3, [r7, #15]
 8008f96:	4618      	mov	r0, r3
 8008f98:	f000 f97e 	bl	8009298 <USBD_Get_USB_Status>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b084      	sub	sp, #16
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
 8008fb2:	4608      	mov	r0, r1
 8008fb4:	4611      	mov	r1, r2
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	4603      	mov	r3, r0
 8008fba:	70fb      	strb	r3, [r7, #3]
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	70bb      	strb	r3, [r7, #2]
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008fd2:	78bb      	ldrb	r3, [r7, #2]
 8008fd4:	883a      	ldrh	r2, [r7, #0]
 8008fd6:	78f9      	ldrb	r1, [r7, #3]
 8008fd8:	f7f8 f8c1 	bl	800115e <HAL_PCD_EP_Open>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fe0:	7bfb      	ldrb	r3, [r7, #15]
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f000 f958 	bl	8009298 <USBD_Get_USB_Status>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fec:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b084      	sub	sp, #16
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
 8008ffe:	460b      	mov	r3, r1
 8009000:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009002:	2300      	movs	r3, #0
 8009004:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009006:	2300      	movs	r3, #0
 8009008:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009010:	78fa      	ldrb	r2, [r7, #3]
 8009012:	4611      	mov	r1, r2
 8009014:	4618      	mov	r0, r3
 8009016:	f7f8 f8ff 	bl	8001218 <HAL_PCD_EP_Close>
 800901a:	4603      	mov	r3, r0
 800901c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800901e:	7bfb      	ldrb	r3, [r7, #15]
 8009020:	4618      	mov	r0, r3
 8009022:	f000 f939 	bl	8009298 <USBD_Get_USB_Status>
 8009026:	4603      	mov	r3, r0
 8009028:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800902a:	7bbb      	ldrb	r3, [r7, #14]
}
 800902c:	4618      	mov	r0, r3
 800902e:	3710      	adds	r7, #16
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	460b      	mov	r3, r1
 800903e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009040:	2300      	movs	r3, #0
 8009042:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009044:	2300      	movs	r3, #0
 8009046:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800904e:	78fa      	ldrb	r2, [r7, #3]
 8009050:	4611      	mov	r1, r2
 8009052:	4618      	mov	r0, r3
 8009054:	f7f8 f9a8 	bl	80013a8 <HAL_PCD_EP_SetStall>
 8009058:	4603      	mov	r3, r0
 800905a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800905c:	7bfb      	ldrb	r3, [r7, #15]
 800905e:	4618      	mov	r0, r3
 8009060:	f000 f91a 	bl	8009298 <USBD_Get_USB_Status>
 8009064:	4603      	mov	r3, r0
 8009066:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009068:	7bbb      	ldrb	r3, [r7, #14]
}
 800906a:	4618      	mov	r0, r3
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009072:	b580      	push	{r7, lr}
 8009074:	b084      	sub	sp, #16
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
 800907a:	460b      	mov	r3, r1
 800907c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800907e:	2300      	movs	r3, #0
 8009080:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009082:	2300      	movs	r3, #0
 8009084:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800908c:	78fa      	ldrb	r2, [r7, #3]
 800908e:	4611      	mov	r1, r2
 8009090:	4618      	mov	r0, r3
 8009092:	f7f8 f9db 	bl	800144c <HAL_PCD_EP_ClrStall>
 8009096:	4603      	mov	r3, r0
 8009098:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800909a:	7bfb      	ldrb	r3, [r7, #15]
 800909c:	4618      	mov	r0, r3
 800909e:	f000 f8fb 	bl	8009298 <USBD_Get_USB_Status>
 80090a2:	4603      	mov	r3, r0
 80090a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	460b      	mov	r3, r1
 80090ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80090c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80090c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	da0b      	bge.n	80090e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80090cc:	78fb      	ldrb	r3, [r7, #3]
 80090ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80090d2:	68f9      	ldr	r1, [r7, #12]
 80090d4:	4613      	mov	r3, r2
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	4413      	add	r3, r2
 80090da:	00db      	lsls	r3, r3, #3
 80090dc:	440b      	add	r3, r1
 80090de:	3312      	adds	r3, #18
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	e00b      	b.n	80090fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80090e4:	78fb      	ldrb	r3, [r7, #3]
 80090e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80090ea:	68f9      	ldr	r1, [r7, #12]
 80090ec:	4613      	mov	r3, r2
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	4413      	add	r3, r2
 80090f2:	00db      	lsls	r3, r3, #3
 80090f4:	440b      	add	r3, r1
 80090f6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80090fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3714      	adds	r7, #20
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	460b      	mov	r3, r1
 8009112:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009114:	2300      	movs	r3, #0
 8009116:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009118:	2300      	movs	r3, #0
 800911a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009122:	78fa      	ldrb	r2, [r7, #3]
 8009124:	4611      	mov	r1, r2
 8009126:	4618      	mov	r0, r3
 8009128:	f7f7 fff5 	bl	8001116 <HAL_PCD_SetAddress>
 800912c:	4603      	mov	r3, r0
 800912e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009130:	7bfb      	ldrb	r3, [r7, #15]
 8009132:	4618      	mov	r0, r3
 8009134:	f000 f8b0 	bl	8009298 <USBD_Get_USB_Status>
 8009138:	4603      	mov	r3, r0
 800913a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800913c:	7bbb      	ldrb	r3, [r7, #14]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b086      	sub	sp, #24
 800914a:	af00      	add	r7, sp, #0
 800914c:	60f8      	str	r0, [r7, #12]
 800914e:	607a      	str	r2, [r7, #4]
 8009150:	603b      	str	r3, [r7, #0]
 8009152:	460b      	mov	r3, r1
 8009154:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009156:	2300      	movs	r3, #0
 8009158:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800915a:	2300      	movs	r3, #0
 800915c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009164:	7af9      	ldrb	r1, [r7, #11]
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	f7f8 f8e6 	bl	800133a <HAL_PCD_EP_Transmit>
 800916e:	4603      	mov	r3, r0
 8009170:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009172:	7dfb      	ldrb	r3, [r7, #23]
 8009174:	4618      	mov	r0, r3
 8009176:	f000 f88f 	bl	8009298 <USBD_Get_USB_Status>
 800917a:	4603      	mov	r3, r0
 800917c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800917e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009180:	4618      	mov	r0, r3
 8009182:	3718      	adds	r7, #24
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b086      	sub	sp, #24
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	607a      	str	r2, [r7, #4]
 8009192:	603b      	str	r3, [r7, #0]
 8009194:	460b      	mov	r3, r1
 8009196:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009198:	2300      	movs	r3, #0
 800919a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800919c:	2300      	movs	r3, #0
 800919e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80091a6:	7af9      	ldrb	r1, [r7, #11]
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	f7f8 f87c 	bl	80012a8 <HAL_PCD_EP_Receive>
 80091b0:	4603      	mov	r3, r0
 80091b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091b4:	7dfb      	ldrb	r3, [r7, #23]
 80091b6:	4618      	mov	r0, r3
 80091b8:	f000 f86e 	bl	8009298 <USBD_Get_USB_Status>
 80091bc:	4603      	mov	r3, r0
 80091be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091c0:	7dbb      	ldrb	r3, [r7, #22]
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3718      	adds	r7, #24
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b082      	sub	sp, #8
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
 80091d2:	460b      	mov	r3, r1
 80091d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80091dc:	78fa      	ldrb	r2, [r7, #3]
 80091de:	4611      	mov	r1, r2
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7f8 f892 	bl	800130a <HAL_PCD_EP_GetRxCount>
 80091e6:	4603      	mov	r3, r0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3708      	adds	r7, #8
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	460b      	mov	r3, r1
 80091fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80091fc:	78fb      	ldrb	r3, [r7, #3]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d002      	beq.n	8009208 <HAL_PCDEx_LPM_Callback+0x18>
 8009202:	2b01      	cmp	r3, #1
 8009204:	d013      	beq.n	800922e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009206:	e023      	b.n	8009250 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	7a5b      	ldrb	r3, [r3, #9]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d007      	beq.n	8009220 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009210:	f000 f83c 	bl	800928c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009214:	4b10      	ldr	r3, [pc, #64]	@ (8009258 <HAL_PCDEx_LPM_Callback+0x68>)
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	4a0f      	ldr	r2, [pc, #60]	@ (8009258 <HAL_PCDEx_LPM_Callback+0x68>)
 800921a:	f023 0306 	bic.w	r3, r3, #6
 800921e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009226:	4618      	mov	r0, r3
 8009228:	f7fe fb5f 	bl	80078ea <USBD_LL_Resume>
    break;
 800922c:	e010      	b.n	8009250 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009234:	4618      	mov	r0, r3
 8009236:	f7fe fb3c 	bl	80078b2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	7a5b      	ldrb	r3, [r3, #9]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d005      	beq.n	800924e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009242:	4b05      	ldr	r3, [pc, #20]	@ (8009258 <HAL_PCDEx_LPM_Callback+0x68>)
 8009244:	691b      	ldr	r3, [r3, #16]
 8009246:	4a04      	ldr	r2, [pc, #16]	@ (8009258 <HAL_PCDEx_LPM_Callback+0x68>)
 8009248:	f043 0306 	orr.w	r3, r3, #6
 800924c:	6113      	str	r3, [r2, #16]
    break;
 800924e:	bf00      	nop
}
 8009250:	bf00      	nop
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	e000ed00 	.word	0xe000ed00

0800925c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009264:	4b03      	ldr	r3, [pc, #12]	@ (8009274 <USBD_static_malloc+0x18>)
}
 8009266:	4618      	mov	r0, r3
 8009268:	370c      	adds	r7, #12
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop
 8009274:	20001938 	.word	0x20001938

08009278 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8009280:	bf00      	nop
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009290:	f7f7 f81c 	bl	80002cc <SystemClock_Config>
}
 8009294:	bf00      	nop
 8009296:	bd80      	pop	{r7, pc}

08009298 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	4603      	mov	r3, r0
 80092a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092a2:	2300      	movs	r3, #0
 80092a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80092a6:	79fb      	ldrb	r3, [r7, #7]
 80092a8:	2b03      	cmp	r3, #3
 80092aa:	d817      	bhi.n	80092dc <USBD_Get_USB_Status+0x44>
 80092ac:	a201      	add	r2, pc, #4	@ (adr r2, 80092b4 <USBD_Get_USB_Status+0x1c>)
 80092ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b2:	bf00      	nop
 80092b4:	080092c5 	.word	0x080092c5
 80092b8:	080092cb 	.word	0x080092cb
 80092bc:	080092d1 	.word	0x080092d1
 80092c0:	080092d7 	.word	0x080092d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	73fb      	strb	r3, [r7, #15]
    break;
 80092c8:	e00b      	b.n	80092e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80092ca:	2303      	movs	r3, #3
 80092cc:	73fb      	strb	r3, [r7, #15]
    break;
 80092ce:	e008      	b.n	80092e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80092d0:	2301      	movs	r3, #1
 80092d2:	73fb      	strb	r3, [r7, #15]
    break;
 80092d4:	e005      	b.n	80092e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80092d6:	2303      	movs	r3, #3
 80092d8:	73fb      	strb	r3, [r7, #15]
    break;
 80092da:	e002      	b.n	80092e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80092dc:	2303      	movs	r3, #3
 80092de:	73fb      	strb	r3, [r7, #15]
    break;
 80092e0:	bf00      	nop
  }
  return usb_status;
 80092e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3714      	adds	r7, #20
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <siprintf>:
 80092f0:	b40e      	push	{r1, r2, r3}
 80092f2:	b500      	push	{lr}
 80092f4:	b09c      	sub	sp, #112	@ 0x70
 80092f6:	ab1d      	add	r3, sp, #116	@ 0x74
 80092f8:	9002      	str	r0, [sp, #8]
 80092fa:	9006      	str	r0, [sp, #24]
 80092fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009300:	4809      	ldr	r0, [pc, #36]	@ (8009328 <siprintf+0x38>)
 8009302:	9107      	str	r1, [sp, #28]
 8009304:	9104      	str	r1, [sp, #16]
 8009306:	4909      	ldr	r1, [pc, #36]	@ (800932c <siprintf+0x3c>)
 8009308:	f853 2b04 	ldr.w	r2, [r3], #4
 800930c:	9105      	str	r1, [sp, #20]
 800930e:	6800      	ldr	r0, [r0, #0]
 8009310:	9301      	str	r3, [sp, #4]
 8009312:	a902      	add	r1, sp, #8
 8009314:	f000 f89c 	bl	8009450 <_svfiprintf_r>
 8009318:	9b02      	ldr	r3, [sp, #8]
 800931a:	2200      	movs	r2, #0
 800931c:	701a      	strb	r2, [r3, #0]
 800931e:	b01c      	add	sp, #112	@ 0x70
 8009320:	f85d eb04 	ldr.w	lr, [sp], #4
 8009324:	b003      	add	sp, #12
 8009326:	4770      	bx	lr
 8009328:	20000108 	.word	0x20000108
 800932c:	ffff0208 	.word	0xffff0208

08009330 <memset>:
 8009330:	4402      	add	r2, r0
 8009332:	4603      	mov	r3, r0
 8009334:	4293      	cmp	r3, r2
 8009336:	d100      	bne.n	800933a <memset+0xa>
 8009338:	4770      	bx	lr
 800933a:	f803 1b01 	strb.w	r1, [r3], #1
 800933e:	e7f9      	b.n	8009334 <memset+0x4>

08009340 <__errno>:
 8009340:	4b01      	ldr	r3, [pc, #4]	@ (8009348 <__errno+0x8>)
 8009342:	6818      	ldr	r0, [r3, #0]
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop
 8009348:	20000108 	.word	0x20000108

0800934c <__libc_init_array>:
 800934c:	b570      	push	{r4, r5, r6, lr}
 800934e:	4d0d      	ldr	r5, [pc, #52]	@ (8009384 <__libc_init_array+0x38>)
 8009350:	4c0d      	ldr	r4, [pc, #52]	@ (8009388 <__libc_init_array+0x3c>)
 8009352:	1b64      	subs	r4, r4, r5
 8009354:	10a4      	asrs	r4, r4, #2
 8009356:	2600      	movs	r6, #0
 8009358:	42a6      	cmp	r6, r4
 800935a:	d109      	bne.n	8009370 <__libc_init_array+0x24>
 800935c:	4d0b      	ldr	r5, [pc, #44]	@ (800938c <__libc_init_array+0x40>)
 800935e:	4c0c      	ldr	r4, [pc, #48]	@ (8009390 <__libc_init_array+0x44>)
 8009360:	f000 fc66 	bl	8009c30 <_init>
 8009364:	1b64      	subs	r4, r4, r5
 8009366:	10a4      	asrs	r4, r4, #2
 8009368:	2600      	movs	r6, #0
 800936a:	42a6      	cmp	r6, r4
 800936c:	d105      	bne.n	800937a <__libc_init_array+0x2e>
 800936e:	bd70      	pop	{r4, r5, r6, pc}
 8009370:	f855 3b04 	ldr.w	r3, [r5], #4
 8009374:	4798      	blx	r3
 8009376:	3601      	adds	r6, #1
 8009378:	e7ee      	b.n	8009358 <__libc_init_array+0xc>
 800937a:	f855 3b04 	ldr.w	r3, [r5], #4
 800937e:	4798      	blx	r3
 8009380:	3601      	adds	r6, #1
 8009382:	e7f2      	b.n	800936a <__libc_init_array+0x1e>
 8009384:	08009d8c 	.word	0x08009d8c
 8009388:	08009d8c 	.word	0x08009d8c
 800938c:	08009d8c 	.word	0x08009d8c
 8009390:	08009d90 	.word	0x08009d90

08009394 <__retarget_lock_acquire_recursive>:
 8009394:	4770      	bx	lr

08009396 <__retarget_lock_release_recursive>:
 8009396:	4770      	bx	lr

08009398 <__ssputs_r>:
 8009398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800939c:	688e      	ldr	r6, [r1, #8]
 800939e:	461f      	mov	r7, r3
 80093a0:	42be      	cmp	r6, r7
 80093a2:	680b      	ldr	r3, [r1, #0]
 80093a4:	4682      	mov	sl, r0
 80093a6:	460c      	mov	r4, r1
 80093a8:	4690      	mov	r8, r2
 80093aa:	d82d      	bhi.n	8009408 <__ssputs_r+0x70>
 80093ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80093b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80093b4:	d026      	beq.n	8009404 <__ssputs_r+0x6c>
 80093b6:	6965      	ldr	r5, [r4, #20]
 80093b8:	6909      	ldr	r1, [r1, #16]
 80093ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093be:	eba3 0901 	sub.w	r9, r3, r1
 80093c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80093c6:	1c7b      	adds	r3, r7, #1
 80093c8:	444b      	add	r3, r9
 80093ca:	106d      	asrs	r5, r5, #1
 80093cc:	429d      	cmp	r5, r3
 80093ce:	bf38      	it	cc
 80093d0:	461d      	movcc	r5, r3
 80093d2:	0553      	lsls	r3, r2, #21
 80093d4:	d527      	bpl.n	8009426 <__ssputs_r+0x8e>
 80093d6:	4629      	mov	r1, r5
 80093d8:	f000 f958 	bl	800968c <_malloc_r>
 80093dc:	4606      	mov	r6, r0
 80093de:	b360      	cbz	r0, 800943a <__ssputs_r+0xa2>
 80093e0:	6921      	ldr	r1, [r4, #16]
 80093e2:	464a      	mov	r2, r9
 80093e4:	f000 fbc4 	bl	8009b70 <memcpy>
 80093e8:	89a3      	ldrh	r3, [r4, #12]
 80093ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80093ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093f2:	81a3      	strh	r3, [r4, #12]
 80093f4:	6126      	str	r6, [r4, #16]
 80093f6:	6165      	str	r5, [r4, #20]
 80093f8:	444e      	add	r6, r9
 80093fa:	eba5 0509 	sub.w	r5, r5, r9
 80093fe:	6026      	str	r6, [r4, #0]
 8009400:	60a5      	str	r5, [r4, #8]
 8009402:	463e      	mov	r6, r7
 8009404:	42be      	cmp	r6, r7
 8009406:	d900      	bls.n	800940a <__ssputs_r+0x72>
 8009408:	463e      	mov	r6, r7
 800940a:	6820      	ldr	r0, [r4, #0]
 800940c:	4632      	mov	r2, r6
 800940e:	4641      	mov	r1, r8
 8009410:	f000 fb84 	bl	8009b1c <memmove>
 8009414:	68a3      	ldr	r3, [r4, #8]
 8009416:	1b9b      	subs	r3, r3, r6
 8009418:	60a3      	str	r3, [r4, #8]
 800941a:	6823      	ldr	r3, [r4, #0]
 800941c:	4433      	add	r3, r6
 800941e:	6023      	str	r3, [r4, #0]
 8009420:	2000      	movs	r0, #0
 8009422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009426:	462a      	mov	r2, r5
 8009428:	f000 fb4a 	bl	8009ac0 <_realloc_r>
 800942c:	4606      	mov	r6, r0
 800942e:	2800      	cmp	r0, #0
 8009430:	d1e0      	bne.n	80093f4 <__ssputs_r+0x5c>
 8009432:	6921      	ldr	r1, [r4, #16]
 8009434:	4650      	mov	r0, sl
 8009436:	f000 fba9 	bl	8009b8c <_free_r>
 800943a:	230c      	movs	r3, #12
 800943c:	f8ca 3000 	str.w	r3, [sl]
 8009440:	89a3      	ldrh	r3, [r4, #12]
 8009442:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009446:	81a3      	strh	r3, [r4, #12]
 8009448:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800944c:	e7e9      	b.n	8009422 <__ssputs_r+0x8a>
	...

08009450 <_svfiprintf_r>:
 8009450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009454:	4698      	mov	r8, r3
 8009456:	898b      	ldrh	r3, [r1, #12]
 8009458:	061b      	lsls	r3, r3, #24
 800945a:	b09d      	sub	sp, #116	@ 0x74
 800945c:	4607      	mov	r7, r0
 800945e:	460d      	mov	r5, r1
 8009460:	4614      	mov	r4, r2
 8009462:	d510      	bpl.n	8009486 <_svfiprintf_r+0x36>
 8009464:	690b      	ldr	r3, [r1, #16]
 8009466:	b973      	cbnz	r3, 8009486 <_svfiprintf_r+0x36>
 8009468:	2140      	movs	r1, #64	@ 0x40
 800946a:	f000 f90f 	bl	800968c <_malloc_r>
 800946e:	6028      	str	r0, [r5, #0]
 8009470:	6128      	str	r0, [r5, #16]
 8009472:	b930      	cbnz	r0, 8009482 <_svfiprintf_r+0x32>
 8009474:	230c      	movs	r3, #12
 8009476:	603b      	str	r3, [r7, #0]
 8009478:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800947c:	b01d      	add	sp, #116	@ 0x74
 800947e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009482:	2340      	movs	r3, #64	@ 0x40
 8009484:	616b      	str	r3, [r5, #20]
 8009486:	2300      	movs	r3, #0
 8009488:	9309      	str	r3, [sp, #36]	@ 0x24
 800948a:	2320      	movs	r3, #32
 800948c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009490:	f8cd 800c 	str.w	r8, [sp, #12]
 8009494:	2330      	movs	r3, #48	@ 0x30
 8009496:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009634 <_svfiprintf_r+0x1e4>
 800949a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800949e:	f04f 0901 	mov.w	r9, #1
 80094a2:	4623      	mov	r3, r4
 80094a4:	469a      	mov	sl, r3
 80094a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094aa:	b10a      	cbz	r2, 80094b0 <_svfiprintf_r+0x60>
 80094ac:	2a25      	cmp	r2, #37	@ 0x25
 80094ae:	d1f9      	bne.n	80094a4 <_svfiprintf_r+0x54>
 80094b0:	ebba 0b04 	subs.w	fp, sl, r4
 80094b4:	d00b      	beq.n	80094ce <_svfiprintf_r+0x7e>
 80094b6:	465b      	mov	r3, fp
 80094b8:	4622      	mov	r2, r4
 80094ba:	4629      	mov	r1, r5
 80094bc:	4638      	mov	r0, r7
 80094be:	f7ff ff6b 	bl	8009398 <__ssputs_r>
 80094c2:	3001      	adds	r0, #1
 80094c4:	f000 80a7 	beq.w	8009616 <_svfiprintf_r+0x1c6>
 80094c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094ca:	445a      	add	r2, fp
 80094cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80094ce:	f89a 3000 	ldrb.w	r3, [sl]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	f000 809f 	beq.w	8009616 <_svfiprintf_r+0x1c6>
 80094d8:	2300      	movs	r3, #0
 80094da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80094de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094e2:	f10a 0a01 	add.w	sl, sl, #1
 80094e6:	9304      	str	r3, [sp, #16]
 80094e8:	9307      	str	r3, [sp, #28]
 80094ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80094ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80094f0:	4654      	mov	r4, sl
 80094f2:	2205      	movs	r2, #5
 80094f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094f8:	484e      	ldr	r0, [pc, #312]	@ (8009634 <_svfiprintf_r+0x1e4>)
 80094fa:	f7f6 fe41 	bl	8000180 <memchr>
 80094fe:	9a04      	ldr	r2, [sp, #16]
 8009500:	b9d8      	cbnz	r0, 800953a <_svfiprintf_r+0xea>
 8009502:	06d0      	lsls	r0, r2, #27
 8009504:	bf44      	itt	mi
 8009506:	2320      	movmi	r3, #32
 8009508:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800950c:	0711      	lsls	r1, r2, #28
 800950e:	bf44      	itt	mi
 8009510:	232b      	movmi	r3, #43	@ 0x2b
 8009512:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009516:	f89a 3000 	ldrb.w	r3, [sl]
 800951a:	2b2a      	cmp	r3, #42	@ 0x2a
 800951c:	d015      	beq.n	800954a <_svfiprintf_r+0xfa>
 800951e:	9a07      	ldr	r2, [sp, #28]
 8009520:	4654      	mov	r4, sl
 8009522:	2000      	movs	r0, #0
 8009524:	f04f 0c0a 	mov.w	ip, #10
 8009528:	4621      	mov	r1, r4
 800952a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800952e:	3b30      	subs	r3, #48	@ 0x30
 8009530:	2b09      	cmp	r3, #9
 8009532:	d94b      	bls.n	80095cc <_svfiprintf_r+0x17c>
 8009534:	b1b0      	cbz	r0, 8009564 <_svfiprintf_r+0x114>
 8009536:	9207      	str	r2, [sp, #28]
 8009538:	e014      	b.n	8009564 <_svfiprintf_r+0x114>
 800953a:	eba0 0308 	sub.w	r3, r0, r8
 800953e:	fa09 f303 	lsl.w	r3, r9, r3
 8009542:	4313      	orrs	r3, r2
 8009544:	9304      	str	r3, [sp, #16]
 8009546:	46a2      	mov	sl, r4
 8009548:	e7d2      	b.n	80094f0 <_svfiprintf_r+0xa0>
 800954a:	9b03      	ldr	r3, [sp, #12]
 800954c:	1d19      	adds	r1, r3, #4
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	9103      	str	r1, [sp, #12]
 8009552:	2b00      	cmp	r3, #0
 8009554:	bfbb      	ittet	lt
 8009556:	425b      	neglt	r3, r3
 8009558:	f042 0202 	orrlt.w	r2, r2, #2
 800955c:	9307      	strge	r3, [sp, #28]
 800955e:	9307      	strlt	r3, [sp, #28]
 8009560:	bfb8      	it	lt
 8009562:	9204      	strlt	r2, [sp, #16]
 8009564:	7823      	ldrb	r3, [r4, #0]
 8009566:	2b2e      	cmp	r3, #46	@ 0x2e
 8009568:	d10a      	bne.n	8009580 <_svfiprintf_r+0x130>
 800956a:	7863      	ldrb	r3, [r4, #1]
 800956c:	2b2a      	cmp	r3, #42	@ 0x2a
 800956e:	d132      	bne.n	80095d6 <_svfiprintf_r+0x186>
 8009570:	9b03      	ldr	r3, [sp, #12]
 8009572:	1d1a      	adds	r2, r3, #4
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	9203      	str	r2, [sp, #12]
 8009578:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800957c:	3402      	adds	r4, #2
 800957e:	9305      	str	r3, [sp, #20]
 8009580:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009644 <_svfiprintf_r+0x1f4>
 8009584:	7821      	ldrb	r1, [r4, #0]
 8009586:	2203      	movs	r2, #3
 8009588:	4650      	mov	r0, sl
 800958a:	f7f6 fdf9 	bl	8000180 <memchr>
 800958e:	b138      	cbz	r0, 80095a0 <_svfiprintf_r+0x150>
 8009590:	9b04      	ldr	r3, [sp, #16]
 8009592:	eba0 000a 	sub.w	r0, r0, sl
 8009596:	2240      	movs	r2, #64	@ 0x40
 8009598:	4082      	lsls	r2, r0
 800959a:	4313      	orrs	r3, r2
 800959c:	3401      	adds	r4, #1
 800959e:	9304      	str	r3, [sp, #16]
 80095a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095a4:	4824      	ldr	r0, [pc, #144]	@ (8009638 <_svfiprintf_r+0x1e8>)
 80095a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80095aa:	2206      	movs	r2, #6
 80095ac:	f7f6 fde8 	bl	8000180 <memchr>
 80095b0:	2800      	cmp	r0, #0
 80095b2:	d036      	beq.n	8009622 <_svfiprintf_r+0x1d2>
 80095b4:	4b21      	ldr	r3, [pc, #132]	@ (800963c <_svfiprintf_r+0x1ec>)
 80095b6:	bb1b      	cbnz	r3, 8009600 <_svfiprintf_r+0x1b0>
 80095b8:	9b03      	ldr	r3, [sp, #12]
 80095ba:	3307      	adds	r3, #7
 80095bc:	f023 0307 	bic.w	r3, r3, #7
 80095c0:	3308      	adds	r3, #8
 80095c2:	9303      	str	r3, [sp, #12]
 80095c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095c6:	4433      	add	r3, r6
 80095c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80095ca:	e76a      	b.n	80094a2 <_svfiprintf_r+0x52>
 80095cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80095d0:	460c      	mov	r4, r1
 80095d2:	2001      	movs	r0, #1
 80095d4:	e7a8      	b.n	8009528 <_svfiprintf_r+0xd8>
 80095d6:	2300      	movs	r3, #0
 80095d8:	3401      	adds	r4, #1
 80095da:	9305      	str	r3, [sp, #20]
 80095dc:	4619      	mov	r1, r3
 80095de:	f04f 0c0a 	mov.w	ip, #10
 80095e2:	4620      	mov	r0, r4
 80095e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095e8:	3a30      	subs	r2, #48	@ 0x30
 80095ea:	2a09      	cmp	r2, #9
 80095ec:	d903      	bls.n	80095f6 <_svfiprintf_r+0x1a6>
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d0c6      	beq.n	8009580 <_svfiprintf_r+0x130>
 80095f2:	9105      	str	r1, [sp, #20]
 80095f4:	e7c4      	b.n	8009580 <_svfiprintf_r+0x130>
 80095f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80095fa:	4604      	mov	r4, r0
 80095fc:	2301      	movs	r3, #1
 80095fe:	e7f0      	b.n	80095e2 <_svfiprintf_r+0x192>
 8009600:	ab03      	add	r3, sp, #12
 8009602:	9300      	str	r3, [sp, #0]
 8009604:	462a      	mov	r2, r5
 8009606:	4b0e      	ldr	r3, [pc, #56]	@ (8009640 <_svfiprintf_r+0x1f0>)
 8009608:	a904      	add	r1, sp, #16
 800960a:	4638      	mov	r0, r7
 800960c:	f3af 8000 	nop.w
 8009610:	1c42      	adds	r2, r0, #1
 8009612:	4606      	mov	r6, r0
 8009614:	d1d6      	bne.n	80095c4 <_svfiprintf_r+0x174>
 8009616:	89ab      	ldrh	r3, [r5, #12]
 8009618:	065b      	lsls	r3, r3, #25
 800961a:	f53f af2d 	bmi.w	8009478 <_svfiprintf_r+0x28>
 800961e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009620:	e72c      	b.n	800947c <_svfiprintf_r+0x2c>
 8009622:	ab03      	add	r3, sp, #12
 8009624:	9300      	str	r3, [sp, #0]
 8009626:	462a      	mov	r2, r5
 8009628:	4b05      	ldr	r3, [pc, #20]	@ (8009640 <_svfiprintf_r+0x1f0>)
 800962a:	a904      	add	r1, sp, #16
 800962c:	4638      	mov	r0, r7
 800962e:	f000 f91b 	bl	8009868 <_printf_i>
 8009632:	e7ed      	b.n	8009610 <_svfiprintf_r+0x1c0>
 8009634:	08009d50 	.word	0x08009d50
 8009638:	08009d5a 	.word	0x08009d5a
 800963c:	00000000 	.word	0x00000000
 8009640:	08009399 	.word	0x08009399
 8009644:	08009d56 	.word	0x08009d56

08009648 <sbrk_aligned>:
 8009648:	b570      	push	{r4, r5, r6, lr}
 800964a:	4e0f      	ldr	r6, [pc, #60]	@ (8009688 <sbrk_aligned+0x40>)
 800964c:	460c      	mov	r4, r1
 800964e:	6831      	ldr	r1, [r6, #0]
 8009650:	4605      	mov	r5, r0
 8009652:	b911      	cbnz	r1, 800965a <sbrk_aligned+0x12>
 8009654:	f000 fa7c 	bl	8009b50 <_sbrk_r>
 8009658:	6030      	str	r0, [r6, #0]
 800965a:	4621      	mov	r1, r4
 800965c:	4628      	mov	r0, r5
 800965e:	f000 fa77 	bl	8009b50 <_sbrk_r>
 8009662:	1c43      	adds	r3, r0, #1
 8009664:	d103      	bne.n	800966e <sbrk_aligned+0x26>
 8009666:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800966a:	4620      	mov	r0, r4
 800966c:	bd70      	pop	{r4, r5, r6, pc}
 800966e:	1cc4      	adds	r4, r0, #3
 8009670:	f024 0403 	bic.w	r4, r4, #3
 8009674:	42a0      	cmp	r0, r4
 8009676:	d0f8      	beq.n	800966a <sbrk_aligned+0x22>
 8009678:	1a21      	subs	r1, r4, r0
 800967a:	4628      	mov	r0, r5
 800967c:	f000 fa68 	bl	8009b50 <_sbrk_r>
 8009680:	3001      	adds	r0, #1
 8009682:	d1f2      	bne.n	800966a <sbrk_aligned+0x22>
 8009684:	e7ef      	b.n	8009666 <sbrk_aligned+0x1e>
 8009686:	bf00      	nop
 8009688:	20001c94 	.word	0x20001c94

0800968c <_malloc_r>:
 800968c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009690:	1ccd      	adds	r5, r1, #3
 8009692:	f025 0503 	bic.w	r5, r5, #3
 8009696:	3508      	adds	r5, #8
 8009698:	2d0c      	cmp	r5, #12
 800969a:	bf38      	it	cc
 800969c:	250c      	movcc	r5, #12
 800969e:	2d00      	cmp	r5, #0
 80096a0:	4606      	mov	r6, r0
 80096a2:	db01      	blt.n	80096a8 <_malloc_r+0x1c>
 80096a4:	42a9      	cmp	r1, r5
 80096a6:	d904      	bls.n	80096b2 <_malloc_r+0x26>
 80096a8:	230c      	movs	r3, #12
 80096aa:	6033      	str	r3, [r6, #0]
 80096ac:	2000      	movs	r0, #0
 80096ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009788 <_malloc_r+0xfc>
 80096b6:	f000 f9f7 	bl	8009aa8 <__malloc_lock>
 80096ba:	f8d8 3000 	ldr.w	r3, [r8]
 80096be:	461c      	mov	r4, r3
 80096c0:	bb44      	cbnz	r4, 8009714 <_malloc_r+0x88>
 80096c2:	4629      	mov	r1, r5
 80096c4:	4630      	mov	r0, r6
 80096c6:	f7ff ffbf 	bl	8009648 <sbrk_aligned>
 80096ca:	1c43      	adds	r3, r0, #1
 80096cc:	4604      	mov	r4, r0
 80096ce:	d158      	bne.n	8009782 <_malloc_r+0xf6>
 80096d0:	f8d8 4000 	ldr.w	r4, [r8]
 80096d4:	4627      	mov	r7, r4
 80096d6:	2f00      	cmp	r7, #0
 80096d8:	d143      	bne.n	8009762 <_malloc_r+0xd6>
 80096da:	2c00      	cmp	r4, #0
 80096dc:	d04b      	beq.n	8009776 <_malloc_r+0xea>
 80096de:	6823      	ldr	r3, [r4, #0]
 80096e0:	4639      	mov	r1, r7
 80096e2:	4630      	mov	r0, r6
 80096e4:	eb04 0903 	add.w	r9, r4, r3
 80096e8:	f000 fa32 	bl	8009b50 <_sbrk_r>
 80096ec:	4581      	cmp	r9, r0
 80096ee:	d142      	bne.n	8009776 <_malloc_r+0xea>
 80096f0:	6821      	ldr	r1, [r4, #0]
 80096f2:	1a6d      	subs	r5, r5, r1
 80096f4:	4629      	mov	r1, r5
 80096f6:	4630      	mov	r0, r6
 80096f8:	f7ff ffa6 	bl	8009648 <sbrk_aligned>
 80096fc:	3001      	adds	r0, #1
 80096fe:	d03a      	beq.n	8009776 <_malloc_r+0xea>
 8009700:	6823      	ldr	r3, [r4, #0]
 8009702:	442b      	add	r3, r5
 8009704:	6023      	str	r3, [r4, #0]
 8009706:	f8d8 3000 	ldr.w	r3, [r8]
 800970a:	685a      	ldr	r2, [r3, #4]
 800970c:	bb62      	cbnz	r2, 8009768 <_malloc_r+0xdc>
 800970e:	f8c8 7000 	str.w	r7, [r8]
 8009712:	e00f      	b.n	8009734 <_malloc_r+0xa8>
 8009714:	6822      	ldr	r2, [r4, #0]
 8009716:	1b52      	subs	r2, r2, r5
 8009718:	d420      	bmi.n	800975c <_malloc_r+0xd0>
 800971a:	2a0b      	cmp	r2, #11
 800971c:	d917      	bls.n	800974e <_malloc_r+0xc2>
 800971e:	1961      	adds	r1, r4, r5
 8009720:	42a3      	cmp	r3, r4
 8009722:	6025      	str	r5, [r4, #0]
 8009724:	bf18      	it	ne
 8009726:	6059      	strne	r1, [r3, #4]
 8009728:	6863      	ldr	r3, [r4, #4]
 800972a:	bf08      	it	eq
 800972c:	f8c8 1000 	streq.w	r1, [r8]
 8009730:	5162      	str	r2, [r4, r5]
 8009732:	604b      	str	r3, [r1, #4]
 8009734:	4630      	mov	r0, r6
 8009736:	f000 f9bd 	bl	8009ab4 <__malloc_unlock>
 800973a:	f104 000b 	add.w	r0, r4, #11
 800973e:	1d23      	adds	r3, r4, #4
 8009740:	f020 0007 	bic.w	r0, r0, #7
 8009744:	1ac2      	subs	r2, r0, r3
 8009746:	bf1c      	itt	ne
 8009748:	1a1b      	subne	r3, r3, r0
 800974a:	50a3      	strne	r3, [r4, r2]
 800974c:	e7af      	b.n	80096ae <_malloc_r+0x22>
 800974e:	6862      	ldr	r2, [r4, #4]
 8009750:	42a3      	cmp	r3, r4
 8009752:	bf0c      	ite	eq
 8009754:	f8c8 2000 	streq.w	r2, [r8]
 8009758:	605a      	strne	r2, [r3, #4]
 800975a:	e7eb      	b.n	8009734 <_malloc_r+0xa8>
 800975c:	4623      	mov	r3, r4
 800975e:	6864      	ldr	r4, [r4, #4]
 8009760:	e7ae      	b.n	80096c0 <_malloc_r+0x34>
 8009762:	463c      	mov	r4, r7
 8009764:	687f      	ldr	r7, [r7, #4]
 8009766:	e7b6      	b.n	80096d6 <_malloc_r+0x4a>
 8009768:	461a      	mov	r2, r3
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	42a3      	cmp	r3, r4
 800976e:	d1fb      	bne.n	8009768 <_malloc_r+0xdc>
 8009770:	2300      	movs	r3, #0
 8009772:	6053      	str	r3, [r2, #4]
 8009774:	e7de      	b.n	8009734 <_malloc_r+0xa8>
 8009776:	230c      	movs	r3, #12
 8009778:	6033      	str	r3, [r6, #0]
 800977a:	4630      	mov	r0, r6
 800977c:	f000 f99a 	bl	8009ab4 <__malloc_unlock>
 8009780:	e794      	b.n	80096ac <_malloc_r+0x20>
 8009782:	6005      	str	r5, [r0, #0]
 8009784:	e7d6      	b.n	8009734 <_malloc_r+0xa8>
 8009786:	bf00      	nop
 8009788:	20001c98 	.word	0x20001c98

0800978c <_printf_common>:
 800978c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009790:	4616      	mov	r6, r2
 8009792:	4698      	mov	r8, r3
 8009794:	688a      	ldr	r2, [r1, #8]
 8009796:	690b      	ldr	r3, [r1, #16]
 8009798:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800979c:	4293      	cmp	r3, r2
 800979e:	bfb8      	it	lt
 80097a0:	4613      	movlt	r3, r2
 80097a2:	6033      	str	r3, [r6, #0]
 80097a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80097a8:	4607      	mov	r7, r0
 80097aa:	460c      	mov	r4, r1
 80097ac:	b10a      	cbz	r2, 80097b2 <_printf_common+0x26>
 80097ae:	3301      	adds	r3, #1
 80097b0:	6033      	str	r3, [r6, #0]
 80097b2:	6823      	ldr	r3, [r4, #0]
 80097b4:	0699      	lsls	r1, r3, #26
 80097b6:	bf42      	ittt	mi
 80097b8:	6833      	ldrmi	r3, [r6, #0]
 80097ba:	3302      	addmi	r3, #2
 80097bc:	6033      	strmi	r3, [r6, #0]
 80097be:	6825      	ldr	r5, [r4, #0]
 80097c0:	f015 0506 	ands.w	r5, r5, #6
 80097c4:	d106      	bne.n	80097d4 <_printf_common+0x48>
 80097c6:	f104 0a19 	add.w	sl, r4, #25
 80097ca:	68e3      	ldr	r3, [r4, #12]
 80097cc:	6832      	ldr	r2, [r6, #0]
 80097ce:	1a9b      	subs	r3, r3, r2
 80097d0:	42ab      	cmp	r3, r5
 80097d2:	dc26      	bgt.n	8009822 <_printf_common+0x96>
 80097d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80097d8:	6822      	ldr	r2, [r4, #0]
 80097da:	3b00      	subs	r3, #0
 80097dc:	bf18      	it	ne
 80097de:	2301      	movne	r3, #1
 80097e0:	0692      	lsls	r2, r2, #26
 80097e2:	d42b      	bmi.n	800983c <_printf_common+0xb0>
 80097e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80097e8:	4641      	mov	r1, r8
 80097ea:	4638      	mov	r0, r7
 80097ec:	47c8      	blx	r9
 80097ee:	3001      	adds	r0, #1
 80097f0:	d01e      	beq.n	8009830 <_printf_common+0xa4>
 80097f2:	6823      	ldr	r3, [r4, #0]
 80097f4:	6922      	ldr	r2, [r4, #16]
 80097f6:	f003 0306 	and.w	r3, r3, #6
 80097fa:	2b04      	cmp	r3, #4
 80097fc:	bf02      	ittt	eq
 80097fe:	68e5      	ldreq	r5, [r4, #12]
 8009800:	6833      	ldreq	r3, [r6, #0]
 8009802:	1aed      	subeq	r5, r5, r3
 8009804:	68a3      	ldr	r3, [r4, #8]
 8009806:	bf0c      	ite	eq
 8009808:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800980c:	2500      	movne	r5, #0
 800980e:	4293      	cmp	r3, r2
 8009810:	bfc4      	itt	gt
 8009812:	1a9b      	subgt	r3, r3, r2
 8009814:	18ed      	addgt	r5, r5, r3
 8009816:	2600      	movs	r6, #0
 8009818:	341a      	adds	r4, #26
 800981a:	42b5      	cmp	r5, r6
 800981c:	d11a      	bne.n	8009854 <_printf_common+0xc8>
 800981e:	2000      	movs	r0, #0
 8009820:	e008      	b.n	8009834 <_printf_common+0xa8>
 8009822:	2301      	movs	r3, #1
 8009824:	4652      	mov	r2, sl
 8009826:	4641      	mov	r1, r8
 8009828:	4638      	mov	r0, r7
 800982a:	47c8      	blx	r9
 800982c:	3001      	adds	r0, #1
 800982e:	d103      	bne.n	8009838 <_printf_common+0xac>
 8009830:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009838:	3501      	adds	r5, #1
 800983a:	e7c6      	b.n	80097ca <_printf_common+0x3e>
 800983c:	18e1      	adds	r1, r4, r3
 800983e:	1c5a      	adds	r2, r3, #1
 8009840:	2030      	movs	r0, #48	@ 0x30
 8009842:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009846:	4422      	add	r2, r4
 8009848:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800984c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009850:	3302      	adds	r3, #2
 8009852:	e7c7      	b.n	80097e4 <_printf_common+0x58>
 8009854:	2301      	movs	r3, #1
 8009856:	4622      	mov	r2, r4
 8009858:	4641      	mov	r1, r8
 800985a:	4638      	mov	r0, r7
 800985c:	47c8      	blx	r9
 800985e:	3001      	adds	r0, #1
 8009860:	d0e6      	beq.n	8009830 <_printf_common+0xa4>
 8009862:	3601      	adds	r6, #1
 8009864:	e7d9      	b.n	800981a <_printf_common+0x8e>
	...

08009868 <_printf_i>:
 8009868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800986c:	7e0f      	ldrb	r7, [r1, #24]
 800986e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009870:	2f78      	cmp	r7, #120	@ 0x78
 8009872:	4691      	mov	r9, r2
 8009874:	4680      	mov	r8, r0
 8009876:	460c      	mov	r4, r1
 8009878:	469a      	mov	sl, r3
 800987a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800987e:	d807      	bhi.n	8009890 <_printf_i+0x28>
 8009880:	2f62      	cmp	r7, #98	@ 0x62
 8009882:	d80a      	bhi.n	800989a <_printf_i+0x32>
 8009884:	2f00      	cmp	r7, #0
 8009886:	f000 80d2 	beq.w	8009a2e <_printf_i+0x1c6>
 800988a:	2f58      	cmp	r7, #88	@ 0x58
 800988c:	f000 80b9 	beq.w	8009a02 <_printf_i+0x19a>
 8009890:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009894:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009898:	e03a      	b.n	8009910 <_printf_i+0xa8>
 800989a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800989e:	2b15      	cmp	r3, #21
 80098a0:	d8f6      	bhi.n	8009890 <_printf_i+0x28>
 80098a2:	a101      	add	r1, pc, #4	@ (adr r1, 80098a8 <_printf_i+0x40>)
 80098a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098a8:	08009901 	.word	0x08009901
 80098ac:	08009915 	.word	0x08009915
 80098b0:	08009891 	.word	0x08009891
 80098b4:	08009891 	.word	0x08009891
 80098b8:	08009891 	.word	0x08009891
 80098bc:	08009891 	.word	0x08009891
 80098c0:	08009915 	.word	0x08009915
 80098c4:	08009891 	.word	0x08009891
 80098c8:	08009891 	.word	0x08009891
 80098cc:	08009891 	.word	0x08009891
 80098d0:	08009891 	.word	0x08009891
 80098d4:	08009a15 	.word	0x08009a15
 80098d8:	0800993f 	.word	0x0800993f
 80098dc:	080099cf 	.word	0x080099cf
 80098e0:	08009891 	.word	0x08009891
 80098e4:	08009891 	.word	0x08009891
 80098e8:	08009a37 	.word	0x08009a37
 80098ec:	08009891 	.word	0x08009891
 80098f0:	0800993f 	.word	0x0800993f
 80098f4:	08009891 	.word	0x08009891
 80098f8:	08009891 	.word	0x08009891
 80098fc:	080099d7 	.word	0x080099d7
 8009900:	6833      	ldr	r3, [r6, #0]
 8009902:	1d1a      	adds	r2, r3, #4
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	6032      	str	r2, [r6, #0]
 8009908:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800990c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009910:	2301      	movs	r3, #1
 8009912:	e09d      	b.n	8009a50 <_printf_i+0x1e8>
 8009914:	6833      	ldr	r3, [r6, #0]
 8009916:	6820      	ldr	r0, [r4, #0]
 8009918:	1d19      	adds	r1, r3, #4
 800991a:	6031      	str	r1, [r6, #0]
 800991c:	0606      	lsls	r6, r0, #24
 800991e:	d501      	bpl.n	8009924 <_printf_i+0xbc>
 8009920:	681d      	ldr	r5, [r3, #0]
 8009922:	e003      	b.n	800992c <_printf_i+0xc4>
 8009924:	0645      	lsls	r5, r0, #25
 8009926:	d5fb      	bpl.n	8009920 <_printf_i+0xb8>
 8009928:	f9b3 5000 	ldrsh.w	r5, [r3]
 800992c:	2d00      	cmp	r5, #0
 800992e:	da03      	bge.n	8009938 <_printf_i+0xd0>
 8009930:	232d      	movs	r3, #45	@ 0x2d
 8009932:	426d      	negs	r5, r5
 8009934:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009938:	4859      	ldr	r0, [pc, #356]	@ (8009aa0 <_printf_i+0x238>)
 800993a:	230a      	movs	r3, #10
 800993c:	e011      	b.n	8009962 <_printf_i+0xfa>
 800993e:	6821      	ldr	r1, [r4, #0]
 8009940:	6833      	ldr	r3, [r6, #0]
 8009942:	0608      	lsls	r0, r1, #24
 8009944:	f853 5b04 	ldr.w	r5, [r3], #4
 8009948:	d402      	bmi.n	8009950 <_printf_i+0xe8>
 800994a:	0649      	lsls	r1, r1, #25
 800994c:	bf48      	it	mi
 800994e:	b2ad      	uxthmi	r5, r5
 8009950:	2f6f      	cmp	r7, #111	@ 0x6f
 8009952:	4853      	ldr	r0, [pc, #332]	@ (8009aa0 <_printf_i+0x238>)
 8009954:	6033      	str	r3, [r6, #0]
 8009956:	bf14      	ite	ne
 8009958:	230a      	movne	r3, #10
 800995a:	2308      	moveq	r3, #8
 800995c:	2100      	movs	r1, #0
 800995e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009962:	6866      	ldr	r6, [r4, #4]
 8009964:	60a6      	str	r6, [r4, #8]
 8009966:	2e00      	cmp	r6, #0
 8009968:	bfa2      	ittt	ge
 800996a:	6821      	ldrge	r1, [r4, #0]
 800996c:	f021 0104 	bicge.w	r1, r1, #4
 8009970:	6021      	strge	r1, [r4, #0]
 8009972:	b90d      	cbnz	r5, 8009978 <_printf_i+0x110>
 8009974:	2e00      	cmp	r6, #0
 8009976:	d04b      	beq.n	8009a10 <_printf_i+0x1a8>
 8009978:	4616      	mov	r6, r2
 800997a:	fbb5 f1f3 	udiv	r1, r5, r3
 800997e:	fb03 5711 	mls	r7, r3, r1, r5
 8009982:	5dc7      	ldrb	r7, [r0, r7]
 8009984:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009988:	462f      	mov	r7, r5
 800998a:	42bb      	cmp	r3, r7
 800998c:	460d      	mov	r5, r1
 800998e:	d9f4      	bls.n	800997a <_printf_i+0x112>
 8009990:	2b08      	cmp	r3, #8
 8009992:	d10b      	bne.n	80099ac <_printf_i+0x144>
 8009994:	6823      	ldr	r3, [r4, #0]
 8009996:	07df      	lsls	r7, r3, #31
 8009998:	d508      	bpl.n	80099ac <_printf_i+0x144>
 800999a:	6923      	ldr	r3, [r4, #16]
 800999c:	6861      	ldr	r1, [r4, #4]
 800999e:	4299      	cmp	r1, r3
 80099a0:	bfde      	ittt	le
 80099a2:	2330      	movle	r3, #48	@ 0x30
 80099a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80099a8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80099ac:	1b92      	subs	r2, r2, r6
 80099ae:	6122      	str	r2, [r4, #16]
 80099b0:	f8cd a000 	str.w	sl, [sp]
 80099b4:	464b      	mov	r3, r9
 80099b6:	aa03      	add	r2, sp, #12
 80099b8:	4621      	mov	r1, r4
 80099ba:	4640      	mov	r0, r8
 80099bc:	f7ff fee6 	bl	800978c <_printf_common>
 80099c0:	3001      	adds	r0, #1
 80099c2:	d14a      	bne.n	8009a5a <_printf_i+0x1f2>
 80099c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80099c8:	b004      	add	sp, #16
 80099ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ce:	6823      	ldr	r3, [r4, #0]
 80099d0:	f043 0320 	orr.w	r3, r3, #32
 80099d4:	6023      	str	r3, [r4, #0]
 80099d6:	4833      	ldr	r0, [pc, #204]	@ (8009aa4 <_printf_i+0x23c>)
 80099d8:	2778      	movs	r7, #120	@ 0x78
 80099da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80099de:	6823      	ldr	r3, [r4, #0]
 80099e0:	6831      	ldr	r1, [r6, #0]
 80099e2:	061f      	lsls	r7, r3, #24
 80099e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80099e8:	d402      	bmi.n	80099f0 <_printf_i+0x188>
 80099ea:	065f      	lsls	r7, r3, #25
 80099ec:	bf48      	it	mi
 80099ee:	b2ad      	uxthmi	r5, r5
 80099f0:	6031      	str	r1, [r6, #0]
 80099f2:	07d9      	lsls	r1, r3, #31
 80099f4:	bf44      	itt	mi
 80099f6:	f043 0320 	orrmi.w	r3, r3, #32
 80099fa:	6023      	strmi	r3, [r4, #0]
 80099fc:	b11d      	cbz	r5, 8009a06 <_printf_i+0x19e>
 80099fe:	2310      	movs	r3, #16
 8009a00:	e7ac      	b.n	800995c <_printf_i+0xf4>
 8009a02:	4827      	ldr	r0, [pc, #156]	@ (8009aa0 <_printf_i+0x238>)
 8009a04:	e7e9      	b.n	80099da <_printf_i+0x172>
 8009a06:	6823      	ldr	r3, [r4, #0]
 8009a08:	f023 0320 	bic.w	r3, r3, #32
 8009a0c:	6023      	str	r3, [r4, #0]
 8009a0e:	e7f6      	b.n	80099fe <_printf_i+0x196>
 8009a10:	4616      	mov	r6, r2
 8009a12:	e7bd      	b.n	8009990 <_printf_i+0x128>
 8009a14:	6833      	ldr	r3, [r6, #0]
 8009a16:	6825      	ldr	r5, [r4, #0]
 8009a18:	6961      	ldr	r1, [r4, #20]
 8009a1a:	1d18      	adds	r0, r3, #4
 8009a1c:	6030      	str	r0, [r6, #0]
 8009a1e:	062e      	lsls	r6, r5, #24
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	d501      	bpl.n	8009a28 <_printf_i+0x1c0>
 8009a24:	6019      	str	r1, [r3, #0]
 8009a26:	e002      	b.n	8009a2e <_printf_i+0x1c6>
 8009a28:	0668      	lsls	r0, r5, #25
 8009a2a:	d5fb      	bpl.n	8009a24 <_printf_i+0x1bc>
 8009a2c:	8019      	strh	r1, [r3, #0]
 8009a2e:	2300      	movs	r3, #0
 8009a30:	6123      	str	r3, [r4, #16]
 8009a32:	4616      	mov	r6, r2
 8009a34:	e7bc      	b.n	80099b0 <_printf_i+0x148>
 8009a36:	6833      	ldr	r3, [r6, #0]
 8009a38:	1d1a      	adds	r2, r3, #4
 8009a3a:	6032      	str	r2, [r6, #0]
 8009a3c:	681e      	ldr	r6, [r3, #0]
 8009a3e:	6862      	ldr	r2, [r4, #4]
 8009a40:	2100      	movs	r1, #0
 8009a42:	4630      	mov	r0, r6
 8009a44:	f7f6 fb9c 	bl	8000180 <memchr>
 8009a48:	b108      	cbz	r0, 8009a4e <_printf_i+0x1e6>
 8009a4a:	1b80      	subs	r0, r0, r6
 8009a4c:	6060      	str	r0, [r4, #4]
 8009a4e:	6863      	ldr	r3, [r4, #4]
 8009a50:	6123      	str	r3, [r4, #16]
 8009a52:	2300      	movs	r3, #0
 8009a54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a58:	e7aa      	b.n	80099b0 <_printf_i+0x148>
 8009a5a:	6923      	ldr	r3, [r4, #16]
 8009a5c:	4632      	mov	r2, r6
 8009a5e:	4649      	mov	r1, r9
 8009a60:	4640      	mov	r0, r8
 8009a62:	47d0      	blx	sl
 8009a64:	3001      	adds	r0, #1
 8009a66:	d0ad      	beq.n	80099c4 <_printf_i+0x15c>
 8009a68:	6823      	ldr	r3, [r4, #0]
 8009a6a:	079b      	lsls	r3, r3, #30
 8009a6c:	d413      	bmi.n	8009a96 <_printf_i+0x22e>
 8009a6e:	68e0      	ldr	r0, [r4, #12]
 8009a70:	9b03      	ldr	r3, [sp, #12]
 8009a72:	4298      	cmp	r0, r3
 8009a74:	bfb8      	it	lt
 8009a76:	4618      	movlt	r0, r3
 8009a78:	e7a6      	b.n	80099c8 <_printf_i+0x160>
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	4632      	mov	r2, r6
 8009a7e:	4649      	mov	r1, r9
 8009a80:	4640      	mov	r0, r8
 8009a82:	47d0      	blx	sl
 8009a84:	3001      	adds	r0, #1
 8009a86:	d09d      	beq.n	80099c4 <_printf_i+0x15c>
 8009a88:	3501      	adds	r5, #1
 8009a8a:	68e3      	ldr	r3, [r4, #12]
 8009a8c:	9903      	ldr	r1, [sp, #12]
 8009a8e:	1a5b      	subs	r3, r3, r1
 8009a90:	42ab      	cmp	r3, r5
 8009a92:	dcf2      	bgt.n	8009a7a <_printf_i+0x212>
 8009a94:	e7eb      	b.n	8009a6e <_printf_i+0x206>
 8009a96:	2500      	movs	r5, #0
 8009a98:	f104 0619 	add.w	r6, r4, #25
 8009a9c:	e7f5      	b.n	8009a8a <_printf_i+0x222>
 8009a9e:	bf00      	nop
 8009aa0:	08009d61 	.word	0x08009d61
 8009aa4:	08009d72 	.word	0x08009d72

08009aa8 <__malloc_lock>:
 8009aa8:	4801      	ldr	r0, [pc, #4]	@ (8009ab0 <__malloc_lock+0x8>)
 8009aaa:	f7ff bc73 	b.w	8009394 <__retarget_lock_acquire_recursive>
 8009aae:	bf00      	nop
 8009ab0:	20001c90 	.word	0x20001c90

08009ab4 <__malloc_unlock>:
 8009ab4:	4801      	ldr	r0, [pc, #4]	@ (8009abc <__malloc_unlock+0x8>)
 8009ab6:	f7ff bc6e 	b.w	8009396 <__retarget_lock_release_recursive>
 8009aba:	bf00      	nop
 8009abc:	20001c90 	.word	0x20001c90

08009ac0 <_realloc_r>:
 8009ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ac4:	4680      	mov	r8, r0
 8009ac6:	4615      	mov	r5, r2
 8009ac8:	460c      	mov	r4, r1
 8009aca:	b921      	cbnz	r1, 8009ad6 <_realloc_r+0x16>
 8009acc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad0:	4611      	mov	r1, r2
 8009ad2:	f7ff bddb 	b.w	800968c <_malloc_r>
 8009ad6:	b92a      	cbnz	r2, 8009ae4 <_realloc_r+0x24>
 8009ad8:	f000 f858 	bl	8009b8c <_free_r>
 8009adc:	2400      	movs	r4, #0
 8009ade:	4620      	mov	r0, r4
 8009ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ae4:	f000 f89c 	bl	8009c20 <_malloc_usable_size_r>
 8009ae8:	4285      	cmp	r5, r0
 8009aea:	4606      	mov	r6, r0
 8009aec:	d802      	bhi.n	8009af4 <_realloc_r+0x34>
 8009aee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009af2:	d8f4      	bhi.n	8009ade <_realloc_r+0x1e>
 8009af4:	4629      	mov	r1, r5
 8009af6:	4640      	mov	r0, r8
 8009af8:	f7ff fdc8 	bl	800968c <_malloc_r>
 8009afc:	4607      	mov	r7, r0
 8009afe:	2800      	cmp	r0, #0
 8009b00:	d0ec      	beq.n	8009adc <_realloc_r+0x1c>
 8009b02:	42b5      	cmp	r5, r6
 8009b04:	462a      	mov	r2, r5
 8009b06:	4621      	mov	r1, r4
 8009b08:	bf28      	it	cs
 8009b0a:	4632      	movcs	r2, r6
 8009b0c:	f000 f830 	bl	8009b70 <memcpy>
 8009b10:	4621      	mov	r1, r4
 8009b12:	4640      	mov	r0, r8
 8009b14:	f000 f83a 	bl	8009b8c <_free_r>
 8009b18:	463c      	mov	r4, r7
 8009b1a:	e7e0      	b.n	8009ade <_realloc_r+0x1e>

08009b1c <memmove>:
 8009b1c:	4288      	cmp	r0, r1
 8009b1e:	b510      	push	{r4, lr}
 8009b20:	eb01 0402 	add.w	r4, r1, r2
 8009b24:	d902      	bls.n	8009b2c <memmove+0x10>
 8009b26:	4284      	cmp	r4, r0
 8009b28:	4623      	mov	r3, r4
 8009b2a:	d807      	bhi.n	8009b3c <memmove+0x20>
 8009b2c:	1e43      	subs	r3, r0, #1
 8009b2e:	42a1      	cmp	r1, r4
 8009b30:	d008      	beq.n	8009b44 <memmove+0x28>
 8009b32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b3a:	e7f8      	b.n	8009b2e <memmove+0x12>
 8009b3c:	4402      	add	r2, r0
 8009b3e:	4601      	mov	r1, r0
 8009b40:	428a      	cmp	r2, r1
 8009b42:	d100      	bne.n	8009b46 <memmove+0x2a>
 8009b44:	bd10      	pop	{r4, pc}
 8009b46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b4e:	e7f7      	b.n	8009b40 <memmove+0x24>

08009b50 <_sbrk_r>:
 8009b50:	b538      	push	{r3, r4, r5, lr}
 8009b52:	4d06      	ldr	r5, [pc, #24]	@ (8009b6c <_sbrk_r+0x1c>)
 8009b54:	2300      	movs	r3, #0
 8009b56:	4604      	mov	r4, r0
 8009b58:	4608      	mov	r0, r1
 8009b5a:	602b      	str	r3, [r5, #0]
 8009b5c:	f7f6 fca6 	bl	80004ac <_sbrk>
 8009b60:	1c43      	adds	r3, r0, #1
 8009b62:	d102      	bne.n	8009b6a <_sbrk_r+0x1a>
 8009b64:	682b      	ldr	r3, [r5, #0]
 8009b66:	b103      	cbz	r3, 8009b6a <_sbrk_r+0x1a>
 8009b68:	6023      	str	r3, [r4, #0]
 8009b6a:	bd38      	pop	{r3, r4, r5, pc}
 8009b6c:	20001c9c 	.word	0x20001c9c

08009b70 <memcpy>:
 8009b70:	440a      	add	r2, r1
 8009b72:	4291      	cmp	r1, r2
 8009b74:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009b78:	d100      	bne.n	8009b7c <memcpy+0xc>
 8009b7a:	4770      	bx	lr
 8009b7c:	b510      	push	{r4, lr}
 8009b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b86:	4291      	cmp	r1, r2
 8009b88:	d1f9      	bne.n	8009b7e <memcpy+0xe>
 8009b8a:	bd10      	pop	{r4, pc}

08009b8c <_free_r>:
 8009b8c:	b538      	push	{r3, r4, r5, lr}
 8009b8e:	4605      	mov	r5, r0
 8009b90:	2900      	cmp	r1, #0
 8009b92:	d041      	beq.n	8009c18 <_free_r+0x8c>
 8009b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b98:	1f0c      	subs	r4, r1, #4
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	bfb8      	it	lt
 8009b9e:	18e4      	addlt	r4, r4, r3
 8009ba0:	f7ff ff82 	bl	8009aa8 <__malloc_lock>
 8009ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8009c1c <_free_r+0x90>)
 8009ba6:	6813      	ldr	r3, [r2, #0]
 8009ba8:	b933      	cbnz	r3, 8009bb8 <_free_r+0x2c>
 8009baa:	6063      	str	r3, [r4, #4]
 8009bac:	6014      	str	r4, [r2, #0]
 8009bae:	4628      	mov	r0, r5
 8009bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bb4:	f7ff bf7e 	b.w	8009ab4 <__malloc_unlock>
 8009bb8:	42a3      	cmp	r3, r4
 8009bba:	d908      	bls.n	8009bce <_free_r+0x42>
 8009bbc:	6820      	ldr	r0, [r4, #0]
 8009bbe:	1821      	adds	r1, r4, r0
 8009bc0:	428b      	cmp	r3, r1
 8009bc2:	bf01      	itttt	eq
 8009bc4:	6819      	ldreq	r1, [r3, #0]
 8009bc6:	685b      	ldreq	r3, [r3, #4]
 8009bc8:	1809      	addeq	r1, r1, r0
 8009bca:	6021      	streq	r1, [r4, #0]
 8009bcc:	e7ed      	b.n	8009baa <_free_r+0x1e>
 8009bce:	461a      	mov	r2, r3
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	b10b      	cbz	r3, 8009bd8 <_free_r+0x4c>
 8009bd4:	42a3      	cmp	r3, r4
 8009bd6:	d9fa      	bls.n	8009bce <_free_r+0x42>
 8009bd8:	6811      	ldr	r1, [r2, #0]
 8009bda:	1850      	adds	r0, r2, r1
 8009bdc:	42a0      	cmp	r0, r4
 8009bde:	d10b      	bne.n	8009bf8 <_free_r+0x6c>
 8009be0:	6820      	ldr	r0, [r4, #0]
 8009be2:	4401      	add	r1, r0
 8009be4:	1850      	adds	r0, r2, r1
 8009be6:	4283      	cmp	r3, r0
 8009be8:	6011      	str	r1, [r2, #0]
 8009bea:	d1e0      	bne.n	8009bae <_free_r+0x22>
 8009bec:	6818      	ldr	r0, [r3, #0]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	6053      	str	r3, [r2, #4]
 8009bf2:	4408      	add	r0, r1
 8009bf4:	6010      	str	r0, [r2, #0]
 8009bf6:	e7da      	b.n	8009bae <_free_r+0x22>
 8009bf8:	d902      	bls.n	8009c00 <_free_r+0x74>
 8009bfa:	230c      	movs	r3, #12
 8009bfc:	602b      	str	r3, [r5, #0]
 8009bfe:	e7d6      	b.n	8009bae <_free_r+0x22>
 8009c00:	6820      	ldr	r0, [r4, #0]
 8009c02:	1821      	adds	r1, r4, r0
 8009c04:	428b      	cmp	r3, r1
 8009c06:	bf04      	itt	eq
 8009c08:	6819      	ldreq	r1, [r3, #0]
 8009c0a:	685b      	ldreq	r3, [r3, #4]
 8009c0c:	6063      	str	r3, [r4, #4]
 8009c0e:	bf04      	itt	eq
 8009c10:	1809      	addeq	r1, r1, r0
 8009c12:	6021      	streq	r1, [r4, #0]
 8009c14:	6054      	str	r4, [r2, #4]
 8009c16:	e7ca      	b.n	8009bae <_free_r+0x22>
 8009c18:	bd38      	pop	{r3, r4, r5, pc}
 8009c1a:	bf00      	nop
 8009c1c:	20001c98 	.word	0x20001c98

08009c20 <_malloc_usable_size_r>:
 8009c20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c24:	1f18      	subs	r0, r3, #4
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	bfbc      	itt	lt
 8009c2a:	580b      	ldrlt	r3, [r1, r0]
 8009c2c:	18c0      	addlt	r0, r0, r3
 8009c2e:	4770      	bx	lr

08009c30 <_init>:
 8009c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c32:	bf00      	nop
 8009c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c36:	bc08      	pop	{r3}
 8009c38:	469e      	mov	lr, r3
 8009c3a:	4770      	bx	lr

08009c3c <_fini>:
 8009c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c3e:	bf00      	nop
 8009c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c42:	bc08      	pop	{r3}
 8009c44:	469e      	mov	lr, r3
 8009c46:	4770      	bx	lr
